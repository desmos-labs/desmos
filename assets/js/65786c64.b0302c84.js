"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[52624],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var s=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=p(n),c=o,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||a;return n?s.createElement(m,r(r({ref:t},d),{},{components:n})):s.createElement(m,r({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<a;p++)r[p]=n[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}h.displayName="MDXCreateElement"},55076:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});n(67294);var s=n(3905);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},o.apply(this,arguments)}function a(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const r={},i="ADR 010: Posts module",l={unversionedId:"architecture/adr-010-posts-module",id:"architecture/adr-010-posts-module",title:"ADR 010: Posts module",description:"Changelog",source:"@site/docs/architecture/adr-010-posts-module.md",sourceDirName:"architecture",slug:"/architecture/adr-010-posts-module",permalink:"/architecture/adr-010-posts-module",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-010-posts-module.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 009: Supply module",permalink:"/architecture/adr-009-supply-module"},next:{title:"ADR 011: Reports module",permalink:"/architecture/adr-011-reports-module"}},p={},d=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Types",id:"types",level:3},{value:"Post",id:"post",level:4},{value:"Attachments",id:"attachments",level:4},{value:"<code>Params</code>",id:"params",level:3},{value:"<code>Msg</code> Service",id:"msg-service",level:3},{value:"<code>Query</code> Service",id:"query-service",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Further Discussions",id:"further-discussions",level:2},{value:"References",id:"references",level:2}],u={toc:d};function h(e){var{components:t}=e,n=a(e,["components"]);return(0,s.kt)("wrapper",o({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",o({},{id:"adr-010-posts-module"}),"ADR 010: Posts module"),(0,s.kt)("h2",o({},{id:"changelog"}),"Changelog"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"April 05th, 2022: Initial draft;"),(0,s.kt)("li",{parentName:"ul"},"April 06th, 2022: First review;"),(0,s.kt)("li",{parentName:"ul"},"April 11th, 2022: Second review;"),(0,s.kt)("li",{parentName:"ul"},"April 12th, 2022: Third review;"),(0,s.kt)("li",{parentName:"ul"},"May 26th, 2022: Fourth review;")),(0,s.kt)("h2",o({},{id:"status"}),"Status"),(0,s.kt)("p",null,"ACCEPTED Implemented"),(0,s.kt)("h2",o({},{id:"abstract"}),"Abstract"),(0,s.kt)("p",null,"This ADR contains the definition of the ",(0,s.kt)("inlineCode",{parentName:"p"},"x/posts")," module which will allow users to post text contents inside Desmos  subspaces."),(0,s.kt)("h2",o({},{id:"context"}),"Context"),(0,s.kt)("p",null,"As Desmos is thought to be a protocol to build decentralized socially-enabled applications (or social networks), one of the main features that we MUST make sure exists is the ability for users to create content inside such social networks. When designing this feature, we SHOULD consider the following:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"a post will always be submitted inside a ",(0,s.kt)("em",{parentName:"li"},"subspace"),";"),(0,s.kt)("li",{parentName:"ol"},"a post should allow to specify the minimum amount of information so that any DApp can make use of them;"),(0,s.kt)("li",{parentName:"ol"},"it is responsibility of the DApp to make sure that the various fields are filled properly upon uploading the post.")),(0,s.kt)("h2",o({},{id:"decision"}),"Decision"),(0,s.kt)("p",null,"We will implement a new module named ",(0,s.kt)("inlineCode",{parentName:"p"},"x/posts")," that allows users to perform the following operations inside subspaces that allow them to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"create a new post"),(0,s.kt)("li",{parentName:"ul"},"edit an existing post"),(0,s.kt)("li",{parentName:"ul"},"participate inside a discussion with a comment or reply to a post"),(0,s.kt)("li",{parentName:"ul"},"delete an existing post")),(0,s.kt)("h3",o({},{id:"types"}),"Types"),(0,s.kt)("p",null,"Each post MUST always have an ",(0,s.kt)("em",{parentName:"p"},"author")," which identifies the user that has created the content. It also MUST always reference a ",(0,s.kt)("em",{parentName:"p"},"subspace")," inside which it is created. In order to be valid, a post MUST either contain a ",(0,s.kt)("em",{parentName:"p"},"text")," or at least one ",(0,s.kt)("em",{parentName:"p"},"attachment"),"."),(0,s.kt)("p",null,"Optionally, a post can also have a series of ",(0,s.kt)("em",{parentName:"p"},"entities")," that have been parsed out of the text. These allow to identify particular content that should be displayed in custom ways (hashtags, mentions, urls, etc)."),(0,s.kt)("h4",o({},{id:"post"}),"Post"),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// Post contains all the information about a single post\nmessage Post {\n  // Id of the subspace inside which the post has been created \n  uint64 subspace_id = 1;\n\n  // Unique id of the post\n  uint64 id = 2;\n\n  // External id for this post\n  string external_id = 3;\n\n  // Text of the post\n  string text = 4;\n\n  // Entities connected to this post\n  Entities entities = 5;\n\n  // Author of the post\n  string author = 6;\n\n  // Id of the original post of the conversation\n  uint64 conversation_id = 7 [default = 0];\n\n  // A list this posts references (either as a reply, repost or quote)\n  repeated PostReference referenced_posts = 8;\n\n  // Reply settings of this post\n  ReplySetting reply_settings = 9;\n\n  // Creation date of the post\n  google.protobuf.Timestamp creation_date = 10;\n\n  // Last edited time of the post\n  google.protobuf.Timestamp last_edited_date = 11;\n}\n\n// PostReference contains the details of a post reference\nmessage PostReference {\n  // Type of reference \n  Type type = 1;\n  \n  // Id of the referenced post\n  uint64 post_id = 2;\n  \n  enum Type {\n    TYPE_UNSPECIFIED = 0;\n    TYPE_REPLIED_TO = 1;\n    TYPE_QUOTED = 2;\n    TYPE_REPOSTED = 3;\n  }\n}\n\n// Contains the details of entities parsed out of the post text\nmessage Entities {\n  repeated Tag hashtags = 1;\n  repeated Tag mentions = 2;\n  repeated Url urls = 3;\n}\n\n// ReplySetting contains the possible reply settings that a post can have\nenum ReplySetting {\n  // No reply setting specified\n  REPLY_SETTING_UNSPECIFIED = 0;\n  \n  // Everyone will be able to reply to this post\n  REPLY_SETTING_EVERYONE = 1;\n  \n  // Only followers of the author will be able to reply to this post\n  REPLY_SETTING_FOLLOWERS = 2;\n  \n  // Only the author mutual followers will be able to reply to this post \n  REPLY_SETTING_MUTUAL = 3;\n  \n  // Only people mentioned inside this post will be able to reply\n  REPLY_SETTING_MENTIONS = 4;\n}\n\n// Tag represents a generic tag \nmessage Tag {\n  // Index of the character inside the text at which the tag starts \n  uint64 start = 1;\n  \n  // Index of the character inside the text at which the tag ends\n  uint64 end = 2;\n  \n  // Tag reference (user address, hashtag value, etc)\n  string tag = 3;\n}\n\n// Url contains the details of a generic URL\nmessage Url {\n  // Index of the character inside the text at which the URL starts \n  uint64 start = 1;\n  \n  // Index of the character inside the text at which the URL ends\n  uint64 end = 2;\n  \n  // Value of the URL where the user should be redirected to\n  string url = 3;\n  \n  // Display value of the URL\n  string display_url = 4;\n}\n')),(0,s.kt)("h4",o({},{id:"attachments"}),"Attachments"),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// Attachment contains the data of a single post attachment\nmessage Attachment {\n  // Id of the subspace inside which the post to which this attachment should be\n  // connected is\n  uint64 subspace_id = 1;\n\n  // Id of the post to which this attachment should be connected\n  uint64 post_id = 2;\n\n  // If of this attachment\n  uint32 id = 3;\n\n  // Content of the attachment\n  google.protobuf.Any content = 4;\n}\n\n// Media represents a media attachment\nmessage Media {\n  string uri = 2;\n  string mime_type = 3;\n}\n\n// Poll represents a poll attachment\nmessage Poll {\n  // Question of the poll\n  string question = 1;\n  \n  // Answers the users can choose from\n  repeated ProvidedAnswer provided_answers = 2;\n  \n  // Date at which the poll will close\n  google.protobuf.Timestamp end_date = 3;\n  \n  // Whether the poll allows multiple choices from the same user or not \n  bool allows_multiple_answers = 4;\n  \n  // Whether the poll allows to edit an answer or not\n  bool allows_answer_edits = 5;\n\n  // Final poll results\n  PollTallyResults final_tally_results = 6;\n  \n  // Provided answer contains the details of a possible poll answer \n  message ProvidedAnswer {\n    // Text of the answer\n    string text = 1;\n    \n    // Attachments of the answer\n    repeated Attachment attachments = 2;\n  }\n}\n\n// UserAnswer represents a user answer to a poll\nmessage UserAnswer {\n  // Subspace id inside which the post related to this attachment is located\n  uint64 subspace_id = 1;\n\n  // Id of the post associated to this attachment\n  uint64 post_id = 2;\n\n  // Id of the poll to which this answer is associated\n  uint32 poll_id = 3;\n\n  // Indexes of the answers inside the ProvidedAnswers array\n  repeated uint32 answers_indexes = 4;\n\n  // Address of the user answering the poll\n  string user = 5;\n}\n\n// PollTallyResults contains the tally results for a poll\nmessage PollTallyResults {\n  repeated AnswerResult results = 1;\n  \n  // AnswerResult contains the result of a single poll provided answer\n  message AnswerResult {\n    // Index of the answer inside the poll\'s ProvidedAnswers slice \n    uint32 answer_index = 1;\n    \n    // Number of votes the answer has received\n    uint64 votes = 2;\n  }\n}\n')),(0,s.kt)("h3",o({},{id:"params"}),(0,s.kt)("inlineCode",{parentName:"h3"},"Params")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-protobuf"}),"// Params contains the parameters for the posts module\nmessage Params {\n  // Maximum length of the post text\n  uint64 max_text_length = 1; \n}\n")),(0,s.kt)("h3",o({},{id:"msg-service"}),(0,s.kt)("inlineCode",{parentName:"h3"},"Msg")," Service"),(0,s.kt)("p",null,"We will allow the following operations to be performed."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Post management")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create a post "),(0,s.kt)("li",{parentName:"ul"},"Edit an existing post"),(0,s.kt)("li",{parentName:"ul"},"Add an attachment to a post"),(0,s.kt)("li",{parentName:"ul"},"Remove an attachment from a post"),(0,s.kt)("li",{parentName:"ul"},"Delete a post   ")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Post interaction")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Answer a post poll")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"NOTE",(0,s.kt)("br",{parentName:"p"}),"\n","In order to make sure subspace moderators and admins can make sure the ToS of their application is always respected, both the removing of an attachment and the deletion of a post should be allowed also to such people.")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"NOTE",(0,s.kt)("br",{parentName:"p"}),"\n","As per their nature, ",(0,s.kt)("em",{parentName:"p"},"attachments")," are ",(0,s.kt)("strong",{parentName:"p"},"immutable"),". This means that the only operations allowed on a post attachments are either adding an attachment or deleting an existing attachment. No edit on the attachment itself is permitted.")),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\nservice Msg {\n  // CreatePost allows to create a new post\n  rpc CreatePost(MsgCreatePost) returns (MsgCreatePostResponse);\n  \n  // EditPost allows to edit an existing post\n  rpc EditPost(MsgEditPost) returns (MsgEditPostResponse);\n\n  // DeletePost allows to delete an existing post\n  rpc DeletePost(MsgDeletePost) returns (MsgDeletePostResponse);\n  \n  // AddPostAttachment allows to add a new attachment to a post\n  rpc AddPostAttachment(MsgAddPostAttachment) returns (MsgAddPostAttachmentResponse);\n  \n  // RemovePostAttachment allows to remove an attachment from a post\n  rpc RemovePostAttachment(MsgRemovePostAttachment) returns (MsgRemovePostAttachmentResponse);\n  \n  // AnswerPoll allows to answer a post poll\n  rpc AnswerPoll(MsgAnswerPoll) returns (MsgAnswerPollResponse);\n}\n\n// MsgCreatePost represents the message to be used to create a post.\nmessage MsgCreatePost {\n  // Id of the subspace inside which the post must be created \n  uint64 subspace_id = 1;\n  \n  // External id for this post\n  string external_id = 2;\n\n  // Text of the post\n  string text = 3;\n\n  // Entities connected to this post\n  Entities entities = 4;\n\n  // Attachments of the post\n  repeated google.protobuf.Any attachments = 5;\n  \n  // Author of the post\n  string author = 6;\n\n  // Id of the original post of the conversation\n  uint64 conversation_id = 7;\n\n  // Reply settings of this post\n  ReplySetting reply_settings = 8;\n\n  // A list this posts references (either as a reply, repost or quote)\n  repeated PostReference referenced_posts = 9;\n}\n\n// MsgCreatePostResponse defines the Msg/CreatePost response type.\nmessage MsgCreatePostResponse {\n  // Id of the newly created post\n  uint64 post_id = 1;\n  \n  // Creation date of the post\n  google.protobuf.Timestamp creation_date = 2;\n}\n\n// MsgEditPost represents the message to be used to edit a post.\nmessage MsgEditPost {\n  // Id of the subspace inside which the post is\n  uint64 subspace_id = 1;\n\n  // Id of the post to edit\n  uint64 id = 2;\n\n  // New text of the post\n  string text = 3;\n\n  // Editor of the post\n  string editor = 4;\n\n  // New entities connected to this post\n  Entities entities = 5;\n\n  // Author of the post\n  string author = 6;\n}\n\n// MsgCreatePostResponse defines the Msg/EditPost response type.\nmessage MsgEditPostResponse {\n  // Edit date of the post\n  google.protobuf.Timestamp edit_date = 1;\n}\n\n// MsgDeletePost represents the message used when deleting a post.\nmessage MsgDeletePost {\n  // Id of the subspace containing the post\n  uint64 subspace_id = 1;\n\n  // Id of the post to be deleted\n  uint64 post_id = 2;\n\n  // User that is deleting the post\n  string signer = 3;\n}\n\n// MsgDeletePostResponse represents the Msg/DeletePost response type\nmessage MsgDeletePostResponse {}\n\n// MsgAddPostAttachment represents the message that should be\n// used when adding an attachment to post\nmessage MsgAddPostAttachment {\n  // Id of the subspace containing the post\n  uint64 subspace_id = 1;\n  \n  // Id of the post to which to add the attachment\n  uint64 post_id = 2;\n\n  // Content of the attachment\n  google.protobuf.Any content = 3;\n\n  // Editor of the post\n  string editor = 4;\n}\n\n// MsgAddPostAttachmentResponse defines the Msg/AddPostAttachment response type.\nmessage MsgAddPostAttachmentResponse {\n  // New id of the uploaded attachment \n  uint32 attachment_id = 1;\n\n  // Edit date of the post\n  google.protobuf.Timestamp edit_date = 2;\n}\n\n// MsgRemovePostAttachment represents the message to be used when \n// removing an attachment from a post\nmessage MsgRemovePostAttachment {\n  // Id of the subspace containing the post\n  uint64 subspace_id = 1;\n\n  // Id of the post from which to remove the attachment\n  uint64 post_id = 2;\n  \n  // Id of the attachment to be removed\n  uint32 attachment_id = 3;\n\n  // User that is removing the attachment\n  string editor = 4;\n}\n\n// MsgRemovePostAttachmentResponse defines the \n// Msg/RemovePostAttachment response type.\nmessage MsgRemovePostAttachmentResponse {\n  // Edit date of the post\n  google.protobuf.Timestamp edit_date = 1;\n}\n\n// MsgAnswerPoll represents the message used to answer a poll\nmessage MsgAnswerPoll {\n  // Id of the subspace containing the post\n  uint64 subspace_id = 1;\n\n  // Id of the post that contains the poll to be answered\n  uint64 post_id = 2;\n  \n  // Id of the poll to be answered \n  uint32 poll_id = 3;\n  \n  // Indexes of the answer inside the ProvidedAnswers array\n  repeated uint32 answers_indexes = 4;\n  \n  // Address of the user answering the poll\n  string signer = 5;\n}\n\n// MsgAnswerPollResponse represents the MSg/AnswerPoll response type\nmessage MsgAnswerPollResponse {}\n')),(0,s.kt)("h3",o({},{id:"query-service"}),(0,s.kt)("inlineCode",{parentName:"h3"},"Query")," Service"),(0,s.kt)("pre",null,(0,s.kt)("code",o({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// Query defines the gRPC querier service\nservice Query {\n  // Posts queries all the posts inside a given subspace\n  rpc Posts(QueryPostsRequest) returns (QueryPostsResponse) {\n    option (google.api.http).get = "/desmos/posts/v1/{subspace_id}/posts";\n  }\n  \n  // Post queries for a single post inside a given subspace\n  rpc Post(QueryPostRequest) returns (QueryPostResponse) {\n    option (google.api.http).get = "/desmos/posts/v1/{subspace_id}/posts/{post_id}";\n  }\n  \n  // PostAttachments queries the attachments of the post having the given id\n  rpc PostAttachments(QueryPostAttachmentsRequest) returns (QueryPostAttachmentsResponse) {\n    option (google.api.http).get = "/desmos/posts/v1/{subspace_id}/posts/{post_id}/attachments";\n  }\n  \n  // PollAnswers queries the answers for the poll having the given id\n  rpc PollAnswers(QueryPollAnswersRequest) returns (QueryPollAnswersResponse) {\n    option (google.api.http).get = "/desmos/posts/v1/{subspace_id}/posts/{post_id}/polls/{poll_id}/answers";\n  }\n  \n  // Params queries the module parameters\n  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {\n    option (google.api.http).get = "/desmos/posts/v1/params";\n  }\n}\n\n// QueryPostsRequest is the request type for the Query/Posts RPC method\nmessage QueryPostsRequest {\n  // Id of the subspace to query the posts for\n  uint64 subspace_id = 1;\n  \n  // pagination defines an pagination for the request.\n  cosmos.base.query.v1beta1.PageRequest pagination = 2;\n}\n\n// QueryPostsResponse is the response type for the Query/Posts RPC method\nmessage QueryPostsResponse {\n  repeated Post posts = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n\n// QueryPostRequest is the request type for the Query/Post RPC method\nmessage QueryPostRequest {\n  uint64 subspace_id = 1;\n  uint64 post_id = 2;\n}\n\n// QueryPostResponse is the response type for the Query/Post RPC method\nmessage QueryPostResponse {\n  Post post = 1;\n}\n\n// QueryPostsRequest is the request type for the Query/PostAttachments RPC method\nmessage QueryPostAttachmentsRequest {\n  // Id of the subspace where the post is stored \n  uint64 subspace_id = 1;\n  \n  // Id of the post to query the attachments for\n  uint64 post_id = 2;\n\n  // pagination defines an pagination for the request.\n  cosmos.base.query.v1beta1.PageRequest pagination = 3;\n}\n\n// QueryPostAttachmentsResponse is the response type for the Query/PostAttachments RPC method\nmessage QueryPostAttachmentsResponse {\n  repeated Attachment attachments = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n\n// QueryPollAnswersRequest is the request type for the Query/PollAnswers RPC method\nmessage QueryPollAnswersRequest {\n  // Id of the subspace where the post is stored \n  uint64 subspace_id = 1;\n\n  // Id of the post that holds the poll\n  uint64 post_id = 2;\n  \n  // Id of the poll to query the answers for\n  uint32 poll_id = 3;\n\n  // (Optional) Address of the user to query the responses for\n  string user = 4;\n\n  // pagination defines an pagination for the request.\n  cosmos.base.query.v1beta1.PageRequest pagination = 5;\n}\n\n// QueryPollAnswersResponse is the response type for the Query/PollAnswers RPC method\nmessage QueryPollAnswersResponse {\n  repeated Answer answers = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n  \n  // Answer contains the details about a single user answer to a poll\n  message Answer {\n    // Address of the user that input this \n    string user = 1;\n    \n    // Indexes of the answers inside the ProvidedAnswers array\n    repeated uint32 answers_indexes = 2;\n  }\n}\n\n// QueryParamsRequest is the request type for the Query/Params RPC method\nmessage QueryParamsRequest {}\n\n// QueryParamsResponse is the response type for the Query/Params RPC method\nmessage QueryParamsResponse {\n  Params params = 1;\n}\n')),(0,s.kt)("h2",o({},{id:"consequences"}),"Consequences"),(0,s.kt)("h3",o({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,s.kt)("p",null,"The changes described inside this ADR are ",(0,s.kt)("strong",{parentName:"p"},"not")," backward compatible. To solve this, we will rely on the ",(0,s.kt)("inlineCode",{parentName:"p"},"x/upgrade")," module in order to properly add these new features inside a running chain. If necessary, to make sure no extra operation is performed, we should make sure that ",(0,s.kt)("inlineCode",{parentName:"p"},"fromVm[poststypes.ModuleName]")," is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"1")," before running the migrations, so that the ",(0,s.kt)("inlineCode",{parentName:"p"},"InitGenesis")," method does not get called."),(0,s.kt)("h3",o({},{id:"positive"}),"Positive"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Allows users to create content inside an application")),(0,s.kt)("h3",o({},{id:"negative"}),"Negative"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Not known")),(0,s.kt)("h3",o({},{id:"neutral"}),"Neutral"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Required the ",(0,s.kt)("inlineCode",{parentName:"li"},"x/subspaces")," to implement two new permissions: ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"PermissionManageContent")," to allow moderators to remove post attachment and posts from a subspace; "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"PermissionEditContent")," to allow users to edit a content inside a subspace.")))),(0,s.kt)("h2",o({},{id:"further-discussions"}),"Further Discussions"),(0,s.kt)("h2",o({},{id:"references"}),"References"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"{reference link}")))}h.isMDXComponent=!0}}]);