"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[31353],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},32613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});n(67294);var r=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={id:"state-sync",title:"State Sync",sidebar_label:"State Sync",slug:"state-sync"},i="State sync mainnet",l={unversionedId:"mainnet/state-sync",id:"mainnet/state-sync",title:"State Sync",description:"The following seed nodes are to be used when configuring a full node for the mainnet. If you are looking for testnet seed nodes, please refer to this instead.",source:"@site/docs/06-mainnet/03-state-sync.md",sourceDirName:"06-mainnet",slug:"/mainnet/state-sync",permalink:"/mainnet/state-sync",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/06-mainnet/03-state-sync.md",tags:[],version:"current",lastUpdatedAt:1670002176,formattedLastUpdatedAt:"Dec 2, 2022",sidebarPosition:3,frontMatter:{id:"state-sync",title:"State Sync",sidebar_label:"State Sync",slug:"state-sync"},sidebar:"docs",previous:{title:"Security",permalink:"/mainnet/security"},next:{title:"Full Sync",permalink:"/mainnet/full-sync"}},c={},p=[],d={toc:p};function u(e){var{components:t}=e,n=o(e,["components"]);return(0,r.kt)("wrapper",a({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",a({},{id:"state-sync-mainnet"}),"State sync mainnet"),(0,r.kt)("admonition",a({},{title:"Mainnet only   ",type:"caution"}),(0,r.kt)("p",{parentName:"admonition"},"The following seed nodes are to be used when configuring a full node for the ",(0,r.kt)("strong",{parentName:"p"},"mainnet"),". If you are looking for testnet seed nodes, please refer to ",(0,r.kt)("a",a({parentName:"p"},{href:"/testnet/join-public/state-sync"}),"this")," instead.  ")),(0,r.kt)("p",null,"In order to use this feature, you will have to edit a couple of things inside your ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.desmos/config/config.toml")," file,\nunder the ",(0,r.kt)("inlineCode",{parentName:"p"},"statesync")," section:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enable state sync by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"enable = true"),";")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set the RPC addresses from where to get the snapshots using the ",(0,r.kt)("inlineCode",{parentName:"p"},"rpc_servers")," field.",(0,r.kt)("br",{parentName:"p"}),"\n","You can ask inside our ",(0,r.kt)("a",a({parentName:"p"},{href:"https://discord.desmos.network/"}),"discord")," for them.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a trusted chain height, and the associated block hash. To do this, you will have to:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Get the current chain height by running:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),'curl -s <rpc-address>/commit  | jq "{height: .result.signed_header.header.height}"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Once you have the current chain height, get a height that is a little bit lower (200 blocks) than the current one.",(0,r.kt)("br",{parentName:"p"}),"\n","To do this you can execute:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-bash"}),'curl -s <rpc-address>/commit?height=<your-height> | jq "{height: .result.signed_header.header.height, hash: .result.signed_header.commit.block_id.hash}"\n\n# Example\n# curl -s https://rpc-desmos.itastakers.com/commit?height=100000 | jq "{height: .result.signed_header.header.height, hash: .result.signed_header.commit.block_id.hash}"\n'))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now that you have a trusted height and block hash, use those values as the ",(0,r.kt)("inlineCode",{parentName:"p"},"trust_height")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"trust_hash")," values.\nAlso, make sure they're the right values for the Desmos version you're starting to synchronize.\nYou can check them ",(0,r.kt)("a",a({parentName:"p"},{href:"https://github.com/desmos-labs/mainnet#state-sync"}),"here"),"."))),(0,r.kt)("p",null,"Here is an example of what the ",(0,r.kt)("inlineCode",{parentName:"p"},"statesync")," section of your ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.desmos/config/config.toml")," file should look like in the end (the ",(0,r.kt)("inlineCode",{parentName:"p"},"trust_height")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"trust_hash")," should contain your values instead):"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-toml"}),'enable = true\n\nrpc_servers = "<rpc-address-1>:26657,<rpc-address-1>:26657"\ntrust_height = <block-height>\ntrust_hash = "<block-hash>"\ntrust_period = "336h0m0s"\n')),(0,r.kt)("ol",a({},{start:5}),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add peers to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.desmos/config/config.toml")," file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",a({parentName:"pre"},{className:"language-toml"}),'persistent_peers = "<peer-node-id-1>@<peer-address-1>:26656,<peer-node-id-2>@<peer-node-address-2>:26656",...."\n')))))}u.isMDXComponent=!0}}]);