"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[2315],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=s,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},43117:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});n(67294);var a=n(3905);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}const o={},i="ADR 016: Reactions module",c={unversionedId:"architecture/adr-016-reactions-module",id:"architecture/adr-016-reactions-module",title:"ADR 016: Reactions module",description:"Changelog",source:"@site/docs/architecture/adr-016-reactions-module.md",sourceDirName:"architecture",slug:"/architecture/adr-016-reactions-module",permalink:"/architecture/adr-016-reactions-module",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-016-reactions-module.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 015: Improve chain links signature support",permalink:"/architecture/adr-015-improve-chain-link-signature-support"},next:{title:"ADR 017: Subspace fee grant",permalink:"/architecture/adr-017-subspace-fee-grant"}},l={},d=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Types",id:"types",level:3},{value:"Reaction",id:"reaction",level:4},{value:"RegisteredReaction",id:"registeredreaction",level:3},{value:"ReactionParams",id:"reactionparams",level:3},{value:"The <code>Msg</code> Service",id:"the-msg-service",level:3},{value:"The <code>Query</code> service",id:"the-query-service",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Further Discussions",id:"further-discussions",level:2},{value:"Test Cases",id:"test-cases",level:2},{value:"References",id:"references",level:2}],u={toc:d};function p(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",s({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",s({},{id:"adr-016-reactions-module"}),"ADR 016: Reactions module"),(0,a.kt)("h2",s({},{id:"changelog"}),"Changelog"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"2022, June 06th: First draft;")),(0,a.kt)("h2",s({},{id:"status"}),"Status"),(0,a.kt)("p",null,"ACCEPTED Implemented"),(0,a.kt)("h2",s({},{id:"abstract"}),"Abstract"),(0,a.kt)("p",null,"This ADR contains the specification of the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/reactions")," module which will allow users to react to different posts inside a subspace."),(0,a.kt)("h2",s({},{id:"context"}),"Context"),(0,a.kt)("p",null,"One of the most commonly used features of any centralized social network are the so-called ",(0,a.kt)("em",{parentName:"p"},"reactions"),". Initially known as ",(0,a.kt)("em",{parentName:"p"},"like"),", this feature allows users to react to different posts with a limited set of emojis or a free text limited in length (in order to distinguish it from a comment)."),(0,a.kt)("p",null,"Inside Desmos we MUST give all subspace owners the ability to decide whether reactions should be enabled or not inside their subspaces, and if each reaction should be composed of only emojis or allow even for texts. We SHOULD also allow subspace owners to register custom reactions the same way that Discord does, so that they can provide a customized user experience inside their platforms. "),(0,a.kt)("h2",s({},{id:"decision"}),"Decision"),(0,a.kt)("p",null,"We will implement a new module named ",(0,a.kt)("inlineCode",{parentName:"p"},"x/reactions")," that allows users to react to each post inside a subspace using one or more of the registered reactions if they have the permission to do so. "),(0,a.kt)("p",null,"The same module will also allow subspace owners to register their own custom reactions that users can use withing that subspace."),(0,a.kt)("h3",s({},{id:"types"}),"Types"),(0,a.kt)("h4",s({},{id:"reaction"}),"Reaction"),(0,a.kt)("p",null,"In order to allow for a better management of different reactions, each ",(0,a.kt)("inlineCode",{parentName:"p"},"Reaction")," will accept two different types of values within: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RegisteredReactionValue")," should be used when the reaction references a registered reaction; "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FreeTextValue")," should be used in all other cases. ")),(0,a.kt)("p",null,"This will allow to perform more easily the custom checks based on the different reaction params that each subspace can set."),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// Reaction contains the data of a single post reaction\nmessage Reaction {\n  // Id of the subspace inside which the reaction has been put \n  uint64 subspace_id = 1;\n  \n  // Id of the reaction within the subspace\n  uint64 id = 2;\n  \n  // Id of the post to which the reaction is associated\n  uint64 post_id = 3;\n  \n  // Value of the reaction.\n  google.proto.Any value = 4;\n  \n  // Author of the reaction\n  string author = 5;\n}\n\n// RegisteredReactionValue contains the details of a reaction value that\n// references a reaction registered within the subspace\nmessage RegisteredReactionValue {\n  // Id of the registered reaction\n  uint32 registered_reaction_id = 1; \n}\n\n// FreeTextValue contains the details of a reaction value that\n// is made of free text\nmessage FreeTextValue {\n  string text = 1;\n}\n')),(0,a.kt)("h3",s({},{id:"registeredreaction"}),"RegisteredReaction"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// RegisteredReaction contains the details of a registered reaction within a subspace\nmessage RegisteredReaction {\n  // Id of the subspace for which this reaction has been registered \n  uint64 subspace_id = 1;\n  \n  // Id of the registered reaction\n  uint32 id = 2;\n  \n  // Unique shorthand code associated to this reaction\n  string shorthand_code = 3;\n  \n  // Value that should be displayed when using this reaction\n  string display_value = 4;\n}\n')),(0,a.kt)("h3",s({},{id:"reactionparams"}),"ReactionParams"),(0,a.kt)("p",null,"In order to allow subspace owners to customize their users experience with reactions, each subspace will be able to set its own reaction params based on its need. "),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// SubspaceReactionsParams contains the params related to a single subspace reactions\nmessage SubspaceReactionsParams {\n  // Id of the subspace for which these params are valid\n  uint64 subspace_id = 1;\n  \n  // Params related to RegisteredReactionValue reactions\n  RegisteredReactionValueParams registered_reaction = 2;\n  \n  // Params related to FreeTextValue reactions\n  FreeTextValueParams free_text = 3;\n}\n\n// FreeTextValueParams contains the params for FreeTextValue based reactions\nmessage FreeTextValueParams {\n  // Whether FreeTextValue reactions should be enabled\n  bool enabled = 1;\n  \n  // The max length that FreeTextValue reactions should have\n  uint64 max_length = 2;\n  \n  // RegEx that each FreeTextValue should respect. \n  // This is useful to limit what characters can be used as a reaction.\n  string reg_ex = 3; \n}\n\n// RegisteredReactionValueParams contains the params for RegisteredReactionValue based reactions\nmessage RegisteredReactionValueParams {\n  // Whether RegisteredReactionValue reactions should be enabled\n  bool enabled = 1;\n}\n')),(0,a.kt)("h3",s({},{id:"the-msg-service"}),"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"Msg")," Service"),(0,a.kt)("p",null,"We will allow the following operations:  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"add a post reaction; "),(0,a.kt)("li",{parentName:"ul"},"remove a post reaction; "),(0,a.kt)("li",{parentName:"ul"},"register a new reaction;"),(0,a.kt)("li",{parentName:"ul"},"remove a registered reaction;"),(0,a.kt)("li",{parentName:"ul"},"set a subspace's reaction params; ")),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// Msg defines the reactions Msg service.\nservice Msg {\n  // AddReaction allows to add a post reaction\n  rpc AddReaction(MsgAddReaction) returns (MsgAddReactionResponse);\n  \n  // RemoveReaction allows to remove an existing post reaction\n  rpc RemoveReaction(MsgRemoveReaction) returns (MsgRemoveReactionResponse);\n  \n  // AddRegisteredReaction allows to registered a new supported reaction\n  rpc AddRegisteredReaction(MsgAddRegisteredReaction) returns (MsgAddRegisteredReactionResponse);\n  \n  // RemoveRegisteredReaction allows to remove an existing supported reaction\n  rpc RemoveRegisteredReaction(MsgRemoveRegisteredReaction) returns (MsgRemoveRegisteredReactionResponse);\n  \n  // SetReactionsParams allows to set the reactions params\n  rpc SetReactionsParams(MsgSetReactionsParams) returns (MsgSetReactionsParamsResponse);\n}\n\n// MsgAddReaction represents the message to be used to add a post reaction\nmessage MsgAddReaction {\n  // Id of the subspace inside which the post to react to is \n  uint64 subspace_id = 1;\n  \n  // Id of the post to react to\n  uint64 post_id = 2;\n  \n  // Value of the reaction\n  google.proto.Any value = 3;\n  \n  // User reacting to the post\n  string user = 4;\n}\n\n// MsgAddReactionResponse represents the Msg/AddReaction response type\nmessage MsgAddReactionResponse {\n  // Id of the newly added reaction\n  uint64 reaction_id = 1;\n}\n\n// MsgRemoveReaction represents the message to be used to remove an \n// existing reaction from a post\nmessage MsgRemoveReaction {\n  // Id of the subspace inside which the reaction to remove is\n  uint64 subspace_id = 1;\n  \n  // Id of the reaction to be removed\n  uint64 reaction_id = 2;\n  \n  // User removing the reaction\n  string user = 3;\n}\n\n// MsgRemoveReactionResponse represents the Msg/RemoveReaction response type\nmessage MsgRemoveReactionResponse {}\n\n// MsgAddRegisteredReaction represents the message to be used to \n// register a new supported reaction\nmessage MsgAddRegisteredReaction {\n  // Id of the subspace inside which this reaction should be registered\n  uint64 subspace_id = 1;\n  \n  // Shorthand code of the reaction\n  string shorthand_code = 2;\n  \n  // Display value of the reaction\n  string display_value = 3;\n  \n  // User adding the supported reaction\n  string user = 4;\n}\n\n// MsgAddRegisteredReactionResponse represents the \n// Msg/AddRegisteredReaction response type\nmessage MsgAddRegisteredReactionResponse {\n  // Id of the newly registered reaction\n  uint32 registered_reaction_id = 1;\n}\n\n// MsgRemoveRegisteredReaction represents the message to be used to\n// remove an existing registered reaction\nmessage MsgRemoveRegisteredReaction {\n  // Id of the subspace from which to remove the registered reaction\n  uint64 subspace_id = 1;\n  \n  // Id of the registered reaction to be removed\n  uint32 registered_reaction_id = 2;\n  \n  // User removing the registered reaction\n  string user = 3;\n}\n\n// MsgRemoveRegisteredReactionResponse represents the \n// Msg/RemoveRegisteredReaction response type\nmessage MsgRemoveRegisteredReactionResponse {}\n\n// MsgSetReactionsParams represents the message to be used when setting \n// a subspace reactions params\nmessage MsgSetReactionsParams {\n  // Id of the subspace for which to set the params\n  uint64 subspace_id = 1;\n\n  // Params related to RegisteredReactionValue reactions\n  RegisteredReactionValueParams registered_reaction = 2;\n\n  // Params related to FreeTextValue reactions\n  FreeTextValueParams free_text = 3;\n}\n\n// MsgSetReactionsParamsResponse represents the Msg/SetReactionsParams response type\nmessage MsgSetReactionsParamsResponse {}\n')),(0,a.kt)("h3",s({},{id:"the-query-service"}),"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"Query")," service"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-protobuf"}),'syntax = "proto3";\n\n// Query defines the gRPC querier service.\nservice Query {\n  // Reactions allows to query the reactions present inside a subspace\n  rpc Reactions(QueryReactionsRequest) returns (QueryReactionsResponse) {\n    option (google.api.http).get = "/desmos/reactions/v1/{subspace_id}/reactions";\n  }\n\n  // RegisteredReactions allows to query the registered reaction of a subspace\n  rpc RegisteredReactions(QueryRegisteredReactionsRequest) returns (QueryRegisteredReactionsResponse) {\n    option (google.api.http).get = "/desmos/reactions/v1/{subspace_id}/registered-reactions";\n  }\n\n  // ReactionsParams allows to query the reaction params of a subspace\n  rpc ReactionsParams(QueryReactionsParamsRequest) returns (QueryReactionsParamsResponse) {\n    option (google.api.http).get = "/desmos/reactions/v1/{subspace_id}/params";\n  }\n}\n\n// QueryReactionsRequest is the request type for the Query/Reactions RPC method\nmessage QueryReactionsRequest {\n  // Id of the subspace to query the reactions for\n  uint64 subspace_id = 1;\n\n  // (optional) Post id to query the reactions for\n  uint64 post_id = 2;\n\n  // pagination defines an optional pagination for the request.\n  optional cosmos.base.query.v1beta1.PageRequest pagination = 3;\n}\n\n// QueryReactionsResponse is the response type for the Query/Reactions RPC method\nmessage QueryReactionsResponse {\n  repeated Reaction reactions = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n\n// QueryRegisteredReactionsRequest is the request type for the Query/RegisteredReactions RPC method\nmessage QueryRegisteredReactionsRequest {\n  // Id of the subspace to query the registered reactions for\n  uint64 subspace_id = 1;\n\n  // pagination defines an optional pagination for the request.\n  optional cosmos.base.query.v1beta1.PageRequest pagination = 3;\n}\n\n// QueryRegisteredReactionsResponse is the response type for the Query/RegisteredReactions RPC method\nmessage QueryRegisteredReactionsResponse {\n  repeated RegisteredReaction registered_reactions = 1;\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n\n// QueryReactionsParamsRequest is the request type for the Query/ReactionsParams RPC method\nmessage QueryReactionsParamsRequest {\n  // Id of the subspace for which to query the params\n  uint64 subspace_id = 1;\n}\n\n// QueryReactionsParamsResponse is the response type for the Query/ReactionsParam RPC method\nmessage QueryReactionsParamsResponse {\n  // Params related to RegisteredReactionValue reactions\n  RegisteredReactionValueParams registered = 1;\n\n  // Params related to FreeTextValue reactions\n  FreeTextValueParams free_text = 2;\n}\n')),(0,a.kt)("h2",s({},{id:"consequences"}),"Consequences"),(0,a.kt)("h3",s({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,a.kt)("p",null,"The changes described inside this ADR are ",(0,a.kt)("strong",{parentName:"p"},"not")," backward compatible. To solve this, we will rely on the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/upgrade")," module in order to properly add these new features inside a running chain. If necessary, to make sure no extra operation is performed, we should make sure that ",(0,a.kt)("inlineCode",{parentName:"p"},"fromVm[reportstypes.ModuleName]")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," before running the migrations, so that the ",(0,a.kt)("inlineCode",{parentName:"p"},"InitGenesis")," method does not get called. At the same time, we should make sure that we set the following for all existing subspaces:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NextReactionID")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),";"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NextRegisteredReactionID")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),";"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ReactionParams")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"DefaultReactionParams"),". ")),(0,a.kt)("h3",s({},{id:"positive"}),"Positive"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allow users to react to posts")),(0,a.kt)("h3",s({},{id:"negative"}),"Negative"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Not known")),(0,a.kt)("h3",s({},{id:"neutral"}),"Neutral"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Not known")),(0,a.kt)("h2",s({},{id:"further-discussions"}),"Further Discussions"),(0,a.kt)("h2",s({},{id:"test-cases"}),"Test Cases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Make sure the migration works and ",(0,a.kt)("inlineCode",{parentName:"li"},"NextReactionID"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"NextRegisteredReactionID")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"ReactionParams")," are properly set for all existing modules.")),(0,a.kt)("h2",s({},{id:"references"}),"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"https://github.com/desmos-labs/desmos/issues/890"}),"Issue #890")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"https://support.discord.com/hc/en-us/articles/360041139231-Adding-Emojis-and-Reactions"}),"Discord reactions"))))}p.isMDXComponent=!0}}]);