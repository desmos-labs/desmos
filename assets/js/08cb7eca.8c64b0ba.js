"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[56039],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?a.createElement(f,s(s({ref:t},p),{},{components:r})):a.createElement(f,s({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3314:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});r(67294);var a=r(3905);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n.apply(this,arguments)}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const s={id:"state",title:"State",sidebar_label:"State",slug:"state"},o="State",l={unversionedId:"developers/modules/reactions/state",id:"version-4.2.0/developers/modules/reactions/state",title:"State",description:"Next Registered Reaction ID",source:"@site/versioned_docs/version-4.2.0/02-developers/02-modules/reactions/03-state.md",sourceDirName:"02-developers/02-modules/reactions",slug:"/developers/modules/reactions/state",permalink:"/4.2.0/developers/modules/reactions/state",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/versioned_docs/version-4.2.0/02-developers/02-modules/reactions/03-state.md",tags:[],version:"4.2.0",sidebarPosition:3,frontMatter:{id:"state",title:"State",sidebar_label:"State",slug:"state"},sidebar:"docs",previous:{title:"Concepts",permalink:"/4.2.0/developers/modules/reactions/concepts"},next:{title:"Messages",permalink:"/4.2.0/developers/modules/reactions/messages"}},c={},p=[{value:"Next Registered Reaction ID",id:"next-registered-reaction-id",level:2},{value:"Registered Reaction",id:"registered-reaction",level:2},{value:"Next Reaction ID",id:"next-reaction-id",level:2},{value:"Reaction",id:"reaction",level:2},{value:"Reactions Subspace Params",id:"reactions-subspace-params",level:2}],u={toc:p};function d(e){var{components:t}=e,r=i(e,["components"]);return(0,a.kt)("wrapper",n({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",n({},{id:"state"}),"State"),(0,a.kt)("h2",n({},{id:"next-registered-reaction-id"}),"Next Registered Reaction ID"),(0,a.kt)("p",null,"The next registered reaction id is stored using the associated subspace id as the key:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0x01 | Subspace ID | -> bytes(NextRegisteredReactionID)"))),(0,a.kt)("h2",n({},{id:"registered-reaction"}),"Registered Reaction"),(0,a.kt)("p",null,"A registered reaction is stored using the associated subspace id and its id as the key. This allows to easily\nquery:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"all the registered reactions of a subspace;")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"a specific registered reaction.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"0x02 | Subspace ID | Reaction ID | -> ProtocolBuffer(RegisteredReaction)")))),(0,a.kt)("h2",n({},{id:"next-reaction-id"}),"Next Reaction ID"),(0,a.kt)("p",null,"The next reaction id is stored using the associated subspace id as the key:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0x10 | Subspace ID | -> bytes(NextReactionID)"))),(0,a.kt)("h2",n({},{id:"reaction"}),"Reaction"),(0,a.kt)("p",null,"A post reaction is stored using the subspace id, the associated post id and its id combined as the key. This allows to easily query:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"all the reactions of a subspace;")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"all the reactions of a post;")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"a specific post's reaction.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"0x11 | Subspace ID | Post ID | Reaction ID | -> ProtocolBuffer(Reaction)")))),(0,a.kt)("h2",n({},{id:"reactions-subspace-params"}),"Reactions Subspace Params"),(0,a.kt)("p",null,"The reactions' subspace params are stored using the associated subspace id as the key:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0x20 | Subspace ID | -> ProtocolBuffer(SubspaceReactionsParams)"))))}d.isMDXComponent=!0}}]);