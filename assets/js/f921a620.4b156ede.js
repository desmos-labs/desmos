"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[24769],{3905:(e,s,t)=>{t.d(s,{Zo:()=>p,kt:()=>d});var n=t(67294);function r(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function i(e,s){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);s&&(n=n.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{};s%2?i(Object(t),!0).forEach((function(s){r(e,s,t[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s))}))}return e}function o(e,s){if(null==e)return{};var t,n,r=function(e,s){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],s.indexOf(t)>=0||(r[t]=e[t]);return r}(e,s);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),u=function(e){var s=n.useContext(l),t=s;return e&&(t="function"==typeof e?e(s):a(a({},s),e)),t},p=function(e){var s=u(e.components);return n.createElement(l.Provider,{value:s},e.children)},c={inlineCode:"code",wrapper:function(e){var s=e.children;return n.createElement(n.Fragment,{},s)}},m=n.forwardRef((function(e,s){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=r,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return t?n.createElement(g,a(a({ref:s},p),{},{components:t})):n.createElement(g,a({ref:s},p))}));function d(e,s){var t=arguments,r=s&&s.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var o={};for(var l in s)hasOwnProperty.call(s,l)&&(o[l]=s[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var u=2;u<i;u++)a[u]=t[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81383:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});t(67294);var n=t(3905);function r(){return r=Object.assign||function(e){for(var s=1;s<arguments.length;s++){var t=arguments[s];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},r.apply(this,arguments)}function i(e,s){if(null==e)return{};var t,n,r=function(e,s){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],s.indexOf(t)>=0||(r[t]=e[t]);return r}(e,s);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const a={},o="ADR 006: Subspace module",l={unversionedId:"architecture/adr-006-subspace-module",id:"architecture/adr-006-subspace-module",title:"ADR 006: Subspace module",description:"Changelog",source:"@site/docs/architecture/adr-006-subspace-module.md",sourceDirName:"architecture",slug:"/architecture/adr-006-subspace-module",permalink:"/architecture/adr-006-subspace-module",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-006-subspace-module.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 006: Support multisig chain link",permalink:"/architecture/adr-005-support-multisig-chain-link"},next:{title:"ADR 007: Address generation of chain link proof",permalink:"/architecture/adr-007-address-generation-of-chain-link-proof"}},u={},p=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Types",id:"types",level:3},{value:"Subspace",id:"subspace",level:4},{value:"Permissions",id:"permissions",level:4},{value:"Permission value",id:"permission-value",level:5},{value:"User groups",id:"user-groups",level:5},{value:"<code>Msg</code> Service",id:"msg-service",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],c={toc:p};function m(e){var{components:s}=e,t=i(e,["components"]);return(0,n.kt)("wrapper",r({},c,t,{components:s,mdxType:"MDXLayout"}),(0,n.kt)("h1",r({},{id:"adr-006-subspace-module"}),"ADR 006: Subspace module"),(0,n.kt)("h2",r({},{id:"changelog"}),"Changelog"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"December 15th, 2021: Initial draft;"),(0,n.kt)("li",{parentName:"ul"},"December 16th, 2021: First review;"),(0,n.kt)("li",{parentName:"ul"},"January 06th, 2022: Second review;"),(0,n.kt)("li",{parentName:"ul"},"January 13th, 2022: Third review;"),(0,n.kt)("li",{parentName:"ul"},"January 14th, 2022: Fourth review;"),(0,n.kt)("li",{parentName:"ul"},"January 17th, 2022: Fifth review;"),(0,n.kt)("li",{parentName:"ul"},"February 10th, 2022: Sixth review.")),(0,n.kt)("h2",r({},{id:"status"}),"Status"),(0,n.kt)("p",null,"ACCEPTED Implemented"),(0,n.kt)("h2",r({},{id:"abstract"}),"Abstract"),(0,n.kt)("p",null,"This ADR defines the ",(0,n.kt)("inlineCode",{parentName:"p"},"x/subspaces")," module which allows users to create and manage the representation of different social networks inside which contents will be created.  "),(0,n.kt)("h2",r({},{id:"context"}),"Context"),(0,n.kt)("p",null,"In order to support building independent social networks, it is vital for Desmos to expose a mechanism that allows to replicate as much as possible the current stace of social networks in which each platform has different economic model, set of administrators, Terms of Services and ways of enforcing such terms.  "),(0,n.kt)("h2",r({},{id:"decision"}),"Decision"),(0,n.kt)("p",null,"We will create a module named ",(0,n.kt)("inlineCode",{parentName:"p"},"subspaces")," which provided users the ability to create independent spaces inside Desmos, each one having its own administrators, ToS and tokenomics."),(0,n.kt)("h3",r({},{id:"types"}),"Types"),(0,n.kt)("p",null,"Subspaces must always have an account that is elected as the ",(0,n.kt)("em",{parentName:"p"},"owner")," and should act as the final decision maker and accountable user. Additionally, each subspace can have the following data:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a ",(0,n.kt)("em",{parentName:"li"},"human-readable name")," and a ",(0,n.kt)("em",{parentName:"li"},"description"),", in order to allow users to easily identify the scope of such subspace;"),(0,n.kt)("li",{parentName:"ul"},"a set of ",(0,n.kt)("em",{parentName:"li"},"connections")," with external applications, allowing users to verify the validity of such subspace and avoid any possible fakes;"),(0,n.kt)("li",{parentName:"ul"},"an ",(0,n.kt)("em",{parentName:"li"},"ACL")," (access-control list) defining the permissions that different kind of users have inside the subspace itself (e.g. administrators, moderators, etc.).")),(0,n.kt)("h4",r({},{id:"subspace"}),"Subspace"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-go"}),"// Subspace contains all the data related to a Desmos subspace\ntype Subspace struct {\n  // Unique identifier of this subspace\n  ID uint64\n\n  // Human-readable name of the subspace\n  Name string\n  \n  // Optional description of this subspace\n  Description string\n  \n  // Address of the user that owns the subspace\n  Owner  string\n\n  // Address of the subspace creator\n  Creator string\n  \n  // Represents the account that is associated with the subspace and\n  // should be used to connect external applications to verify this subspace\n  Treasury string\n\n  // the creation time of the subspace\n  CreationTime time.Time\n}\n")),(0,n.kt)("h4",r({},{id:"permissions"}),"Permissions"),(0,n.kt)("p",null,"Since each subspace is thought to represent an independent application, we SHOULD allow different subspaces owners to set different permissions for each user. "),(0,n.kt)("p",null,"For this reason, we will implement an ACL (",(0,n.kt)("em",{parentName:"p"},"Access Control List"),") system that can be customized for each subspace. Each ACL MUST support setting permissions for both individual users and user groups."),(0,n.kt)("h5",r({},{id:"permission-value"}),"Permission value"),(0,n.kt)("p",null,"To easily implement a composable system, we will use byte-based permissions: each value will be represented by an integer value, and composed permissions can be obtained by using the byte-wide ",(0,n.kt)("em",{parentName:"p"},"or")," (",(0,n.kt)("inlineCode",{parentName:"p"},"|"),") operator. Also, this will allow us to easily check whether a user has a specific permission by using the byte-wide ",(0,n.kt)("em",{parentName:"p"},"and")," (",(0,n.kt)("inlineCode",{parentName:"p"},"&"),") operator."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-go"}),"const (\n    // PermissionNothing represents the permission to do nothing\n    PermissionNothing = Permission(0b000000)\n    \n    // PermissionWrite identifies users that can create content inside the subspace\n    PermissionWrite = Permission(0b000001)\n    \n    // PermissionModerateContent allows users to moderate contents of other users (e.g. deleting it)\n    PermissionModerateContent = Permission(0b000010)\n    \n    // PermissionChangeInfo allows to change the information of the subspace\n    PermissionChangeInfo = Permission(0b000100)\n    \n    // PermissionManageGroups allows users to manage user groups and members\n    PermissionManageGroups = Permission(0b001000)\n    \n    // PermissionSetPermissions allows users to set other users' permissions (except PermissionSetPermissions).\n    // This includes managing user groups and the associated permissions\n    PermissionSetPermissions = Permission(0b010000)\n    \n    // PermissionDeleteSubspace allows users to delete the subspace.\n    PermissionDeleteSubspace = Permission(0b100000)\n    \n    // PermissionEverything allows to do everything.\n    // This should usually be reserved only to the owner (which has it by default)\n    PermissionEverything = Permission(0b111111)\n)\n\nuserPermissions := PermissionWrite | PermissionManageGroups | PermissionChangeInfo\n\ncanWrite := (userPermissions & PermissionWrite) == PermissionWrite  // True\ncanModerateContent := (userPermissions & PermissionModerateContent) == PermissionModerateContent // False\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Note"),":",(0,n.kt)("br",{parentName:"p"}),"\n","Only the ",(0,n.kt)("inlineCode",{parentName:"p"},"Owner")," account will be able to grant other users the ",(0,n.kt)("inlineCode",{parentName:"p"},"PermissionSetPermissions"))),(0,n.kt)("h5",r({},{id:"user-groups"}),"User groups"),(0,n.kt)("p",null,"In order to properly implement user groups, we are going to define the following structure: "),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-golang"}),"type UserGroup struct {\n    // SubspaceID represents the ID of the subspace inside which the group exists\n    SubspaceID  uint64\n    // Unique id that identifies the group inside the subspace\n    ID          uint32\n    // Human-readable name of the user group\n    Name        string\n    // Optional description of the group\n    Description string\n    // Permissions that will be granted to all the users inside this group\n    Permissions uint32\n}\n\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"ID")," of each group will be a sequential value starting from ",(0,n.kt)("inlineCode",{parentName:"p"},"1")," for each subspace."),(0,n.kt)("p",null,"The user group with ID ",(0,n.kt)("inlineCode",{parentName:"p"},"0")," will be used to identify a default user group that contains all users that are not part of any other group. This will be useful if a subspace owner wants to assign a default permission to all users (e.g. they want all users to be able to post inside that subspace by default making that subspace not require a specific registration). This group will be present by default on all subspaces, and it will only be possible to edit its permissions or details. It won't be possible to delete it nor to remove or add people to it."),(0,n.kt)("p",null,"To store a group and its members, we will use the following key: "),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{}),"GroupPrefix + SubspaceID + GroupID -> Group\n")),(0,n.kt)("p",null,"This will allow us to easily iterate over all the groups inside a subspace."),(0,n.kt)("p",null,"At the same time, to store each member of a group we will use the following store keys:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{}),"GroupMemberPrefix + SubspaceID + GroupID + <User address> -> 0x01\n")),(0,n.kt)("p",null,"In this case, the ",(0,n.kt)("inlineCode",{parentName:"p"},"0x01")," value is just a placeholder that allows the key to exist. This key will allow us to easily iterate over all the members of a subspace, as well as to check whether a user is part of a group or not. "),(0,n.kt)("h3",r({},{id:"msg-service"}),(0,n.kt)("inlineCode",{parentName:"h3"},"Msg")," Service"),(0,n.kt)("p",null,"We will allow the following operations to be performed."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Subspace administration")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create a subspace"),(0,n.kt)("li",{parentName:"ul"},"Edit a subspace"),(0,n.kt)("li",{parentName:"ul"},"Set a group's permissions"),(0,n.kt)("li",{parentName:"ul"},"Delete a subspace")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Content management")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Delete contents that do not respect the ToS")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Groups management")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create a new group"),(0,n.kt)("li",{parentName:"ul"},"Edit a group"),(0,n.kt)("li",{parentName:"ul"},"Set group permissions"),(0,n.kt)("li",{parentName:"ul"},"Delete a group")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Users management")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Add a user to a group"),(0,n.kt)("li",{parentName:"ul"},"Remove a user from a group"),(0,n.kt)("li",{parentName:"ul"},"Set user permissions")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-protobuf"}),"// Msg defines subspaces Msg service.\nservice Msg {\n\n  // CreateSubspace allows to create a subspace\n  rpc CreateSubspace(MsgCreateSubspace) returns (MsgCreateSubspaceResponse);\n\n  // EditSubspace allows to edit a subspace\n  rpc EditSubspace(MsgEditSubspace) returns (MsgEditSubspaceResponse);\n  \n  // CreateUserGroup allows to create a new user group\n  rpc CreateUserGroup(MsgCreateUserGroup) returns (MsgCreateUserGroupResponse);\n\n  // EditUserGroup allows to edit a user group\n  rpc EditUserGroup(MsgEditUserGroup) returns (MsgEditUserGroupResponse);\n\n  // SetUserGroupPermissions allows to set the permissions for a specific group\n  rpc SetUserGroupPermissions(MsgSetUserGroupPermissions)\n      returns (MsgSetUserGroupPermissionsResponse);\n\n  // DeleteUserGroup allows to delete an existing user group\n  rpc DeleteUserGroup(MsgDeleteUserGroup) returns (MsgDeleteUserGroupResponse);\n  \n  // AddUserToUserGroup allows to add a specific user to a specific user group\n  rpc AddUserToUserGroup(MsgAddUserToUserGroup) returns (MsgAddUserToUserGroupResponse);\n\n  // RemoveUserFromUserGroup allows to remove a specific user from a specific user group\n  rpc RemoveUserFromUserGroup(MsgRemoveUserFromUserGroup) returns (MsgRemoveUserFromUserGroupResponse); \n  \n  // SetPermissions allows to set the permissions of a user or user group\n  rpc SetUserPermissions(MsgSetUserPermissions) returns (MsgSetUserPermissionsResponse);\n}\n\nmessage MsgCreateSubspace {\n  string name = 1;\n  string description = 2;\n  string treasury = 3;\n  string owner = 4;\n  string creator = 5;\n}\n\nmessage MsgCreateSubspaceResponse {\n  uint64 subspace_id = 1;\n}\n\nmessage MsgEditSubspace {\n  uint64 subspace_id = 1;\n  string name = 2;\n  string description = 3;\n  string treasury = 4;\n  string owner = 5;\n  string signer = 6;\n}\n\nmessage MsgEditSubspaceResponse {}\n\nmessage MsgDeleteSubspace {\n  uint64 subspace_id = 1;\n  string signer = 2;\n}\n\nmessage MsgDeleteSubspaceResponse {}\n\nmessage MsgCreateUserGroup {\n  uint64 subspace_id = 1;\n  string name = 2;\n  string description = 3;\n  bytes default_permissions = 4;\n  string creator = 5;\n}\n\nmessage MsgCreateUserGroupResponse {\n  uint32 group_id = 1;\n}\n\nmessage MsgEditUserGroup {\n  uint64 subspace_id = 1;\n  uint32 group_id = 2;\n  string name = 3;\n  string description = 4;\n  string signer = 5;\n}\n\nmessage MsgEditUserGroupResponse {}\n\nmessage MsgSetUserGroupPermissions {\n  uint64 subspace_id = 1;\n  uint32 group_id = 2;\n  uint32 permissions = 3;\n  string signer = 4;\n}\n\nmessage MsgSetUserGroupPermissionsResponse {}\n\nmessage MsgDeleteUserGroup {\n  uint64 subspace_id = 1;\n  uint32 group_id = 2;\n  string signer = 3;\n}\n\nmessage MsgDeleteUserGroupResponse {}\n\nmessage MsgAddUserToUserGroup { \n  uint64 subspace_id = 1;\n  uint32 group_id = 2;\n  string user = 3;\n  string signer = 4;\n}\n\nmessage MsgAddUserToUserGroupResponse {}\n\nmessage MsgRemoveUserFromUserGroup {\n  uint64 subspace_id = 1;\n  uint32 group_id = 2;\n  string user = 3; \n  string signer = 4;\n}\n\nmessage MsgRemoveUserFromUserGroupResponse {}\n\nmessage MsgSetUserPermissions {\n  uint64 subspace_id = 1;\n  string user = 2;\n  bytes permissions = 3;\n  string signer = 4;\n}\n\nmessage MsgSetUserPermissionsResponse {}\n")),(0,n.kt)("h2",r({},{id:"consequences"}),"Consequences"),(0,n.kt)("h3",r({},{id:"positive"}),"Positive"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Users will be able to create their own subspace representing a social network inside Desmos"),(0,n.kt)("li",{parentName:"ul"},"The ACL implementation proposed is generic enough to allow future permissions to be implemented without much work to be done"),(0,n.kt)("li",{parentName:"ul"},"The link-based verification system proposed is generic enough to allow any creator to verify their subspace relying on the already existing ",(0,n.kt)("inlineCode",{parentName:"li"},"x/profiles")," module without the need of new code ")),(0,n.kt)("h3",r({},{id:"negative"}),"Negative"),(0,n.kt)("h3",r({},{id:"neutral"}),"Neutral"),(0,n.kt)("h2",r({},{id:"references"}),"References"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Extend the concept of subspaces: ",(0,n.kt)("a",r({parentName:"li"},{href:"https://github.com/desmos-labs/desmos/discussions/375"}),"https://github.com/desmos-labs/desmos/discussions/375"))))}m.isMDXComponent=!0}}]);