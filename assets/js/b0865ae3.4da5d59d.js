"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[17569],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var s=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},o=Object.keys(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=s.createContext({}),p=function(e){var t=s.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},f=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=p(r),h=n,d=f["".concat(l,".").concat(h)]||f[h]||u[h]||o;return r?s.createElement(d,a(a({ref:t},c),{},{components:r})):s.createElement(d,a({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var p=2;p<o;p++)a[p]=r[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,r)}f.displayName="MDXCreateElement"},92555:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>c});r(67294);var s=r(3905);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},n.apply(this,arguments)}function o(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},o=Object.keys(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const a={},i="ADR 020: Post ownership transfer",l={unversionedId:"architecture/adr-020-post-ownership-change",id:"architecture/adr-020-post-ownership-change",title:"ADR 020: Post ownership transfer",description:"Changelog",source:"@site/docs/architecture/adr-020-post-ownership-change.md",sourceDirName:"architecture",slug:"/architecture/adr-020-post-ownership-change",permalink:"/architecture/adr-020-post-ownership-change",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-020-post-ownership-change.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 019: Subspace post migration",permalink:"/architecture/adr-019-subspace-post-moving"},next:{title:"ADR 021: Subspace specific custom fee tokens",permalink:"/architecture/adr-021-subspace-specific-custom-fee-tokens"}},p={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Type",id:"type",level:3},{value:"Store",id:"store",level:3},{value:"PostOwnerTransferRequest",id:"postownertransferrequest",level:4},{value:"<code>Msg</code> Service",id:"msg-service",level:3},{value:"<code>Query</code> service",id:"query-service",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],u={toc:c};function f(e){var{components:t}=e,r=o(e,["components"]);return(0,s.kt)("wrapper",n({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",n({},{id:"adr-020-post-ownership-transfer"}),"ADR 020: Post ownership transfer"),(0,s.kt)("h2",n({},{id:"changelog"}),"Changelog"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"April 21th, 2023: First draft;"),(0,s.kt)("li",{parentName:"ul"},"April 26th, 2023: First review;")),(0,s.kt)("h2",n({},{id:"status"}),"Status"),(0,s.kt)("p",null,"Accepted Not Implemented"),(0,s.kt)("h2",n({},{id:"abstract"}),"Abstract"),(0,s.kt)("p",null,"This ADR introduces a new feature that enables users to transfer post ownership to another person."),(0,s.kt)("h2",n({},{id:"context"}),"Context"),(0,s.kt)("p",null,"Desmos is a social network protocol that allows users to create, share, and engage with content on a decentralized platform. As of now, Desmos does not provide a feature that allows users to transfer the ownership of their posts to other users. This has caused inconvenience for users who wish to transfer ownership of their posts, as they have to create new posts and lose the engagement history and feedback of the original post. Therefore, the introduction of the new feature that enables users to transfer post ownership to another person aims to address this issue and provide users with more control over their content. The proposed feature is expected to improve user experience and enhance the functionality of the Desmos protocol."),(0,s.kt)("h2",n({},{id:"decision"}),"Decision"),(0,s.kt)("p",null,"We will enhance the ",(0,s.kt)("inlineCode",{parentName:"p"},"Post")," structure by adding an ",(0,s.kt)("strong",{parentName:"p"},"owner")," field and implementing post ownership transfer functionality. It's important to consider potential issues that could arise from simple transfer functionality, such as someone receiving spam messages that could harm their reputation. For instance, scammers may transfer scam messages to victims, leading to reputational damage. To address this, the implemented functionality will include the following features:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Initiating Transfer"),": The sender will be able to initiate a request to transfer post ownership to the receiver."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Accepting or Refusing Transfer"),": The receiver will have the option to accept or refuse the transfer request from the sender."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Canceling Transfer Request"),": In case the receiver has not yet addressed the transfer request, the sender will be able to cancel it.")),(0,s.kt)("h3",n({},{id:"type"}),"Type"),(0,s.kt)("p",null,"The upcoming changes of ",(0,s.kt)("inlineCode",{parentName:"p"},"Post")," is as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",n({parentName:"pre"},{className:"language-proto"}),"message Post {\n  uint64 subspace_id = 1;\n  uint32 section_id = 2;\n  \n  ...skip\n\n  google.protobuf.Timestamp last_edited_date = 13;\n  \n  // Owner of the post\n  string owner = 14;\n}\n\nIn order to handle the post owner transfer process easily, we will define a new structure as follows:\n\n// PostOwnerTransferRequest represents a request to transfer the ownership of a post from the sender to the receiver\nmessage PostOwnerTransferRequest {\n\n  // Id of the subspace that holds the post to transfer\n  uint64 subspace_id = 1;\n  \n  // Id of the post which will be transferred\n  uint32 post_id = 2;\n\n  // Address of the sender\n  string sender = 3;\n\n  // Address of the receiver\n  string receiver = 4;\n}\n")),(0,s.kt)("h3",n({},{id:"store"}),"Store"),(0,s.kt)("h4",n({},{id:"postownertransferrequest"}),"PostOwnerTransferRequest"),(0,s.kt)("p",null,"To simplify the management of post owner transfer requests, we will store each request using the following key format:"),(0,s.kt)("pre",null,(0,s.kt)("code",n({parentName:"pre"},{}),"PostOwnerTransferRequestPrefix | SubspaceID | PostID | -> Protobuf(PostOwnerTransferRequest)\n")),(0,s.kt)("p",null,"This structure enables Desmos to easily manage requests by iterating over all requests with a given subspace ID and post ID when a post is moved or deleted."),(0,s.kt)("h3",n({},{id:"msg-service"}),(0,s.kt)("inlineCode",{parentName:"h3"},"Msg")," Service"),(0,s.kt)("p",null,"  To ensure the safe handling of post owner transfer requests, we will have the following operations:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"request a post owner transfer to a receiver"),(0,s.kt)("li",{parentName:"ol"},"cancel a post owner transfer request"),(0,s.kt)("li",{parentName:"ol"},"accept a post owner transfer request"),(0,s.kt)("li",{parentName:"ol"},"refuse a post owner transfer request")),(0,s.kt)("pre",null,(0,s.kt)("code",n({parentName:"pre"},{className:"language-proto"}),"service Msg {\n  // RequestPostOwnerTransfer allows sender to send a request to transfer a post ownership to receiver\n  rpc RequestPostOwnerTransfer(MsgRequestPostOwnerTransfer) returns (MsgRequestPostOwnerTransferResponse);\n\n  // CancelPostOwnerTransfer allows sender to cancel an outgoing post owner transfer request\n  rpc CancelPostOwnerTransfer(MsgCancelPostOwnerTransfer) returns (MsgCancelPostOwnerTransferResponse);\n\n  // AcceptPostOwnerTransfer allows receiver to accept an incoming post transfer request\n  rpc AcceptPostOwnerTransfer(MsgAcceptPostOwnerTransfer) returns (MsgAcceptPostOwnerTransferResponse);\n\n  // RefusePostOwnerTransfer allows receiver to refuse an incoming post transfer request\n  rpc RefusePostOwnerTransfer(MsgRefusePostOwnerTransfer) returns (MsgRefusePostOwnerTransferResponse);\n}\n\n// MsgRequestPostOwnerTransfer represent a message used to transfer a post ownership to receiver\nmessage MsgRequestPostOwnerTransfer {\n  // Id of the subspace that holds the post which ownership should be transfered\n  uint64 subspace_id = 1;\n    \n  // Id of the post which will be transferred\n  uint64 post_id = 2;\n\n  // Address of the post ownership receiver\n  string receiver = 3;\n    \n  // Address of the sender who is creating a transfer request\n  string sender = 4;\n}\n// MsgRequestPostOwnerTransferResponse defines the Msg/RequestPostOwnerTransfer response type\nmessage MsgRequestPostOwnerTransferResponse {}\n\n// MsgCancelPostOwnerTransfer represents a message used to cancel a outgoing post transfer request\nmessage MsgCancelPostOwnerTransfer {\n  // Id of the subspace that holds the post for which the request should be canceled\n  uint64 subspace_id = 1;\n    \n  // Id of the post for which the request will be cancelled\n  uint64 post_id = 2;\n\n  // Address of the transfer request sender\n  string sender = 3;\n}\n// MsgCancelPostOwnerTransferResponse defines the Msg/CancelPostOwnerTransfer response type\nmessage MsgRequestPostOwnerTransferResponse {}\n\n// MsgAcceptPostOwnerTransfer represents a message used to accept a incoming post transfer request\nmessage MsgAcceptPostOwnerTransfer {\n  // Id of the subspace holding the post for which the request will be accepted\n  uint64 subspace_id = 1;\n    \n  // Id of the post for which the request will be accepted\n  uint64 post_id = 2;\n\n  // Address of the request receiver\n  string receiver = 3;\n}\n\n// MsgAcceptPostOwnerTransferResponse defines the Msg/AcceptPostOwnerTransfer response type\nmessage MsgAcceptPostOwnerTransferResponse {}\n\n// MsgRefusePostOwnerTransfer represents a message used to refuse a incoming post transfer request\nmessage MsgRefusePostOwnerTransfer {\n  // Id of the subspace holding the post for which the request will be refused\n  uint64 subspace_id = 1;\n    \n  // Id of the post for which the request will be refused\n  uint64 post_id = 2;\n\n  // Address of the request receiver\n  string receiver = 3;\n}\n\n// MsgRefusePostOwnerTransfer defines the Msg/RefusePostOwnerTransfer response type\nmessage MsgRefusePostOwnerTransferResponse {}\n")),(0,s.kt)("h3",n({},{id:"query-service"}),(0,s.kt)("inlineCode",{parentName:"h3"},"Query")," service"),(0,s.kt)("p",null,"We will also implement a query service that enables the user to manage the incoming post owner requests by the following queries."),(0,s.kt)("pre",null,(0,s.kt)("code",n({parentName:"pre"},{className:"language-proto"}),'service Query {\n  // IncomingPostOwnerTransferRequests queries all the post owner transfers requests that\n  // have been made towards the receiver with the given address\n  rpc IncomingPostOwnerTransferRequests(QueryIncomingPostOwnerTransferRequestsRequest) returns (QueryIncomingPostOwnerTransferRequestResponse) {\n    option (google.api.http).get = "/desmos/posts/v4/subspaces/{subspace_id}/post-owner-transfer-requests";\n  }\n}\n\n// QueryIncomingPostOwnerTransferRequestsRequest is the request type for the\n// Query/IncomingPostOwnerTransferRequests RPC endpoint\nmessage QueryIncomingPostOwnerTransferRequestsRequest {\n  option (gogoproto.equal) = false;\n  option (gogoproto.goproto_getters) = false;\n\n  // (optional) Receiver represents the address of the user to which query the\n  // incoming requests for\n  string receiver = 1;\n\n  // Pagination defines an optional pagination for the request\n  cosmos.base.query.v1beta1.PageRequest pagination = 2;\n}\n\n// QueryIncomingPostOwnerTransferRequestsResponse is the response type for the\n// Query/IncomingPostOwnerTransferRequests RPC method.\nmessage QueryIncomingPostOwnerTransferRequestsResponse {\n  // Requests represent the list of all the post owner transfer requests made towards\n  // the receiver\n  repeated desmos.posts.v4.PostOwnerTransferRequest requests = 1\n      [ (gogoproto.nullable) = false ];\n\n  // Pagination defines the pagination response\n  cosmos.base.query.v1beta1.PageResponse pagination = 2;\n}\n')),(0,s.kt)("h2",n({},{id:"consequences"}),"Consequences"),(0,s.kt)("h3",n({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,s.kt)("p",null,"The solution outlined above is fully backwards compatible since it introduces a new ",(0,s.kt)("strong",{parentName:"p"},"owner")," field for post, but it will require a migration script to update all existing posts. This script will handle the following tasks:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"migrate all posts to set a new ",(0,s.kt)("strong",{parentName:"li"},"owner")," field to its ",(0,s.kt)("strong",{parentName:"li"},"author"),".")),(0,s.kt)("h3",n({},{id:"positive"}),"Positive"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Enable users to transfer the ownership of a post to another user")),(0,s.kt)("h3",n({},{id:"negative"}),"Negative"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Storing extra post transfer requests info takes up more storage space")),(0,s.kt)("h3",n({},{id:"neutral"}),"Neutral"),(0,s.kt)("p",null,"(none known)"),(0,s.kt)("h2",n({},{id:"references"}),"References"))}f.isMDXComponent=!0}}]);