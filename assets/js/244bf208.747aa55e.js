"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[58024],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?i.createElement(h,s(s({ref:t},c),{},{components:n})):i.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var d=2;d<o;d++)s[d]=n[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},19007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});n(67294);var i=n(3905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},r.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={},a="ADR 024: Decentralized Identifiers resolver",l={unversionedId:"architecture/adr-024-decentralized-identifiers-resolver",id:"architecture/adr-024-decentralized-identifiers-resolver",title:"ADR 024: Decentralized Identifiers resolver",description:"Changelog",source:"@site/docs/architecture/adr-024-decentralized-identifiers-resolver.md",sourceDirName:"architecture",slug:"/architecture/adr-024-decentralized-identifiers-resolver",permalink:"/architecture/adr-024-decentralized-identifiers-resolver",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-024-decentralized-identifiers-resolver.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 023: Subspace relationships export",permalink:"/architecture/adr-023-subspace-relationships-export"}},d={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"<code>Query</code> service",id:"query-service",level:3},{value:"Limitation",id:"limitation",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Further Discussions",id:"further-discussions",level:2},{value:"References",id:"references",level:2}],u={toc:c};function p(e){var{components:t}=e,n=o(e,["components"]);return(0,i.kt)("wrapper",r({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",r({},{id:"adr-024-decentralized-identifiers-resolver"}),"ADR 024: Decentralized Identifiers resolver"),(0,i.kt)("h2",r({},{id:"changelog"}),"Changelog"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jan 16th, 2024: First draft;"),(0,i.kt)("li",{parentName:"ul"},"Jan 23th, 2024: First review;")),(0,i.kt)("h2",r({},{id:"status"}),"Status"),(0,i.kt)("p",null,"ACCEPTED Not Implemented"),(0,i.kt)("h2",r({},{id:"abstract"}),"Abstract"),(0,i.kt)("p",null,"This ADR proposes the integration of a new functionality into Desmos to resolve Desmos Profiles into DID documents, incorporating Decentralized Identifiers (DIDs) for enhanced digital identity verification."),(0,i.kt)("h2",r({},{id:"context"}),"Context"),(0,i.kt)("p",null,"Decentralized identifiers (DIDs) are a new type of identifier that enables verifiable, decentralized digital identity. Via verifiable credential, DID enables individuals to assert control over their personal information, aligning with principles of privacy, and user empowerment. Furthermore, as DIDs emerge as a universal standard, they are poised to play a pivotal role in identity authentication across various applications. Desmos serves as a decentralized social platform infrastructure, DID would contribute to an improved user experience in identity management."),(0,i.kt)("h2",r({},{id:"decision"}),"Decision"),(0,i.kt)("p",null,"We will implement a query method ",(0,i.kt)("inlineCode",{parentName:"p"},"DidDoc")," within the Desmos Profiles module to resolve Desmos Profiles into DID documents. In addition, A DID that uses this method MUST begin with the following prefix: ",(0,i.kt)("inlineCode",{parentName:"p"},"did:desmos"),"."),(0,i.kt)("p",null,"The example of the resolver's response would be like as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",r({parentName:"pre"},{className:"language-json"}),'{\n    "context": [\n        "https://www.w3.org/ns/did/v1",\n        "https://w3id.org/security/suites/secp256k1-2019/v1"\n    ],\n    "id": "did:desmos:<desmos-address>",\n    "alsoKnownAs": [\n        "dtag:<DTag>", /* Desmos Dtag */\n        "application:<application-name>:<id-in-application>", /* application link */\n        "blockchain:<chain-name>:<chain-address>", /* chain link */\n    ],\n    "verificationMethod": [\n        {\n            "id": "did:desmos:<desmos-address>#DESMOS-KEY-1",\n            "type": "EcdsaSecp256k1VerificationKey2019",\n            "publicKeyMultibase": "<multibase-encoded-public-key>"\n        }\n    ],\n    "authentication": [\n        "did:desmos:<desmos-address>#DESMOS-KEY-1"\n    ],\n    "assertionMethod": [\n        "did:desmos:<desmos-address>#DESMOS-KEY-1"\n    ],\n}\n')),(0,i.kt)("h3",r({},{id:"query-service"}),(0,i.kt)("inlineCode",{parentName:"h3"},"Query")," service"),(0,i.kt)("pre",null,(0,i.kt)("code",r({parentName:"pre"},{className:"language-protobuf"}),'service Query{\n    // DidDoc queries for a single DID document. \n    rpc DidDoc(QueryDidDocRequest) returns(QueryDidDocResponse) {\n        option (google.http.get) = "/desmos/profiles/v3/did/{id}";\n    };\n}\n\n// QueryDidDocRequest is the request type for the Query/DidDoc RPC method\nmessage QueryDidDocRequest {\n    string id = 1;\n}\n\n// QueryDidDocResponse is the response type for the Query/DidDoc RPC method\nmessage QueryDidDocResponse {\n    // URIs used to identify the context of DID document.\n    // Default: ["https://www.w3.org/ns/did/v1", "https://w3id.org/security/suites/secp256k1-2019/v1"]\n    repeated string context = 1;\n\n    // The unique identifier in DID syntax of DID document.\n    // Example: did:desmos:<desmos-address> \n    string id = 2;\n    \n    // The assertion that resources refer to the DID.\n    // In Desmos, it shows chain links and application links linked to profile.\n    // Documentation: https://www.w3.org/TR/did-core/#also-known-as\n    string also_known_as = 3;\n\n    // Keys of verification methods for verifying digital signature.\n    // In Desmos, it must be the public key(s) that associated to the profile owner.\n    repeated VerificationMethod verification_methods = 4;\n\n    // Id of keys for authentication within verification methods.\n    // Documentation: https://www.w3.org/TR/did-core/#authentication\n    repeated string authentication = 5;\n\n    // Id of keys for assertion method within verification methods.\n    // Documentation: https://www.w3.org/TR/did-core/#assertion\n    repeated string assertion_method = 6;\n}\n\n// VerificationMethod represents the cryptographic public keys, which can be used to authenticate interaction.\n// Documentation: https://www.w3.org/TR/did-core/#verification-methods\nmessage VerificationMethod {\n    // Unique identifier in DID URL syntax.\n    // Example: did:desmos:<desmos-address>#DESMOS-KEY-1\n    string id = 1;\n\n    // Type of the verification method.\n    // Example: "EcdsaSecp256k1VerificationKey2019"\n    string type = 2;\n    \n    // Hex-encoded of the public key in the multibase format.\n    // Documentation: https://w3c-ccg.github.io/multibase\n    string public_key_multibase = 3;\n}\n')),(0,i.kt)("h3",r({},{id:"limitation"}),"Limitation"),(0,i.kt)("p",null,"Due to the necessity of public key(s) being directly controlled by the profile owner, any profile owner lacking public keys, such as those associated with a contract, cannot be resolved into a DID.\nFuture versions may explore alternative methods to accommodate profiles without direct public key control, enhancing inclusivity."),(0,i.kt)("h2",r({},{id:"consequences"}),"Consequences"),(0,i.kt)("h3",r({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,i.kt)("p",null,"The solution outlined above is fully backward compatible since we are just adding a new query method."),(0,i.kt)("h3",r({},{id:"positive"}),"Positive"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Enable the usage of Desmos in applications that support DID.")),(0,i.kt)("h3",r({},{id:"negative"}),"Negative"),(0,i.kt)("p",null,"(none known)"),(0,i.kt)("h3",r({},{id:"neutral"}),"Neutral"),(0,i.kt)("p",null,"(none known)"),(0,i.kt)("h2",r({},{id:"further-discussions"}),"Further Discussions"),(0,i.kt)("p",null,"To be compatible to DID universal resolver, we SHOULD implement resolver driver for Desmos in the future."),(0,i.kt)("h2",r({},{id:"references"}),"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",r({parentName:"li"},{href:"https://www.w3.org/TR/did-core/"}),"W3C Decentralized Identifiers (DIDs) v1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",r({parentName:"li"},{href:"https://github.com/decentralized-identity/universal-resolver"}),"DID universal resolver"))))}p.isMDXComponent=!0}}]);