"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[68402],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>b});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=c(t),b=r,m=g["".concat(p,".").concat(b)]||g[b]||d[b]||a;return t?i.createElement(m,o(o({ref:n},s),{},{components:t})):i.createElement(m,o({ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},30258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>s});t(67294);var i=t(3905);function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},r.apply(this,arguments)}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const o={id:"bigint-comparison-exp",title:"bigint_comparison_exp",hide_table_of_contents:!1},l=void 0,p={unversionedId:"graphql/inputs/bigint-comparison-exp",id:"version-4.2.0/graphql/inputs/bigint-comparison-exp",title:"bigint_comparison_exp",description:"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'.",source:"@site/versioned_docs/version-4.2.0/07-graphql/inputs/bigint-comparison-exp.mdx",sourceDirName:"07-graphql/inputs",slug:"/graphql/inputs/bigint-comparison-exp",permalink:"/4.2.0/graphql/inputs/bigint-comparison-exp",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/versioned_docs/version-4.2.0/07-graphql/inputs/bigint-comparison-exp.mdx",tags:[],version:"4.2.0",frontMatter:{id:"bigint-comparison-exp",title:"bigint_comparison_exp",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"application_link_order_by",permalink:"/4.2.0/graphql/inputs/application-link-order-by"},next:{title:"Boolean_comparison_exp",permalink:"/4.2.0/graphql/inputs/boolean-comparison-exp"}},c={},s=[{value:"Fields",id:"fields",level:3},{value:"<code>_eq</code> (<code>bigint</code>)",id:"_eq-bigint",level:4},{value:"<code>_gt</code> (<code>bigint</code>)",id:"_gt-bigint",level:4},{value:"<code>_gte</code> (<code>bigint</code>)",id:"_gte-bigint",level:4},{value:"<code>_in</code> (<code>[bigint!]</code>)",id:"_in-bigint",level:4},{value:"<code>_is_null</code> (<code>Boolean</code>)",id:"_is_null-boolean",level:4},{value:"<code>_lt</code> (<code>bigint</code>)",id:"_lt-bigint",level:4},{value:"<code>_lte</code> (<code>bigint</code>)",id:"_lte-bigint",level:4},{value:"<code>_neq</code> (<code>bigint</code>)",id:"_neq-bigint",level:4},{value:"<code>_nin</code> (<code>[bigint!]</code>)",id:"_nin-bigint",level:4}],d={toc:s};function g(e){var{components:n}=e,t=a(e,["components"]);return(0,i.kt)("wrapper",r({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'."),(0,i.kt)("pre",null,(0,i.kt)("code",r({parentName:"pre"},{className:"language-graphql"}),"input bigint_comparison_exp {\n  _eq: bigint\n  _gt: bigint\n  _gte: bigint\n  _in: [bigint!]\n  _is_null: Boolean\n  _lt: bigint\n  _lte: bigint\n  _neq: bigint\n  _nin: [bigint!]\n}\n")),(0,i.kt)("h3",r({},{id:"fields"}),"Fields"),(0,i.kt)("h4",r({},{id:"_eq-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_eq"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"bigint")),")"),(0,i.kt)("h4",r({},{id:"_gt-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_gt"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"bigint")),")"),(0,i.kt)("h4",r({},{id:"_gte-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_gte"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"bigint")),")"),(0,i.kt)("h4",r({},{id:"_in-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_in"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"[bigint!]")),")"),(0,i.kt)("h4",r({},{id:"_is_null-boolean"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_is_null"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/boolean"}),(0,i.kt)("inlineCode",{parentName:"a"},"Boolean")),")"),(0,i.kt)("h4",r({},{id:"_lt-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_lt"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"bigint")),")"),(0,i.kt)("h4",r({},{id:"_lte-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_lte"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"bigint")),")"),(0,i.kt)("h4",r({},{id:"_neq-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_neq"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"bigint")),")"),(0,i.kt)("h4",r({},{id:"_nin-bigint"}),(0,i.kt)("a",r({parentName:"h4"},{href:"#"}),(0,i.kt)("inlineCode",{parentName:"a"},"_nin"))," (",(0,i.kt)("a",r({parentName:"h4"},{href:"../scalars/bigint"}),(0,i.kt)("inlineCode",{parentName:"a"},"[bigint!]")),")"))}g.isMDXComponent=!0}}]);