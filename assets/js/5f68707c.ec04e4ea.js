"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[60761],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,i[1]=r;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});n(67294);var a=n(3905);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}const i={},r="ADR 021: Subspace specific custom fee tokens",l={unversionedId:"architecture/adr-021-subspace-specific-custom-fee-tokens",id:"architecture/adr-021-subspace-specific-custom-fee-tokens",title:"ADR 021: Subspace specific custom fee tokens",description:"Changelog",source:"@site/docs/architecture/adr-021-subspace-specific-custom-fee-tokens.md",sourceDirName:"architecture",slug:"/architecture/adr-021-subspace-specific-custom-fee-tokens",permalink:"/architecture/adr-021-subspace-specific-custom-fee-tokens",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-021-subspace-specific-custom-fee-tokens.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 020: Post ownership transfer",permalink:"/architecture/adr-020-post-ownership-change"},next:{title:"ADR 022: Per-subspace token factory",permalink:"/architecture/adr-022-per-subspace-token-factory"}},c={},p=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Types",id:"types",level:3},{value:"Msgs",id:"msgs",level:3},{value:"Custom TxFeeChecker",id:"custom-txfeechecker",level:3},{value:"Deprecated <code>x/fees</code>",id:"deprecated-xfees",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3}],u={toc:p};function d(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",s({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",s({},{id:"adr-021-subspace-specific-custom-fee-tokens"}),"ADR 021: Subspace specific custom fee tokens"),(0,a.kt)("h2",s({},{id:"changelog"}),"Changelog"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"April 24th, 2023: First draft;"),(0,a.kt)("li",{parentName:"ul"},"May 8th, 2023: First review;")),(0,a.kt)("h2",s({},{id:"status"}),"Status"),(0,a.kt)("p",null,"ACCEPTED Not Implemented"),(0,a.kt)("h2",s({},{id:"abstract"}),"Abstract"),(0,a.kt)("p",null,"This ADR enables subspace owners to let content creators pay for transaction fees using different token denominations when creating contents within their subspace."),(0,a.kt)("h2",s({},{id:"context"}),"Context"),(0,a.kt)("p",null,"Desmos uses subspaces to represent virtual applications built on top of our protocol. Currently, subspaces are mainly used to store content such as posts, reports, and reactions. While these features are sufficient to develop new applications on top of Desmos, they may not be enough to convince existing applications to migrate to our platform."),(0,a.kt)("p",null,"For instance, let's consider an existing application that uses a centralized database in order to store users discussions. Although such application might easily use Desmos as its backend, they most likely are not going to do so because it offers no advantage to them. Migrating to Desmos would simply transfer their existing users to our chain without any benefits for them."),(0,a.kt)("h2",s({},{id:"decision"}),"Decision"),(0,a.kt)("p",null,"To address the issue mentioned above, we propose implementing a mechanism that allows users to pay content-related fees using additional token denominations within the specified subspace. "),(0,a.kt)("p",null,"Ideally, the flow that will lead one subspace to accept an additional fee token is going to be the following: "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The subspace owner creates an on-chain governance proposal asking validators if they are fine in receiving fees paid in the new token denomination when validating transactions related to that subspace."),(0,a.kt)("li",{parentName:"ol"},"Validators will agree or reject the proposal through on-chain voting. "),(0,a.kt)("li",{parentName:"ol"},"If the proposal is accepted, the new token denom will be added to the list of additional fee token denoms that can be used to pay for fees within that subspace."),(0,a.kt)("li",{parentName:"ol"},"If the proposal is rejected, the new token denom will not be added to the list of additional fee token denoms.")),(0,a.kt)("h3",s({},{id:"types"}),"Types"),(0,a.kt)("p",null,"To represent the list of supported fee token denoms and their default minimum prices within a subspace, we will add a new field ",(0,a.kt)("inlineCode",{parentName:"p"},"allowed_fee_tokens")," to the existing Subspace structure."),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-proto"}),"message Subspace {\n\n  ...skip\n\n  // the creation time of the subspace\n  google.protobuf.Timestamp creation_time = 7;\n  \n  // List of fee token denoms with default minimum gas prices allowed inside the subspace\n  repeated Coin allowed_fee_tokens = 8;\n}\n")),(0,a.kt)("h3",s({},{id:"msgs"}),"Msgs"),(0,a.kt)("p",null,"We will implement the operation that allows subspace admins to update the list of allowed fee tokens list within their subspace via a governance proposal:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-proto"}),"service Msg {\n  // UpdateSubspaceFeeTokens allows subspace admins to update the list of fee tokens inside the subspace via a governance proposal\n  rpc UpdateSubspaceFeeTokens(MsgUpdateSubspaceFeeTokens) returns (MsgUpdateSubspaceFeeTokensResponse);\n}\n\n// MsgUpdateSubspaceFeeTokens represents the message to be used to update a subspace fee tokens by governance\nmessage MsgUpdateSubspaceFeeTokens {\n\n  // Id of the subspace where the list of allowed fee tokens will be updated\n  uint64 subspace_id = 1;\n    \n  // List of the allowed tokens to be fee token inside the subspace along with their default minimum prices\n  repeated Coin allowed_fee_tokens = 2;\n    \n  // authority is the address that controls the module (defaults to x/gov unless overwritten).\n  string authority = 3;\n}\n\n// MsgUpdateSubspaceFeeTokensResponse represents the Msg/UpdateSubspaceFeeTokens response type\nmessage MsgUpdateSubspaceFeeTokensResponse {}\n")),(0,a.kt)("h3",s({},{id:"custom-txfeechecker"}),"Custom TxFeeChecker"),(0,a.kt)("p",null,"To make it easier for validators to manage the minimum prices of fee tokens allowed within a subspace, we will develop a new ",(0,a.kt)("inlineCode",{parentName:"p"},"TxFeeChecker")," based on the existing one, which will function as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"combine the list of minimum gas prices in the validator's local configuration with the list of allowed fee tokens and their minimum prices within the subspace;"),(0,a.kt)("li",{parentName:"ol"},"follow the same process used inside the existing ",(0,a.kt)("inlineCode",{parentName:"li"},"TxFeeChecker"),".")),(0,a.kt)("h3",s({},{id:"deprecated-xfees"}),"Deprecated ",(0,a.kt)("inlineCode",{parentName:"h3"},"x/fees")),(0,a.kt)("p",null,"By implementing the mechanism described above, there might be a problem with the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/fees")," module. Here's an example scenario to illustrate this:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the governance decides to use ",(0,a.kt)("inlineCode",{parentName:"li"},"x/fees")," to change the minimum fees of ",(0,a.kt)("inlineCode",{parentName:"li"},"MsgCreatePost")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"10dsm"),"."),(0,a.kt)("li",{parentName:"ol"},"the governance also wants to use a custom token called ",(0,a.kt)("inlineCode",{parentName:"li"},"TokenA")," as a fee token within subspace ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," using ",(0,a.kt)("inlineCode",{parentName:"li"},"MsgUpdateSubspaceFeeTokens"),".")),(0,a.kt)("p",null,"Because ",(0,a.kt)("inlineCode",{parentName:"p"},"x/fees")," takes priority over anything, ",(0,a.kt)("inlineCode",{parentName:"p"},"TokenA")," will not be accepted as a fee token within subspace ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),". "),(0,a.kt)("p",null,"For this reason, we have decided to remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/fees")," module from Desmos."),(0,a.kt)("h2",s({},{id:"consequences"}),"Consequences"),(0,a.kt)("h3",s({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,a.kt)("p",null,"The solution outlined above is ",(0,a.kt)("strong",{parentName:"p"},"not")," backward compatible, and it requires a upgrade to delete ",(0,a.kt)("inlineCode",{parentName:"p"},"x/fees")," stores."),(0,a.kt)("h3",s({},{id:"positive"}),"Positive"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The subspace manager can enable users to pay fees using custom tokens inside the subspace.")),(0,a.kt)("h3",s({},{id:"negative"}),"Negative"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Performing additional checks during the transaction check phase can slow down transaction processing.")),(0,a.kt)("h3",s({},{id:"neutral"}),"Neutral"),(0,a.kt)("p",null,"(none known)"))}d.isMDXComponent=!0}}]);