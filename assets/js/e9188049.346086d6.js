"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[73914],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},20841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});a(67294);var n=a(3905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const s={},i="ADR 022: Per-subspace token factory",l={unversionedId:"architecture/adr-022-per-subspace-token-factory",id:"architecture/adr-022-per-subspace-token-factory",title:"ADR 022: Per-subspace token factory",description:"Changelog",source:"@site/docs/architecture/adr-022-per-subspace-token-factory.md",sourceDirName:"architecture",slug:"/architecture/adr-022-per-subspace-token-factory",permalink:"/architecture/adr-022-per-subspace-token-factory",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-022-per-subspace-token-factory.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 021: Subspace specific custom fee tokens",permalink:"/architecture/adr-021-subspace-specific-custom-fee-tokens"},next:{title:"ADR 023: Subspace relationships export",permalink:"/architecture/adr-023-subspace-relationships-export"}},c={},p=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"<code>Msg</code> Service",id:"msg-service",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],u={toc:p};function m(e){var{components:t}=e,a=o(e,["components"]);return(0,n.kt)("wrapper",r({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",r({},{id:"adr-022-per-subspace-token-factory"}),"ADR 022: Per-subspace token factory"),(0,n.kt)("h2",r({},{id:"changelog"}),"Changelog"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"April 28th, 2023: First draft;"),(0,n.kt)("li",{parentName:"ul"},"May 8th, 2023: First review;"),(0,n.kt)("li",{parentName:"ul"},"May 9th, 2023: Second review;")),(0,n.kt)("h2",r({},{id:"status"}),"Status"),(0,n.kt)("p",null,"ACCEPTED Not Implemented"),(0,n.kt)("h2",r({},{id:"abstract"}),"Abstract"),(0,n.kt)("p",null,"This ADR introduces a new feature that allows subspace admins to create, mint and burn new tokens. "),(0,n.kt)("h2",r({},{id:"context"}),"Context"),(0,n.kt)("p",null,"Desmos is a social network protocol that allows users to create, share, and engage with content on a decentralized platform. It also provides the ability to create subspaces, which represent applications built on top of Desmos."),(0,n.kt)("p",null,"Currently, to post or interact with content within a subspace on Desmos, users are required to pay the gas fee using DSM (Desmos native token). This means that there is no direct financial incentive for creating a social network on Desmos itself."),(0,n.kt)("p",null,"By allowing subspace admins to mint custom tokens, we are going to enable the implementation of a custom tokenomic system within the subspace. This means that when users create or interact with content stored within a particular subspace, they may earn or spend these custom tokens. This will provide a new level of flexibility and incentive for users to actively participate within the subspaces."),(0,n.kt)("h2",r({},{id:"decision"}),"Decision"),(0,n.kt)("p",null,"We will wrap the CosmWasm ",(0,n.kt)("a",r({parentName:"p"},{href:"https://github.com/CosmWasm/token-factory/blob/main/x/tokenfactory"}),"Token Factory module"),"\nwith the following modifications:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Instead of using the token creator address to compose the coin denom, we will use the subspace treasury address: ",(0,n.kt)("inlineCode",{parentName:"li"},"factory/{trasury_address}/subdenom"),";"),(0,n.kt)("li",{parentName:"ol"},"Only the subspace treasury will be able to perform the admin-related operations."),(0,n.kt)("li",{parentName:"ol"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"CreateDenom")," action will burn ",(0,n.kt)("inlineCode",{parentName:"li"},"dsm")," instead of send them to the community pool.  ")),(0,n.kt)("h3",r({},{id:"msg-service"}),(0,n.kt)("inlineCode",{parentName:"h3"},"Msg")," Service"),(0,n.kt)("p",null,"The messages used from this module will be the same as ",(0,n.kt)("a",r({parentName:"p"},{href:"https://github.com/CosmWasm/token-factory/blob/main/proto/osmosis/tokenfactory/v1beta1/tx.proto"}),"CosmWasm"),"\nwith the following modifications: "),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Addition of a ",(0,n.kt)("inlineCode",{parentName:"li"},"subspace_id")," field to all the messages, in order to identify for which subspace the operations are performed;"),(0,n.kt)("li",{parentName:"ol"},"Removal of the ",(0,n.kt)("inlineCode",{parentName:"li"},"MsgChangeAdmin")," message, since the allowed admin will only be the subspace treasury account;"),(0,n.kt)("li",{parentName:"ol"},"Addition of a ",(0,n.kt)("inlineCode",{parentName:"li"},"MsgUpdateParams")," message, in order to update the amount of coins that a subspace admin need to burn to execute a ",(0,n.kt)("inlineCode",{parentName:"li"},"MsgCreateDenom"),".  ")),(0,n.kt)("p",null,"Here is the Msg service for the ",(0,n.kt)("inlineCode",{parentName:"p"},"MsgUpdateParams")," that we are going to add to the CosmWasm tokenfactory module:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-protobuf"}),'service Msg {\n  ...\n\n  // UpdateParams defines a (governance) operation for updating the module\n  // parameters. The authority defaults to the x/gov module account.\n  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);\n}\n\n// MsgUpdateParams is the Msg/UpdateParams request type.\nmessage MsgUpdateParams {\n  option (cosmos.msg.v1.signer) = "authority";\n\n  // authority is the address that controls the module (defaults to x/gov unless\n  // overwritten).\n  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];\n\n  // params defines the parameters to update.\n  //\n  // NOTE: All parameters must be supplied.\n  Params params = 2 [ (gogoproto.nullable) = false ];\n}\n\n// MsgUpdateParamsResponse defines the response structure for executing a\n// MsgUpdateParams message.\nmessage MsgUpdateParamsResponse {}\n\n// Params are the module parameters.\nmessage Params {\n  repeated cosmos.base.v1beta1.Coin denom_creation_fee = 1 [\n    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",\n    (gogoproto.moretags) = "yaml:\\"denom_creation_fee\\"",\n    (gogoproto.nullable) = false\n  ];\n}\n')),(0,n.kt)("h2",r({},{id:"consequences"}),"Consequences"),(0,n.kt)("h3",r({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,n.kt)("p",null,"The solution outlined above is fully backward compatible since we are just adding a new module."),(0,n.kt)("h3",r({},{id:"positive"}),"Positive"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Allow subspace admins to create their custom denominations enabling custom tokenomics")),(0,n.kt)("h3",r({},{id:"negative"}),"Negative"),(0,n.kt)("p",null,"(none known)"),(0,n.kt)("h3",r({},{id:"neutral"}),"Neutral"),(0,n.kt)("p",null,"(none known)"),(0,n.kt)("h2",r({},{id:"references"}),"References"))}m.isMDXComponent=!0}}]);