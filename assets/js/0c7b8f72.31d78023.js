"use strict";(self.webpackChunkdesmos_docs=self.webpackChunkdesmos_docs||[]).push([[6902],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),l=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(r),h=n,m=d["".concat(u,".").concat(h)]||d[h]||p[h]||s;return r?a.createElement(m,o(o({ref:t},c),{},{components:r})):a.createElement(m,o({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},90395:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>c});r(67294);var a=r(3905);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n.apply(this,arguments)}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const o={},i="ADR 018: Improve subspace treasury account",u={unversionedId:"architecture/adr-018-improve-subspace-treasury-account",id:"architecture/adr-018-improve-subspace-treasury-account",title:"ADR 018: Improve subspace treasury account",description:"Changelog",source:"@site/docs/architecture/adr-018-improve-subspace-treasury-account.md",sourceDirName:"architecture",slug:"/architecture/adr-018-improve-subspace-treasury-account",permalink:"/architecture/adr-018-improve-subspace-treasury-account",draft:!1,editUrl:"https://github.com/desmos-labs/desmos/tree/master/docs/docs/architecture/adr-018-improve-subspace-treasury-account.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR 017: Subspace fee grant",permalink:"/architecture/adr-017-subspace-fee-grant"},next:{title:"ADR 019: Subspace post migration",permalink:"/architecture/adr-019-subspace-post-moving"}},l={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"<code>Msg</code> Service",id:"msg-service",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],p={toc:c};function d(e){var{components:t}=e,r=s(e,["components"]);return(0,a.kt)("wrapper",n({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",n({},{id:"adr-018-improve-subspace-treasury-account"}),"ADR 018: Improve subspace treasury account"),(0,a.kt)("h2",n({},{id:"changelog"}),"Changelog"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Jan 4th, 2023: First draft;"),(0,a.kt)("li",{parentName:"ul"},"Jan 9th, 2023: First review;")),(0,a.kt)("h2",n({},{id:"status"}),"Status"),(0,a.kt)("p",null,"ACCEPTED Implemented"),(0,a.kt)("h2",n({},{id:"abstract"}),"Abstract"),(0,a.kt)("p",null,"This ADR introduces a new treasury account structure, which guarantees the account is fully controlled by the subspace admins."),(0,a.kt)("h2",n({},{id:"context"}),"Context"),(0,a.kt)("p",null,"Currently, each subspace's treasury is a third-party accounts assigned by the subspace's manager(s). The subspace itself has no control over its treasury, which can lead to the following issues:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"subspace managers can assign a wealthy account not controlled by them as their treasury in order to scam users;"),(0,a.kt)("li",{parentName:"ol"},"if we implement a feature that allows managers to spend money from the treasury in the future, they could assign any other account in order to steal funds.")),(0,a.kt)("h2",n({},{id:"decision"}),"Decision"),(0,a.kt)("p",null,"To address the issues mentioned above, we propose implementing a new treasury account structure. The new treasury address will be generated using ",(0,a.kt)("inlineCode",{parentName:"p"},"authtypes.NewModuleAddress")," from its subspace id when the subspace is created, and will not be able to be edited thereafter. This will ensure that the subspace's treasury is fully controlled by the subspace itself, rather than being managed by external third-party accounts."),(0,a.kt)("p",null,"Additionally, we will introduce a new permission and method that will grant users to perform operations on the treasury."),(0,a.kt)("h2",n({},{id:"msg-service"}),(0,a.kt)("inlineCode",{parentName:"h2"},"Msg")," Service"),(0,a.kt)("p",null,"To prevent the treasury account from being edited later, we will remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"treasury")," field from the current ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgCreateSubspace")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgEditSubspace")," messages."),(0,a.kt)("p",null,"Additionally, we will implement new methods to grant or revoke treasury authorization for users to perform operations on the treasury. These methods will be as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",n({parentName:"pre"},{className:"language-protobuf"}),"service Msg {\n    // GrantTreasuryAuthorization allows managers who have the permission to grant a treasury authorization to a user\n    rpc GrantTreasuryAuthorization(MsgGrantTreasuryAuthorization) returns (MsgGrantTreasuryAuthorizationResponse);\n\n    // RevokeTreasuryAuthorization allows managers who have the permission to revoke an existing treasury authorization\n    rpc RevokeTreasuryAuthorization(MsgRevokeTreasuryAuthorization) returns\n    (MsgRevokeTreasuryAuthorizationResponse);\n}\n\n// MsgGrantTreasuryAuthorization grants an authorization on behalf of the treasury to a user\nmessage MsgGrantTreasuryAuthorization {\n    // Id of the subspace where the authorization should be granted\n    uint64 subspace_id = 1;\n    // Address of the user granting a treasury authorization\n    string granter = 2;\n    // Address of the user who is being granted a treasury authorization\n    string grantee = 3;\n    // Grant represents the authorization to execute the provided methods\n    cosmos.authz.v1beta1.Grant grant = 4 [(gogoproto.nullable) = false];\n}\n\n// MsgGrantTreasuryAuthorizationResponse defines the Msg/MsgGrantTreasuryAuthorization response type\nmessage MsgGrantTreasuryAuthorizationResponse{}\n\n// MsgRevokeTreasuryAuthorization revokes an existing treasury authorization from a user\nmessage MsgRevokeTreasuryAuthorization {\n    // Id of the subspace from which the authorization should be revoked\n    uint64 subspace_id = 1;\n    // Address of the user revoking the treasury authorization\n    string granter = 2;\n    // Address of the user who is being revoked the treasury authorization\n    string grantee = 3;\n}\n\n// MsgRevokeTreasuryAuthorizationResponse defines the Msg/MsgRevokeTreasuryAuthorization response type\nmessage MsgRevokeTreasuryAuthorizationResponse{}\n")),(0,a.kt)("h2",n({},{id:"consequences"}),"Consequences"),(0,a.kt)("h3",n({},{id:"backwards-compatibility"}),"Backwards Compatibility"),(0,a.kt)("p",null,"The solution outlined above is ",(0,a.kt)("strong",{parentName:"p"},"not")," backwards compatible and will require a migration script to update all existing subspaces to the new version. This script will handle the following tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"migrate all subspaces to have a new treasury address generated from the its subspace's ID.")),(0,a.kt)("h3",n({},{id:"positive"}),"Positive"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ensure that the treasury account is fully controlled by the subspace")),(0,a.kt)("h3",n({},{id:"negative"}),"Negative"),(0,a.kt)("p",null,"(none known)"),(0,a.kt)("h3",n({},{id:"neutral"}),"Neutral"),(0,a.kt)("p",null,"(none known)"),(0,a.kt)("h2",n({},{id:"references"}),"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",n({parentName:"li"},{href:"https://github.com/desmos-labs/desmos/pull/1057#discussion_r1059423029"}),"Issue #1057 discussion"))))}d.isMDXComponent=!0}}]);