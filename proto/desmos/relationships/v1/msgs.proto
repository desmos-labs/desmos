syntax = "proto3";
package desmos.relationships.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/desmos-labs/desmos/v5/x/relationships/types";

// Msg defines the relationships Msg service.
service Msg {
  // CreateRelationship defines a method for creating a new relationship
  rpc CreateRelationship(MsgCreateRelationship)
      returns (MsgCreateRelationshipResponse);

  // DeleteRelationship defines a method for deleting a relationship
  rpc DeleteRelationship(MsgDeleteRelationship)
      returns (MsgDeleteRelationshipResponse);

  // BlockUser defines a method for blocking a user
  rpc BlockUser(MsgBlockUser) returns (MsgBlockUserResponse);

  // UnblockUser defines a method for unblocking a user
  rpc UnblockUser(MsgUnblockUser) returns (MsgUnblockUserResponse);
}

// MsgCreateRelationship represents a message to create a relationship
// between two users on a specific subspace.
message MsgCreateRelationship {
  // User creating the relationship
  string signer = 1 [
    (gogoproto.moretags) = "yaml:\"signer\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Counterparty of the relationship (i.e. user to be followed)
  string counterparty = 2 [
    (gogoproto.moretags) = "yaml:\"counterparty\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Subspace id inside which the relationship will be valid
  uint64 subspace_id = 3 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgCreateRelationshipResponse defines the Msg/CreateRelationship response
// type.
message MsgCreateRelationshipResponse {}

// --------------------------------------------------------------------------------------------------------------------

// MsgDeleteRelationship represents a message to delete the relationship
// between two users.
message MsgDeleteRelationship {
  // User that created the relationship
  string signer = 1 [
    (gogoproto.moretags) = "yaml:\"signer\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Counterparty of the relationship that should be deleted
  string counterparty = 2 [
    (gogoproto.moretags) = "yaml:\"counterparty\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Id of the subspace inside which the relationship to delete exists
  uint64 subspace_id = 3 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgDeleteRelationshipResponse defines the Msg/DeleteRelationship response
// type.
message MsgDeleteRelationshipResponse {}

// --------------------------------------------------------------------------------------------------------------------

// MsgBlockUser represents a message to block another user specifying an
// optional reason.
message MsgBlockUser {
  // Address of the user blocking the other user
  string blocker = 1 [
    (gogoproto.moretags) = "yaml:\"blocker\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Address of the user that should be blocked
  string blocked = 2 [
    (gogoproto.moretags) = "yaml:\"blocked\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // (optional) Reason why the user has been blocked
  string reason = 3 [ (gogoproto.moretags) = "yaml:\"reason\"" ];

  // Id of the subspace inside which the user should be blocked
  uint64 subspace_id = 4 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgBlockUserResponse defines the Msg/BlockUser response type.
message MsgBlockUserResponse {}

// --------------------------------------------------------------------------------------------------------------------

// MsgUnblockUser represents a message to unblock a previously blocked user.
message MsgUnblockUser {
  // Address of the user that blocked another user
  string blocker = 1 [
    (gogoproto.moretags) = "yaml:\"blocker\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Address of the user that should be unblocked
  string blocked = 2 [
    (gogoproto.moretags) = "yaml:\"blocked\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Id of the subspace inside which the user should be unblocked
  uint64 subspace_id = 4 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgUnblockUserResponse defines the Msg/UnblockUser response type.
message MsgUnblockUserResponse {}