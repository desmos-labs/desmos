syntax = "proto3";
package desmos.profiles.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "desmos/profiles/v1beta1/params.proto";
import "desmos/profiles/v1beta1/models.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/desmos-labs/desmos/x/profiles/types";

// Query defines the gRPC querier service.
service Query {
  // Profile queries the profile of a specific user given their DTag or address.
  // If the queried user does not have a profile, the returned response will
  // contain a null profile.
  rpc Profile(QueryProfileRequest) returns (QueryProfileResponse) {
    option (google.api.http).get = "/desmos/profiles/v1beta1/profiles/{user}";
  }

  // DTagTransfers queries all the DTag transfers requests that have been made
  // towards the user with the given address
  rpc DTagTransfers(QueryDTagTransfersRequest)
      returns (QueryDTagTransfersResponse) {
    option (google.api.http).get = "/desmos/profiles/v1beta1/dtag_transfers";
  }

  // Params queries the profiles module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/desmos/profiles/v1beta1/params";
  }

  // UserRelationships queries the relationships for the user having the given
  // address
  rpc UserRelationships(QueryUserRelationshipsRequest)
      returns (QueryUserRelationshipsResponse) {
    option (google.api.http).get =
        "/desmos/relationships/v1beta1/relationships/{user}";
  }

  // UserBlocks queries the user blocks for the user having the given address
  rpc UserBlocks(QueryUserBlocksRequest) returns (QueryUserBlocksResponse) {
    option (google.api.http).get =
        "/desmos/relationships/v1beta1/blocks/{user}";
  }

  // ChainLink queries the user links for the user having the given address
  rpc ChainLink(QueryChainLinkRequest) returns (QueryChainLinkResponse) {
    option (google.api.http).get =
        "/desmos/relationships/v1beta1/links/{user}/{chain_id}";
  }
}

// ___________________________________________________________________________________________________________________

// QueryProfileRequest is the request type for the Query/Profile RPC method.
message QueryProfileRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address or DTag of the user to query the profile for
  string user = 1;
}

// QueryProfileResponse is the response type for the Query/Profile RPC method.
message QueryProfileResponse {
  google.protobuf.Any profile = 1
      [ (cosmos_proto.accepts_interface) = "AccountI" ];
}

// ___________________________________________________________________________________________________________________

// QueryDTagTransfersRequest is the request type for the Query/DTagTransfers RPC
// endpoint
message QueryDTagTransfersRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address or DTag of the user to query the transfer requests for
  string user = 1;
}

// QueryDTagTransfersResponse is the response type for the Query/DTagTransfers
// RPC method.
message QueryDTagTransfersResponse {
  // relationships represent the list of all the blocks for the queried user
  repeated desmos.profiles.v1beta1.DTagTransferRequest requests = 1
      [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// QueryParamsRequest is the request type for the Query/Params RPC endpoint
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  desmos.profiles.v1beta1.Params params = 1 [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// QueryUserRelationshipsRequest is the request type for the
// Query/UserRelationships RPC method.
message QueryUserRelationshipsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // address of the user to query the relationships for
  string user = 1;
}

// QueryUserRelationshipsResponse is the response type for the
// Query/UserRelationships RPC method.
message QueryUserRelationshipsResponse {
  string user = 1;

  // relationships represent the list of all the relationships for the queried
  // user
  repeated desmos.profiles.v1beta1.Relationship relationships = 2
      [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// QueryUserBlocksRequest is the request type for the Query/UserBlocks RPC
// endpoint
message QueryUserBlocksRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // address of the user to query the blocks for
  string user = 1;
}

// QueryUserBlocksResponse is the response type for the Query/UserBlocks RPC
// method.
message QueryUserBlocksResponse {
  // blocks represent the list of all the blocks for the queried user
  repeated desmos.profiles.v1beta1.UserBlock blocks = 1
      [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// QueryChainLinkRequest is the request type for the Query/Link RPC
// endpoint
message QueryChainLinkRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // address of the user to query the link for
  string user = 1;

  // chain id of the user to query the link for
  string chain_id = 2;
}

// QueryChainLinkResponse is the response type for the Query/Link RPC
// method.
message QueryChainLinkResponse {

  // link represent the link of the queried user
  desmos.profiles.v1beta1.ChainLink chain_link = 1;
}
