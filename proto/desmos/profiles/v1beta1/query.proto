syntax = "proto3";
package desmos.profiles.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "desmos/profiles/v1beta1/query_profile.proto";
import "desmos/profiles/v1beta1/query_relationships.proto";
import "desmos/profiles/v1beta1/query_dtag_requests.proto";
import "desmos/profiles/v1beta1/query_params.proto";
import "desmos/profiles/v1beta1/query_chain_links.proto";
import "desmos/profiles/v1beta1/query_app_links.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/desmos-labs/desmos/v2/x/profiles/types";

// Query defines the gRPC querier service.
service Query {
  // Profile queries the profile of a specific user given their DTag or address.
  // If the queried user does not have a profile, the returned response will
  // contain a null profile.
  rpc Profile(QueryProfileRequest) returns (QueryProfileResponse) {
    option (google.api.http).get = "/desmos/profiles/v1beta1/profiles/{user}";
  }

  // IncomingDTagTransferRequests queries all the DTag transfers requests that
  // have been made towards the user with the given address
  rpc IncomingDTagTransferRequests(QueryIncomingDTagTransferRequestsRequest)
      returns (QueryIncomingDTagTransferRequestsResponse) {
    option (google.api.http).get =
        "/desmos/profiles/v1beta1/dtag_transfer_requests/{receiver}";
  }

  // Params queries the profiles module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/desmos/profiles/v1beta1/params";
  }

  // Relationships queries all relationships for the given user, if provided.
  // Otherwise, it queries all the relationships stored.
  rpc Relationships(QueryRelationshipsRequest)
      returns (QueryRelationshipsResponse) {
    option (google.api.http).get =
        "/desmos/relationships/v1beta1/relationships/{user}";
  }

  // Blocks queries the blocks for the given user, if provided.
  // Otherwise, it queries all the stored blocks.
  rpc Blocks(QueryBlocksRequest) returns (QueryBlocksResponse) {
    option (google.api.http).get =
        "/desmos/relationships/v1beta1/blocks/{user}";
  }

  // ChainLinks queries the chain links associated to the given user, if
  // provided. Otherwise it queries all the chain links stored.
  rpc ChainLinks(QueryChainLinksRequest) returns (QueryChainLinksResponse) {
    option (google.api.http).get =
        "/desmos/profiles/v1beta1/chain-links/{user}";
  }

  // UserChainLink queries the chain link for the given user, chain name and
  // target address
  rpc UserChainLink(QueryUserChainLinkRequest)
      returns (QueryUserChainLinkResponse) {
    option (google.api.http).get =
        "/desmos/profiles/v1beta1/chain-links/{user}/{chain_name}/{target}";
  }

  // ApplicationLinks queries the applications links associated to the given
  // user, if provided. Otherwise, it queries all the application links stored.
  rpc ApplicationLinks(QueryApplicationLinksRequest)
      returns (QueryApplicationLinksResponse) {
    option (google.api.http).get = "/desmos/profiles/v1beta1/app-links/{user}";
  }

  // UserApplicationLinks queries a single application link for a given user,
  // searching via the application name and username
  rpc UserApplicationLink(QueryUserApplicationLinkRequest)
      returns (QueryUserApplicationLinkResponse) {
    option (google.api.http).get =
        "/desmos/profiles/v1beta1/app-links/{user}/{application}/{username}";
  }

  // ApplicationLinkByClientID queries a single application link for a given
  // client id.
  rpc ApplicationLinkByClientID(QueryApplicationLinkByClientIDRequest)
      returns (QueryApplicationLinkByClientIDResponse) {
    option (google.api.http).get =
        "/desmos/profiles/v1beta1/app-links/clients/{client_id}";
  }
}
