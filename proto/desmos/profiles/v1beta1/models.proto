syntax = "proto3";
package desmos.profiles.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/desmos-labs/desmos/x/profiles/types";

// Pictures contains the data of a user profile's related pictures
message Pictures {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  string profile = 1 [ (gogoproto.moretags) = "yaml:\"profile\"" ];
  string cover = 2 [ (gogoproto.moretags) = "yaml:\"cover\"" ];
}

// ___________________________________________________________________________________________________________________

// Profile represents a generic first on Desmos, containing the information of a
// single user
message Profile {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  google.protobuf.Any account = 1
      [ (cosmos_proto.accepts_interface) = "AccountI" ];
  string dtag = 2 [
    (gogoproto.moretags) = "yaml:\"dtag\"",
    (gogoproto.customname) = "DTag"
  ];
  string nickname = 3 [ (gogoproto.moretags) = "yaml:\"nickname\"" ];
  string bio = 4 [ (gogoproto.moretags) = "yaml:\"bio\"" ];
  Pictures pictures = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"pictures\""
  ];
  google.protobuf.Timestamp creation_date = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"creation_date\"",
    (gogoproto.jsontag) = "creation_date",
    (gogoproto.nullable) = false
  ];
  repeated ChainLink chains_links = 7
      [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"chains_links\"" ];
}

// ___________________________________________________________________________________________________________________

// DTagTransferRequest represent a DTag transfer request between two users
message DTagTransferRequest {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  string dtag_to_trade = 1 [
    (gogoproto.moretags) = "yaml:\"dtag_to_trade\"",
    (gogoproto.customname) = "DTagToTrade"
  ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  string receiver = 3 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
}

// DTagTransferRequests contains a list of DTagTransferRequest
message DTagTransferRequests {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  repeated DTagTransferRequest requests = 1 [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// Relationship is the struct of a relationship.
// It represent the concept of "follow" of traditional social networks.
message Relationship {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  string creator = 1 [ (gogoproto.moretags) = "yaml:\"creator\"" ];
  string recipient = 2 [ (gogoproto.moretags) = "yaml:\"recipient\"" ];
  string subspace = 3 [ (gogoproto.moretags) = "yaml:\"subspace\"" ];
}

// Relationships wraps a list of Relationship objects
message Relationships {
  repeated Relationship relationships = 1 [ (gogoproto.nullable) = false ];
}

// UserBlock represents the fact that the Blocker has blocked the given Blocked
// user.
message UserBlock {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  string blocker = 1 [ (gogoproto.moretags) = "yaml:\"blocker\"" ];
  string blocked = 2 [ (gogoproto.moretags) = "yaml:\"blocked\"" ];
  string reason = 3 [
    (gogoproto.moretags) = "yaml:\"reason\""
  ]; // Reason the user has been blocked for (optional).
  string subspace = 4 [ (gogoproto.moretags) = "yaml:\"subspace\"" ];
}

// UserBlocks wraps a list of UserBlock objects
message UserBlocks {
  repeated UserBlock blocks = 1 [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// Proof contains all the data used to verify the signature when linking an
// account to a profile
message Proof {
  google.protobuf.Any pub_key = 1 [ (gogoproto.moretags) = "yaml:\"pub_key\"" ];
  string signature = 2 [ (gogoproto.moretags) = "yaml:\"signature\"" ];
}

// ChainConfig contains the data of the chain with which the link is made.
message ChainConfig {
  string id = 1
      [ (gogoproto.moretags) = "yaml:\"id\"", (gogoproto.customname) = "ID" ];
  string bech32_addr_prefix = 2
      [ (gogoproto.moretags) = "yaml:\"bech32_addr_prefix\"" ];
}

// ChainLink contains the data representing either an inter- or cross- chain link
message ChainLink {
  string address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];
  Proof proof = 2
      [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"proof\"" ];
  ChainConfig chain_config = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"chain_config\""
  ];
  google.protobuf.Timestamp creation_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"creation_time\"",
    (gogoproto.nullable) = false
  ];
}
