syntax = "proto3";
package desmos.profiles.v1beta1;

option go_package = "github.com/desmos-labs/desmos/x/profiles/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

// ApplicationLink contains the data of a link to a centralized application
message ApplicationLink {
  option (gogoproto.equal) = true;

  // Data contains the details of this specific link
  LinkData data = 1;
  // Data used to verify the connection
  VerificationData verification = 2;
  // State of the connection
  ApplicationLinkState state = 3;
  // OracleRequest represents the request that has been made to the oracle
  OracleRequest oracle_request = 4;
  // Data coming from the result of the verification.
  // Only available when the state is STATE_SUCCESS
  ApplicationLinkResult result = 5;
  // CreationTime represents the time in which the link was created
  google.protobuf.Timestamp creation_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

// LinkData contains the data associated to a specific user of a generic
// centralized application
message LinkData {
  option (gogoproto.equal) = true;

  // The application name (eg. Twitter, GitHub, etc)
  string application = 1;
  // Username on the application (eg. Twitter tag, GitHub profile, etc)
  string username = 2;
}

// VerificationData contains the data of a single verification
message VerificationData {
  option (gogoproto.equal) = true;

  // The application that should be verified
  string application = 1 [ (gogoproto.moretags) = "yaml:\"application\"" ];
  // The hex encoded call data that should be used to verify the application
  string call_data = 2 [ (gogoproto.moretags) = "yaml:\"call_data\"" ];
}

// OracleRequest represents a generic oracle request used to get the data from
// the centralized application
message OracleRequest {
  option (gogoproto.equal) = true;

  // ID is the ID of the request
  int64 id = 1 [ (gogoproto.customname) = "ID" ];
  // OracleScriptID is ID of an oracle script
  int64 oracle_script_id = 2 [ (gogoproto.customname) = "OracleScriptID" ];
  // ClientID represents the ID of the client that has called the oracle script
  string client_id = 3;
}

// ApplicationLinkState defines if an application link is in the following
// states: STARTED, ERRORED, SUCCESSFUL, TIMED_OUT
enum ApplicationLinkState {
  option (gogoproto.goproto_enum_prefix) = false;

  // A link has just been initialized
  APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "ApplicationLinkStateInitialized" ];
  // A link has just started being verified
  APPLICATION_LINK_STATE_VERIFICATION_STARTED = 1
      [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationStarted" ];
  // A link has errored during the verification process
  APPLICATION_LINK_STATE_VERIFICATION_ERROR = 2
      [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationError" ];
  // A link has being verified successfully
  APPLICATION_LINK_STATE_VERIFICATION_SUCCESS = 3
      [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationSuccess" ];
  // A link has timed out while waiting for the verification
  APPLICATION_LINK_STATE_TIMED_OUT = 4
      [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationTimedOut" ];
}

// Result represents a verification result
message ApplicationLinkResult {
  option (gogoproto.equal) = true;

  // sum is the oneof that specifies whether this represents a success or
  // failure result
  oneof sum {
    // Success represents a successful verification
    Success success = 1;

    // Failed represents a failed verification
    Failed failed = 2;
  }

  // Success is the result of an application link that has been successfully
  // verified
  message Success {
    option (gogoproto.equal) = true;

    // Value that has be signed by the profile
    string value = 1;
    // Signature that has been produced by signing the value
    string signature = 2;
  }

  // Failed is the result of an application link that has not been verified
  // successfully
  message Failed {
    option (gogoproto.equal) = true;

    // Error that is associated with the failure
    string error = 1;
  }
}