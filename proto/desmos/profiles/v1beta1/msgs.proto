syntax = "proto3";
package desmos.profiles.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/desmos-labs/desmos/x/profiles/types";

// Msg defines the relationships Msg service.
service Msg {
  // SaveProfile defines the method to save a profile
  rpc SaveProfile(MsgSaveProfile) returns (MsgSaveProfileResponse);

  // DeleteProfile defines the method to delete an existing profile
  rpc DeleteProfile(MsgDeleteProfile) returns (MsgDeleteProfileResponse);

  // RequestDTagTransfer defines the method to request another user to transfer
  // their DTag to you
  rpc RequestDTagTransfer(MsgRequestDTagTransfer)
      returns (MsgRequestDTagTransferResponse);

  // CancelDTagTransfer defines the method to cancel an outgoing DTag transfer
  // request
  rpc CancelDTagTransfer(MsgCancelDTagTransfer)
      returns (MsgCancelDTagTransferResponse);

  // AcceptDTagTransfer defines the method to accept an incoming DTag transfer
  // request
  rpc AcceptDTagTransfer(MsgAcceptDTagTransfer)
      returns (MsgAcceptDTagTransferResponse);

  // RefuseDTagTransfer defines the method to refuse an incoming DTag transfer
  // request
  rpc RefuseDTagTransfer(MsgRefuseDTagTransfer)
      returns (MsgRefuseDTagTransferResponse);

  // CreateRelationship defines a method for creating a new relationship
  rpc CreateRelationship(MsgCreateRelationship)
      returns (CreateRelationshipResponse);

  // DeleteRelationship defines a method for deleting a relationship
  rpc DeleteRelationship(MsgDeleteRelationship)
      returns (DeleteRelationshipResponse);

  // BlockUser defines a method for blocking a user
  rpc BlockUser(MsgBlockUser) returns (BlockUserResponse);

  // UnblockUser defines a method for unblocking a user
  rpc UnblockUser(MsgUnblockUser) returns (UnblockUserResponse);

  // Link defines a method for linking an account
  rpc Link(MsgLink) returns (LinkResponse);

  // Unlink defines a method for unlink an account from a profile
  rpc Unlink(MsgUnlink) returns (UnlinkResponse);
}

// MsgSaveProfile represents a message to save a profile.
message MsgSaveProfile {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string dtag = 1 [
    (gogoproto.moretags) = "yaml:\"dtag\"",
    (gogoproto.customname) = "DTag"
  ];

  string nickname = 2 [ (gogoproto.moretags) = "yaml:\"nickname\"" ];

  string bio = 3 [ (gogoproto.moretags) = "yaml:\"bio\"" ];

  string profile_picture = 4 [
    (gogoproto.jsontag) = "profile_picture",
    (gogoproto.moretags) = "yaml:\"profile_picture\""
  ];

  string cover_picture = 5 [
    (gogoproto.jsontag) = "cover_picture",
    (gogoproto.moretags) = "yaml:\"cover_picture\""
  ];

  string creator = 6 [ (gogoproto.moretags) = "yaml:\"creator\"" ];
}

// MsgSaveProfileResponse defines the Msg/SaveProfile response type.
message MsgSaveProfileResponse {}

// ___________________________________________________________________________________________________________________

// MsgDeleteProfile represents the message used to delete an existing profile.
message MsgDeleteProfile {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string creator = 1 [ (gogoproto.moretags) = "yaml:\"creator\"" ];
}

// MsgDeleteProfileResponse defines the Msg/DeleteProfile response type.
message MsgDeleteProfileResponse {}

// ___________________________________________________________________________________________________________________

// MsgRequestDTagTransfer represents the message used to request the DTag
// transfer to another user.
message MsgRequestDTagTransfer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string receiver = 1 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
}

// MsgRequestDTagTransferResponse defines the Msg/RequestDTagTransfer response
// type.
message MsgRequestDTagTransferResponse {}

// ___________________________________________________________________________________________________________________

// MsgCancelDTagTransfer represents the message used to cancel a DTag transfer
// request.
message MsgCancelDTagTransfer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string receiver = 1 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
}

// MsgCancelDTagTransferResponse represents the Msg/CancelDTagTransfer response
// type.
message MsgCancelDTagTransferResponse {}

// ___________________________________________________________________________________________________________________

// MsgAcceptDTagTransfer represents the message used to accept a DTag transfer
// request.
message MsgAcceptDTagTransfer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string new_dtag = 1 [
    (gogoproto.jsontag) = "new_dtag",
    (gogoproto.moretags) = "yaml:\"new_dtag\"",
    (gogoproto.customname) = "NewDTag"
  ];

  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  string receiver = 3 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
}

// MsgAcceptDTagTransferResponse defines the Msg/AcceptDTagTransfer response.
message MsgAcceptDTagTransferResponse {}

// ___________________________________________________________________________________________________________________

// MsgRefuseDTagTransfer represents the message used to refuse a DTag transfer
// request.
message MsgRefuseDTagTransfer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  string receiver = 2 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
}

// MsgRefuseDTagTransferResponse defines the Msg/RefuseDTagTransfer response.
message MsgRefuseDTagTransferResponse {}

// ___________________________________________________________________________________________________________________

// MsgCreateRelationship represents a message to create a relationship
// between two users on a specific subspace.
message MsgCreateRelationship {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  string receiver = 2 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
  string subspace = 3 [ (gogoproto.moretags) = "yaml:\"subspace\"" ];
}

// CreateRelationshipResponse defines the Msg/CreateRelationship response type.
message CreateRelationshipResponse {}

// ___________________________________________________________________________________________________________________

// MsgDeleteRelationship represents a message to delete the relationship
// between two users.
message MsgDeleteRelationship {
  string user = 1 [ (gogoproto.moretags) = "yaml:\"user\"" ];
  string counterparty = 2 [ (gogoproto.moretags) = "yaml:\"counterparty\"" ];
  string subspace = 3 [ (gogoproto.moretags) = "yaml:\"subspace\"" ];
}

// DeleteRelationshipResponse defines the Msg/DeleteRelationship response type.
message DeleteRelationshipResponse {}

// ___________________________________________________________________________________________________________________

// MsgBlockUser represents a message to block another user specifying an
// optional reason.
message MsgBlockUser {
  string blocker = 1 [ (gogoproto.moretags) = "yaml:\"blocker\"" ];
  string blocked = 2 [ (gogoproto.moretags) = "yaml:\"blocked\"" ];
  string reason = 3 [ (gogoproto.moretags) = "yaml:\"reason\"" ];
  string subspace = 4 [ (gogoproto.moretags) = "yaml:\"subspace\"" ];
}

// BlockUserResponse defines the Msg/BlockUser response type.
message BlockUserResponse {}

// ___________________________________________________________________________________________________________________

// MsgUnblockUser represents a message to unblock a previously blocked user.
message MsgUnblockUser {
  string blocker = 1 [ (gogoproto.moretags) = "yaml:\"blocker\"" ];
  string blocked = 2 [ (gogoproto.moretags) = "yaml:\"blocked\"" ];
  string subspace = 4 [ (gogoproto.moretags) = "yaml:\"subspace\"" ];
}

// UnblockUserResponse defines the Msg/UnblockUser response type.
message UnblockUserResponse {}

// ___________________________________________________________________________________________________________________

// MsgLink represents a message to link an account.
message MsgLink {
  string source_address = 1
      [ (gogoproto.moretags) = "yaml:\"source_address\"" ];
  string destination_address = 2
      [ (gogoproto.moretags) = "yaml:\"destination_address\"" ];
  string source_signature = 3
      [ (gogoproto.moretags) = "yaml:\"source_signature\"" ];
  string destination_signature = 4
      [ (gogoproto.moretags) = "yaml:\"destination_signature\"" ];
}

// LinkResponse defines the Msg/Link response type.
message LinkResponse {}

// ___________________________________________________________________________________________________________________

// MsgUnLink represents a message to unlink an account from a profile.
message MsgUnlink {
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  string chain_id = 2 [
    (gogoproto.moretags) = "yaml:\"chain_id\"",
    (gogoproto.customname) = "ChainID"
  ];
  string target = 3 [ (gogoproto.moretags) = "yaml:\"target\"" ];
}

// UnlinkResponse defines the Msg/Unlink response type.
message UnlinkResponse {}