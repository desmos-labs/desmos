syntax = "proto3";
package desmos.profiles.v2;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/tx/signing/v1beta1/signing.proto";
import "cosmos/crypto/multisig/v1beta1/multisig.proto";

option go_package = "github.com/desmos-labs/desmos/v3/x/profiles/types";

// Profile represents a generic first on Desmos, containing the information of a
// single user
message Profile {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  // Account represents the base Cosmos account associated with this profile
  google.protobuf.Any account = 1
      [ (cosmos_proto.accepts_interface) = "AccountI" ];

  // DTag represents the unique tag of this profile
  string dtag = 2 [
    (gogoproto.moretags) = "yaml:\"dtag\"",
    (gogoproto.customname) = "DTag"
  ];

  // Nickname contains the custom human readable name of the profile
  string nickname = 3 [ (gogoproto.moretags) = "yaml:\"nickname\"" ];

  // Bio contains the biography of the profile
  string bio = 4 [ (gogoproto.moretags) = "yaml:\"bio\"" ];

  // Pictures contains the data about the pictures associated with he profile
  Pictures pictures = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"pictures\""
  ];

  // CreationTime represents the time in which the profile has been created
  google.protobuf.Timestamp creation_date = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"creation_date\"",
    (gogoproto.nullable) = false
  ];
}

// Pictures contains the data of a user profile's related pictures
message Pictures {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // Profile contains the URL to the profile picture
  string profile = 1 [ (gogoproto.moretags) = "yaml:\"profile\"" ];

  // Cover contains the URL to the cover picture
  string cover = 2 [ (gogoproto.moretags) = "yaml:\"cover\"" ];
}

// --------------------------------------------------------------------------------------------------------------------

// DTagTransferRequest represent a DTag transfer request between two users
message DTagTransferRequest {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // DTagToTrade contains the value of the DTag that should be transferred from
  // the receiver of the request to the sender
  string dtag_to_trade = 1 [
    (gogoproto.moretags) = "yaml:\"dtag_to_trade\"",
    (gogoproto.customname) = "DTagToTrade"
  ];

  // Sender represents the address of the account that sent the request
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  // Receiver represents the receiver of the request that, if accepted, will
  // give to the sender their DTag
  string receiver = 3 [ (gogoproto.moretags) = "yaml:\"receiver\"" ];
}

// --------------------------------------------------------------------------------------------------------------------

// ChainLink contains the data representing either an inter- or cross- chain
// link
message ChainLink {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // User defines the destination profile address to link
  string user = 1 [ (gogoproto.moretags) = "yaml:\"user\"" ];

  // Address contains the data of the external chain address to be connected
  // with the Desmos profile
  google.protobuf.Any address = 2 [
    (gogoproto.moretags) = "yaml:\"address\"",
    (cosmos_proto.accepts_interface) = "AddressData"
  ];

  // Proof contains the ownership proof of the external chain address
  Proof proof = 3
  [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"proof\"" ];

  // ChainConfig contains the configuration of the external chain
  ChainConfig chain_config = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"chain_config\""
  ];

  // CreationTime represents the time in which the link has been created
  google.protobuf.Timestamp creation_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"creation_time\"",
    (gogoproto.nullable) = false
  ];
}

// ChainConfig contains the data of the chain with which the link is made.
message ChainConfig {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  string name = 1 [ (gogoproto.moretags) = "yaml:\"name\"" ];
}

// Proof contains all the data used to verify a signature when linking an
// account to a profile
message Proof {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // PubKey represents the public key associated with the address for which to
  // prove the ownership
  google.protobuf.Any pub_key = 1 [ (gogoproto.moretags) = "yaml:\"pub_key\"" ];

  // Signature represents the hex-encoded signature of the PlainText value
  google.protobuf.Any signature = 2
  [ (gogoproto.moretags) = "yaml:\"signature\"" ];

  // PlainText represents the hex-encoded value signed in order to produce the
  // Signature
  string plain_text = 3 [ (gogoproto.moretags) = "yaml:\"plain_text\"" ];
}

// Bech32Address represents a Bech32-encoded address
message Bech32Address {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (cosmos_proto.implements_interface) = "AddressData";

  // Value represents the Bech-32 encoded address value
  string value = 1 [ (gogoproto.moretags) = "yaml:\"value\"" ];

  // Prefix represents the HRP of the Bech32 address
  string prefix = 2 [ (gogoproto.moretags) = "yaml:\"prefix\"" ];
}

// Base58Address represents a Base58-encoded address
message Base58Address {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (cosmos_proto.implements_interface) = "AddressData";

  // Value contains the Base58-encoded address
  string value = 1 [ (gogoproto.moretags) = "yaml:\"value\"" ];
}

// HexAddress represents an Hex-encoded address
// NOTE: Currently it only supports keccak256-uncompressed addresses
message HexAddress {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (cosmos_proto.implements_interface) = "AddressData";

  // Value represents the hex address value
  string value = 1 [ (gogoproto.moretags) = "yaml:\"value\"" ];

  // Prefix represents the optional prefix used during address encoding (e.g.
  // 0x)
  string prefix = 2 [ (gogoproto.moretags) = "yaml:\"prefix\"" ];
}

// SingleSignatureData is the signature data for a single signer
message SingleSignatureData {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (cosmos_proto.implements_interface) = "SignatureData";

  // Mode is the signing mode of the single signer
  cosmos.tx.signing.v1beta1.SignMode mode = 1;

  // Signature is the raw signature bytes
  bytes signature = 2;
}

// MultiSignatureData is the signature data for a multisig public key
message MultiSignatureData {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;
  option (cosmos_proto.implements_interface) = "SignatureData";

  // Bitarray specifies which keys within the multisig are signing
  cosmos.crypto.multisig.v1beta1.CompactBitArray bit_array = 1;

  // Signatures is the signatures of the multi-signature
  repeated google.protobuf.Any signatures = 2;
}

// --------------------------------------------------------------------------------------------------------------------

// ApplicationLink contains the data of a link to a centralized application
message ApplicationLink {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;

  //  User to which the link is associated
  string user = 1 [ (gogoproto.moretags) = "yaml:\"user\"" ];

  // Data contains the details of this specific link
  Data data = 2
  [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"data\"" ];

  // State of the link
  ApplicationLinkState state = 3 [ (gogoproto.moretags) = "yaml:\"state\"" ];

  // OracleRequest represents the request that has been made to the oracle
  OracleRequest oracle_request = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"oracle_request\""
  ];

  // Data coming from the result of the verification.
  // Only available when the state is STATE_SUCCESS
  Result result = 5 [ (gogoproto.moretags) = "yaml:\"result\"" ];

  // CreationTime represents the time in which the link was created
  google.protobuf.Timestamp creation_time = 6 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"creation_time\""
  ];
}

// Data contains the data associated to a specific user of a
// generic centralized application
message Data {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;

  // The application name (eg. Twitter, GitHub, etc)
  string application = 1 [ (gogoproto.moretags) = "yaml:\"application\"" ];
  // Username on the application (eg. Twitter tag, GitHub profile, etc)
  string username = 2 [ (gogoproto.moretags) = "yaml:\"username\"" ];
}

// OracleRequest represents a generic oracle request used to
// verify the ownership of a centralized application account
message OracleRequest {
  option (gogoproto.goproto_getters) = false;

  option (gogoproto.equal) = true;

  // ID is the ID of the request
  uint64 id = 1
  [ (gogoproto.customname) = "ID", (gogoproto.moretags) = "yaml:\"id\"" ];

  // OracleScriptID is ID of an oracle script
  uint64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.moretags) = "yaml:\"oracle_script_id\""
  ];

  // CallData contains the data used to perform the oracle request
  CallData call_data = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"call_data\""
  ];

  // ClientID represents the ID of the client that has called the oracle script
  string client_id = 4 [
    (gogoproto.customname) = "ClientID",
    (gogoproto.moretags) = "yaml:\"client_id\""
  ];

  // CallData contains the data sent to a single oracle request in order to
  // verify the ownership of a centralized application by a Desmos profile
  message CallData {
    option (gogoproto.equal) = true;

    // The application for which the ownership should be verified
    string application = 1 [ (gogoproto.moretags) = "yaml:\"application\"" ];

    // The hex encoded call data that should be used to verify the application
    // account ownership
    string call_data = 2 [ (gogoproto.moretags) = "yaml:\"call_data\"" ];
  }
}

// ApplicationLinkState defines if an application link is in the following
// states: STARTED, ERRORED, SUCCESSFUL, TIMED_OUT
enum ApplicationLinkState {
  option (gogoproto.goproto_enum_prefix) = false;

  // A link has just been initialized
  APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED = 0
  [ (gogoproto.enumvalue_customname) = "ApplicationLinkStateInitialized" ];
  // A link has just started being verified
  APPLICATION_LINK_STATE_VERIFICATION_STARTED = 1
  [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationStarted" ];
  // A link has errored during the verification process
  APPLICATION_LINK_STATE_VERIFICATION_ERROR = 2
  [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationError" ];
  // A link has being verified successfully
  APPLICATION_LINK_STATE_VERIFICATION_SUCCESS = 3
  [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationSuccess" ];
  // A link has timed out while waiting for the verification
  APPLICATION_LINK_STATE_TIMED_OUT = 4
  [ (gogoproto.enumvalue_customname) = "AppLinkStateVerificationTimedOut" ];
}

// Result represents a verification result
message Result {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;

  // sum is the oneof that specifies whether this represents a success or
  // failure result
  oneof sum {
    // Success represents a successful verification
    Success success = 1;

    // Failed represents a failed verification
    Failed failed = 2;
  }

  // Success is the result of an application link that has been successfully
  // verified
  message Success {
    option (gogoproto.goproto_getters) = false;
    option (gogoproto.equal) = true;

    // Hex-encoded value that has be signed by the profile
    string value = 1 [ (gogoproto.moretags) = "yaml:\"value\"" ];
    // Hex-encoded signature that has been produced by signing the value
    string signature = 2 [ (gogoproto.moretags) = "yaml:\"signature\"" ];
  }

  // Failed is the result of an application link that has not been verified
  // successfully
  message Failed {
    option (gogoproto.goproto_getters) = false;
    option (gogoproto.equal) = true;

    // Error that is associated with the failure
    string error = 1 [ (gogoproto.moretags) = "yaml:\"error\"" ];
  }
}

// --------------------------------------------------------------------------------------------------------------------

// LinkChainAccountPacketData defines the object that should be sent inside a
// MsgSendPacket when wanting to link an external chain to a Desmos profile
// using IBC
message LinkChainAccountPacketData {
  option (gogoproto.goproto_getters) = false;

  // SourceAddress contains the details of the external chain address
  google.protobuf.Any source_address = 1 [
    (gogoproto.moretags) = "yaml:\"source_address\"",
    (cosmos_proto.accepts_interface) = "AddressData"
  ];

  // SourceProof represents the proof of ownership of the source address
  desmos.profiles.v2.Proof source_proof = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"source_proof\""
  ];

  // SourceChainConfig contains the details of the source chain
  desmos.profiles.v2.ChainConfig source_chain_config = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"source_chain_config\""
  ];

  // DestinationAddress represents the Desmos address of the profile that should
  // be linked with the external account
  string destination_address = 4
  [ (gogoproto.moretags) = "yaml:\"destination_address\"" ];

  // DestinationProof contains the proof of ownership of the DestinationAddress
  desmos.profiles.v2.Proof destination_proof = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"destination_proof\""
  ];
}

// LinkChainAccountPacketAck defines a struct for the packet acknowledgment
message LinkChainAccountPacketAck {
  option (gogoproto.goproto_getters) = false;

  // SourceAddress contains the external address that has been linked properly
  // with the profile
  string source_address = 1;
}

// --------------------------------------------------------------------------------------------------------------------

// Params contains the parameters for the profiles module
message Params {
  option (gogoproto.goproto_getters) = false;

  NicknameParams nickname = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"nickname\""
  ];

  DTagParams dtag = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"dtag\"",
    (gogoproto.customname) = "DTag"
  ];

  BioParams bio = 3
  [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"bio\"" ];

  OracleParams oracle = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"oracle\""
  ];
}

// NicknameParams defines the parameters related to the profiles nicknames
message NicknameParams {
  option (gogoproto.goproto_getters) = false;

  bytes min_length = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"min_length\""
  ];

  bytes max_length = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_length\""
  ];
}

// DTagParams defines the parameters related to profile DTags
message DTagParams {
  option (gogoproto.goproto_getters) = false;

  string reg_ex = 1 [ (gogoproto.moretags) = "yaml:\"reg_ex\"" ];

  bytes min_length = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"min_length\"",
    (gogoproto.customname) = "MinLength"
  ];

  bytes max_length = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_length\"",
    (gogoproto.customname) = "MaxLength"
  ];
}

// BioParams defines the parameters related to profile biography
message BioParams {
  option (gogoproto.goproto_getters) = false;

  bytes max_length = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_length\""
  ];
}

// OracleParams defines the parameters related to the oracle
// that will be used to verify the ownership of a centralized
// application account by a Desmos profile
message OracleParams {
  option (gogoproto.goproto_getters) = false;

  // ScriptID represents the ID of the oracle script to be called to verify the
  // data
  uint64 script_id = 1 [
    (gogoproto.customname) = "ScriptID",
    (gogoproto.moretags) = "yaml:\"script_id\""
  ];

  // AskCount represents the number of oracles to which ask to verify the data
  uint64 ask_count = 2 [ (gogoproto.moretags) = "yaml:\"ask_count\"" ];

  // MinCount represents the minimum count of oracles that should complete the
  // verification successfully
  uint64 min_count = 3 [ (gogoproto.moretags) = "yaml:\"min_count\"" ];

  // PrepareGas represents the amount of gas to be used during the preparation
  // stage of the oracle script
  uint64 prepare_gas = 4 [ (gogoproto.moretags) = "yaml:\"prepare_gas\"" ];

  // ExecuteGas represents the amount of gas to be used during the execution of
  // the oracle script
  uint64 execute_gas = 5 [ (gogoproto.moretags) = "yaml:\"execute_gas\"" ];

  // FeeAmount represents the amount of fees to be payed in order to execute the
  // oracle script
  repeated cosmos.base.v1beta1.Coin fee_amount = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"fee_amount\""
  ];
}