syntax = "proto3";
package desmos.profiles.v2;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "desmos/profiles/v2/types.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/desmos-labs/desmos/v3/x/profiles/types";

// Query defines the gRPC querier service.
service Query {
  // Profile queries the profile of a specific user given their DTag or address.
  // If the queried user does not have a profile, the returned response will
  // contain a null profile.
  rpc Profile(QueryProfileRequest) returns (QueryProfileResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/profiles/{user}";
  }

  // IncomingDTagTransferRequests queries all the DTag transfers requests that
  // have been made towards the user with the given address
  rpc IncomingDTagTransferRequests(QueryIncomingDTagTransferRequestsRequest)
      returns (QueryIncomingDTagTransferRequestsResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/dtag_transfer_requests";
  }

  // ChainLinks queries the chain links associated to the given user, if
  // provided. Otherwise it queries all the chain links stored.
  rpc ChainLinks(QueryChainLinksRequest) returns (QueryChainLinksResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/chain-links";
  }

  // ChainLinkOwners queries for the owners of chain links, optionally searching
  // for a specific chain name and external address
  rpc ChainLinkOwners(QueryChainLinkOwnersRequest)
      returns (QueryChainLinkOwnersResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/chain-links/owners";
  }

  // ApplicationLinks queries the applications links associated to the given
  // user, if provided. Otherwise, it queries all the application links stored.
  rpc ApplicationLinks(QueryApplicationLinksRequest)
      returns (QueryApplicationLinksResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/app-links";
  }

  // ApplicationLinkByClientID queries a single application link for a given
  // client id.
  rpc ApplicationLinkByClientID(QueryApplicationLinkByClientIDRequest)
      returns (QueryApplicationLinkByClientIDResponse) {
    option (google.api.http).get =
        "/desmos/profiles/v2/app-links/clients/{client_id}";
  }

  // ApplicationLinkOwners queries for the owners of applications links,
  // optionally searching for a specific application and username.
  rpc ApplicationLinkOwners(QueryApplicationLinkOwnersRequest)
      returns (QueryApplicationLinkOwnersResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/app-links/owners";
  }

  // Params queries the profiles module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/desmos/profiles/v2/params";
  }
}

// QueryProfileRequest is the request type for the Query/Profile RPC method.
message QueryProfileRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address or DTag of the user to query the profile for
  string user = 1;
}

// QueryProfileResponse is the response type for the Query/Profile RPC method.
message QueryProfileResponse {
  google.protobuf.Any profile = 1
  [ (cosmos_proto.accepts_interface) = "AccountI" ];
}

// QueryIncomingDTagTransferRequestsRequest is the request type for the
// Query/IncomingDTagTransferRequests RPC endpoint
message QueryIncomingDTagTransferRequestsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // (optional) Receiver represents the address of the user to which query the
  // incoming requests for
  string receiver = 1;

  // Pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryIncomingDTagTransferRequestsResponse is the response type for the
// Query/IncomingDTagTransferRequests RPC method.
message QueryIncomingDTagTransferRequestsResponse {
  // Requests represent the list of all the DTag transfer requests made towards
  // the user
  repeated desmos.profiles.v2.DTagTransferRequest requests = 1
  [ (gogoproto.nullable) = false ];

  // Pagination defines the pagination response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryChainLinksRequest represents the request that should be used in order
// to retrieve the link associated with the provided user, for the given chain
// and having the given target address
message QueryChainLinksRequest {
  // (optional) User represents the Desmos address of the user to which search
  // the link for
  string user = 1;

  // (optional) ChainName contains the name of the chain to which search the
  // link for. Used only if user is also set
  string chain_name = 2;

  // (optional) Target must contain the external address to which query the link
  // for. Used only if chain name is also set
  string target = 3;

  // Pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryChainLinksResponse is the response type for the
// Query/ChainLinks RPC method.
message QueryChainLinksResponse {
  repeated ChainLink links = 1 [ (gogoproto.nullable) = false ];

  // Pagination defines the pagination response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryChainLinkOwnersRequest contains the data of the request that can
// be used to get chain link owners
message QueryChainLinkOwnersRequest {
  // (Optional) Chain name to search link owners of. If not specified, all
  // links stored will be searched instead.
  string chain_name = 1;

  // (Optional) External address to search for. This will only be used if the
  // chain name is specified as well
  string target = 2;

  // Pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryChainLinkOwnersResponse contains the data returned by the request
// allowing to get chain link owners.
message QueryChainLinkOwnersResponse {
  // ChainLinkOwnerDetails contains the details of a single chain link owner
  message ChainLinkOwnerDetails {
    string user = 1;
    string chain_name = 2;
    string target = 3;
  }

  // Addresses of the chain links owners
  repeated ChainLinkOwnerDetails owners = 1 [ (gogoproto.nullable) = false ];

  // Pagination defines the pagination response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryUserApplicationLinkRequest represents the request used when querying an
// application link using an application name and username for a given user
message QueryApplicationLinksRequest {
  // (Optional) User contains the Desmos profile address associated for which
  // the link should be searched for
  string user = 1;

  // (Optional) Application represents the application name associated with the
  // link. Used only if user is also set.
  string application = 2;

  // Username represents the username inside the application associated with the
  // link. Used only if application is also set.
  string username = 3;

  // Pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryApplicationLinksResponse represents the response to the query used
// to get the application links for a specific user
message QueryApplicationLinksResponse {
  repeated ApplicationLink links = 1 [ (gogoproto.nullable) = false ];

  // Pagination defines the pagination response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryApplicationLinkByClientIDRequest contains the data of the request that
// can be used to get an application link based on a client id
message QueryApplicationLinkByClientIDRequest {
  // ClientID represents the ID of the client to which search the link for
  string client_id = 1;
}

// QueryApplicationLinkByClientIDResponse contains the data returned by the
// request allowing to get an application link using a client id
message QueryApplicationLinkByClientIDResponse {
  ApplicationLink link = 1 [ (gogoproto.nullable) = false ];
}

// QueryApplicationLinkOwnersRequest contains the data of the request that can
// be used to get application link owners
message QueryApplicationLinkOwnersRequest {
  // (Optional) Application name to search link owners of. If not specified, all
  // links stored will be searched instead.
  string application = 1;

  // (Optional) Username to search for. This will only be used if the
  // application is specified as well
  string username = 2;

  // Pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryApplicationLinkOwnersResponse contains the data returned by the request
// allowing to get application link owners.
message QueryApplicationLinkOwnersResponse {
  // ApplicationLinkOwnerDetails contains the details of a single application
  // link owner
  message ApplicationLinkOwnerDetails {
    string user = 1;
    string application = 2;
    string username = 3;
  }

  // Addresses of the application links owners
  repeated ApplicationLinkOwnerDetails owners = 1
  [ (gogoproto.nullable) = false ];

  // Pagination defines the pagination response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC endpoint
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  desmos.profiles.v2.Params params = 1 [ (gogoproto.nullable) = false ];
}