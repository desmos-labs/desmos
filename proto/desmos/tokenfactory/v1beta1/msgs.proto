syntax = "proto3";
package desmos.tokenfactory.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "desmos/tokenfactory/v1beta1/params.proto";

option go_package = "github.com/desmos-labs/desmos/v5/x/tokenfactory/types";

// Msg defines the tokefactory module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateDenom allows an account to create a new denom for subspace. It
  // requires a subspace and a sub denomination. The (subspace_treasury_address,
  // sub_denomination) tuple must be unique and cannot be re-used.
  //
  // The resulting denom created is defined as
  // <factory/{treasuryAddress}/{subdenom}>. The resulting denom's admin is
  // originally set to be the subspace treasury account, and this can not be
  // changed later.
  rpc CreateDenom(MsgCreateDenom) returns (MsgCreateDenomResponse);

  // Mint allows subspace admins to mint more of a token.
  // For now, we only support minting to the treasury account.
  rpc Mint(MsgMint) returns (MsgMintResponse);

  // Burn allows an admin account to burn a token.
  // For now, we only support burning from the treasury account.
  rpc Burn(MsgBurn) returns (MsgBurnResponse);

  // SetDenomMetadata allows subspace admins to set the denom's bank metadata.
  rpc SetDenomMetadata(MsgSetDenomMetadata)
      returns (MsgSetDenomMetadataResponse);

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateDenom represents the message to be used to create a denom for
// subspace
message MsgCreateDenom {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // subdenom can be up to 44 "alphanumeric" characters long.
  string subdenom = 2 [ (gogoproto.moretags) = "yaml:\"subdenom\"" ];

  uint64 subspace_id = 3 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgCreateDenomResponse represents the Msg/CreateDenom response type
// It returns the full string of the newly created denom
message MsgCreateDenomResponse {
  string new_token_denom = 1 [ (gogoproto.moretags) = "yaml:\"new_token_denom\"" ];
}

// MsgMint represents the message to be used to mint subspace tokens to treasury
// account
message MsgMint {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];

  string mintToAddress = 3 [ (gogoproto.moretags) = "yaml:\"mint_to_address\"" ];

  uint64 subspace_id = 4 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgMintResponse represents the Msg/Mint response type
message MsgMintResponse {}

// MsgBurn represents the message to be used to burn subspace tokens from
// treasury account
message MsgBurn {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];

  string burnFromAddress = 3 [ (gogoproto.moretags) = "yaml:\"burn_from_address\"" ];

  uint64 subspace_id = 4 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgBurnResponse represents the Msg/Burn response type
message MsgBurnResponse {}

// MsgSetDenomMetadata represents the message to be used to set the subspace
// token's bank metadata
message MsgSetDenomMetadata {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  cosmos.bank.v1beta1.Metadata metadata = 2 [
    (gogoproto.moretags) = "yaml:\"metadata\"",
    (gogoproto.nullable) = false
  ];

  uint64 subspace_id = 3 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];
}

// MsgSetDenomMetadataResponse represents the Msg/SetDenomMetadata response type
message MsgSetDenomMetadataResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ 
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString" 
  ];

  // params defines the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ 
    (gogoproto.moretags) = "yaml:\"params\"",  
    (gogoproto.nullable) = false
  ];
}

// MsgUpdateParamsResponse represents the Msg/UpdateParams response type
message MsgUpdateParamsResponse {}