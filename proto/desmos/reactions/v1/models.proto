syntax = "proto3";
package desmos.reactions.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/desmos-labs/desmos/v4/x/reactions/types";

// Reaction contains the data of a single post reaction
message Reaction {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // Id of the subspace inside which the reaction has been put
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post to which the reaction is associated
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Id of the reaction within the post
  uint32 id = 3
      [ (gogoproto.customname) = "ID", (gogoproto.moretags) = "yaml:\"id\"" ];

  // Value of the reaction.
  google.protobuf.Any value = 4 [
    (gogoproto.moretags) = "yaml:\"value\"",
    (cosmos_proto.accepts_interface) = "ReactionValue"
  ];

  // Author of the reaction
  string author = 5 [ (gogoproto.moretags) = "yaml:\"author\"" ];
}

// RegisteredReactionValue contains the details of a reaction value that
// references a reaction registered within the subspace
message RegisteredReactionValue {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (cosmos_proto.implements_interface) = "ReactionValue";

  // Id of the registered reaction
  uint32 registered_reaction_id = 1 [
    (gogoproto.customname) = "RegisteredReactionID",
    (gogoproto.moretags) = "yaml:\"registered_reaction_id\""
  ];
}

// FreeTextValue contains the details of a reaction value that
// is made of free text
message FreeTextValue {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;
  option (cosmos_proto.implements_interface) = "ReactionValue";

  string text = 1 [ (gogoproto.moretags) = "yaml:\"text\"" ];
}

// RegisteredReaction contains the details of a registered reaction within a
// subspace
message RegisteredReaction {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // Id of the subspace for which this reaction has been registered
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the registered reaction
  uint32 id = 2
      [ (gogoproto.customname) = "ID", (gogoproto.moretags) = "yaml:\"id\"" ];

  // Unique shorthand code associated to this reaction
  string shorthand_code = 3
      [ (gogoproto.moretags) = "yaml:\"shorthand_code\"" ];

  // Value that should be displayed when using this reaction
  string display_value = 4 [ (gogoproto.moretags) = "yaml:\"display_value\"" ];
}

// SubspaceReactionsParams contains the params related to a single subspace
// reactions
message SubspaceReactionsParams {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // Id of the subspace for which these params are valid
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Params related to RegisteredReactionValue reactions
  RegisteredReactionValueParams registered_reaction = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"registered_reaction\""
  ];

  // Params related to FreeTextValue reactions
  FreeTextValueParams free_text = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"free_text\""
  ];
}

// FreeTextValueParams contains the params for FreeTextValue based reactions
message FreeTextValueParams {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // Whether FreeTextValue reactions should be enabled
  bool enabled = 1 [ (gogoproto.moretags) = "yaml:\"enabled\"" ];

  // The max length that FreeTextValue reactions should have
  uint32 max_length = 2 [ (gogoproto.moretags) = "yaml:\"max_length\"" ];

  // RegEx that each FreeTextValue should respect.
  // This is useful to limit what characters can be used as a reaction.
  string reg_ex = 3 [ (gogoproto.moretags) = "yaml:\"reg_ex\"" ];
}

// RegisteredReactionValueParams contains the params for RegisteredReactionValue
// based reactions
message RegisteredReactionValueParams {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = true;

  // Whether RegisteredReactionValue reactions should be enabled
  bool enabled = 1 [ (gogoproto.moretags) = "yaml:\"enabled\"" ];
}