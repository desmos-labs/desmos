syntax = "proto3";
package desmos.ibc.applications.profiles.v1;

option go_package = "github.com/desmos-labs/desmos/x/ibc/applications/profiles/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "ibc/core/client/v1/client.proto";
import "google/protobuf/timestamp.proto";

// ApplicationData contains the data of a generic centralized application
message ApplicationData {
  option (gogoproto.equal) = true;

  // The application name (eg. Twitter, GitHub, etc)
  string name = 1;
  // Username on the application (eg. Twitter tag, GitHub profile, etc)
  string username = 2;
}

// VerificationData contains the data of a single verification
message VerificationData {
  option (gogoproto.equal) = true;

  // The method uses to verify the social account ownership (eg. tweet, gist,
  // etc.)
  string method = 1 [ (gogoproto.moretags) = "yaml:\"method\"" ];
  // The value used to verify the social account ownership (eg. Twitter tweet
  // id, GitHub gist id, etc)
  string value = 2 [ (gogoproto.moretags) = "yaml:\"value\"" ];
}

// ApplicationLink contains the data of a link to a centralized application
message ApplicationLink {
  option (gogoproto.equal) = true;

  // User that has created the connection
  string user = 1;
  // Application to which the user has connected
  ApplicationData application = 2;
  // Data used to verify the connection
  VerificationData verification = 3;
  // State of the connection
  ApplicationLinkState state = 4;
  // OracleRequest represents the request that has been made to the oracle
  OracleRequest oracle_request = 5;
  // Data coming from the result of the verification.
  // Only available when the state is STATE_SUCCESS
  ApplicationLinkResult result = 6;
  // Creation time of the connection
  google.protobuf.Timestamp creation_time = 7
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

// OracleRequest represents a generic oracle request
message OracleRequest {
  option (gogoproto.equal) = true;

  // ID is the ID of the request
  int64 id = 1 [
    (gogoproto.customname) = "ID"
  ];
  // OracleScriptID is ID of an oracle script
  int64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID"
  ];
  // ClientID represents the ID of the client that has called the oracle script
  string client_id = 3;
}

// ApplicationLinkState defines if an application link is in the following states:
// STARTED, ERRORED, SUCCESSFUL, TIMED_OUT
enum ApplicationLinkState {
  option (gogoproto.goproto_enum_prefix) = false;

  // Default State
  APPLICATION_LINK_STATE_UNINITIALIZED_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "APPLICATION_LINK_STATE_UNINITIALIZED" ];
  // A connection has just been started
  APPLICATION_LINK_STATE_STARTED = 1 [ (gogoproto.enumvalue_customname) = "APPLICATION_LINK_STATE_STARTED" ];
  // A connection has errored during the verification
  APPLICATION_LINK_STATE_ERROR = 2 [ (gogoproto.enumvalue_customname) = "APPLICATION_LINK_STATE_ERROR" ];
  // A connection has been verified successfully
  APPLICATION_LINK_STATE_SUCCESS = 3 [ (gogoproto.enumvalue_customname) = "APPLICATION_LINK_STATE_SUCCESS" ];
  // A connection has timed out during the verification
  APPLICATION_LINK_STATE_TIMED_OUT = 4 [ (gogoproto.enumvalue_customname) = "APPLICATION_LINK_STATE_TIMEOUT" ];
}

// Result represents a verification result
message ApplicationLinkResult {
  option (gogoproto.equal) = true;

  // sum is the oneof that specifies whether this represents a success or
  // failure result
  oneof sum {
    // success represents a successful verification
    Success success = 1;

    // failed represents a failed verification
    Failed failed = 2;
  }

  // Single is the signature data for a single signer
  message Success {
    option (gogoproto.equal) = true;

    // Value that has be signed by the profile
    string value = 1;
    // Signature that has been produced by signing the value
    string signature = 2;
  }

  // Multi is the signature data for a multisig public key
  message Failed {
    option (gogoproto.equal) = true;

    // Error that is associated with the failure
    string error = 1;
  }
}