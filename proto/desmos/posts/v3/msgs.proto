syntax = "proto3";
package desmos.posts.v3;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "desmos/posts/v3/models.proto";

option go_package = "github.com/desmos-labs/desmos/v5/x/posts/types";

// Msg defines the posts Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreatePost allows to create a new post
  rpc CreatePost(MsgCreatePost) returns (MsgCreatePostResponse);

  // EditPost allows to edit an existing post
  rpc EditPost(MsgEditPost) returns (MsgEditPostResponse);

  // DeletePost allows to delete an existing post
  rpc DeletePost(MsgDeletePost) returns (MsgDeletePostResponse);

  // AddPostAttachment allows to add a new attachment to a post
  rpc AddPostAttachment(MsgAddPostAttachment)
      returns (MsgAddPostAttachmentResponse);

  // RemovePostAttachment allows to remove an attachment from a post
  rpc RemovePostAttachment(MsgRemovePostAttachment)
      returns (MsgRemovePostAttachmentResponse);

  // AnswerPoll allows to answer a post poll
  rpc AnswerPoll(MsgAnswerPoll) returns (MsgAnswerPollResponse);

  // UpdateParams defines a (governance) operation for updating the module
  // parameters.
  // The authority defaults to the x/gov module account.
  //
  // Since: Desmos 5.0.0
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // MovePost allows users to move their own posts to another subspace
  //
  // Since: Desmos 6.0.0
  rpc MovePost(MsgMovePost) returns (MsgMovePostResponse);

  // RequestPostOwnerTransfer allows sender to send a request to transfer a post
  // ownership to receiver
  //
  // Since: Desmos 6.0.0
  rpc RequestPostOwnerTransfer(MsgRequestPostOwnerTransfer)
      returns (MsgRequestPostOwnerTransferResponse);

  // CancelPostOwnerTransferRequest allows sender to cancel an outgoing post
  // owner transfer request
  //
  // Since: Desmos 6.0.0
  rpc CancelPostOwnerTransferRequest(MsgCancelPostOwnerTransferRequest)
      returns (MsgCancelPostOwnerTransferRequestResponse);

  // AcceptPostOwnerTransferRequest allows receiver to accept an incoming post
  // transfer request
  //
  // Since: Desmos 6.0.0
  rpc AcceptPostOwnerTransferRequest(MsgAcceptPostOwnerTransferRequest)
      returns (MsgAcceptPostOwnerTransferRequestResponse);

  // RefusePostOwnerTransferRequest allows receiver to refuse an incoming post
  // transfer request
  //
  // Since: Desmos 6.0.0
  rpc RefusePostOwnerTransferRequest(MsgRefusePostOwnerTransferRequest)
      returns (MsgRefusePostOwnerTransferRequestResponse);
}

// MsgCreatePost represents the message to be used to create a post.
message MsgCreatePost {
  option (cosmos.msg.v1.signer) = "author";
  option (amino.name)           = "desmos/MsgCreatePost";

  // Id of the subspace inside which the post must be created
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the section inside which the post must be created
  uint32 section_id = 2 [
    (gogoproto.customname) = "SectionID",
    (gogoproto.moretags) = "yaml:\"section_id\""
  ];

  // (optional) External id for this post
  string external_id = 3 [
    (gogoproto.customname) = "ExternalID",
    (gogoproto.moretags) = "yaml:\"external_id\""
  ];

  // (optional) Text of the post
  string text = 4 [ (gogoproto.moretags) = "yaml:\"text\"" ];

  // (optional) Entities connected to this post
  Entities entities = 5 [ (gogoproto.moretags) = "yaml:\"entities\"" ];

  // Tags connected to this post
  repeated string tags = 6 [ (gogoproto.moretags) = "yaml:\"tags\"" ];

  // Attachments of the post
  repeated google.protobuf.Any attachments = 7 [
    (cosmos_proto.accepts_interface) = "desmos.posts.v3.AttachmentContent",
    (gogoproto.moretags) = "yaml:\"attachments\""
  ];

  // Author of the post
  string author = 8 [
    (gogoproto.moretags) = "yaml:\"author\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // (optional) Id of the original post of the conversation
  uint64 conversation_id = 9 [
    (gogoproto.customname) = "ConversationID",
    (gogoproto.moretags) = "yaml:\"conversation_id\""
  ];

  // Reply settings of this post
  ReplySetting reply_settings = 10
      [ (gogoproto.moretags) = "yaml:\"reply_settings\"" ];

  // A list this posts references (either as a reply, repost or quote)
  repeated PostReference referenced_posts = 11 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"referenced_posts\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgCreatePostResponse defines the Msg/CreatePost response type.
message MsgCreatePostResponse {
  // Id of the newly created post
  uint64 post_id = 1 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Creation date of the post
  google.protobuf.Timestamp creation_date = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"creation_date\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgEditPost represents the message to be used to edit a post.
message MsgEditPost {
  option (cosmos.msg.v1.signer) = "editor";
  option (amino.name)           = "desmos/MsgEditPost";

  // Id of the subspace inside which the post is
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post to edit
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // New text of the post. If set to [do-not-modify] it will change the current
  // post's text.
  string text = 3 [ (gogoproto.moretags) = "yaml:\"text\"" ];

  // New entities connected to this post. These will always replace the current
  // post's entities
  Entities entities = 4 [ (gogoproto.moretags) = "yaml:\"entities\"" ];

  // New tags connected to this post. These will always replace the current
  // post's tags
  repeated string tags = 5 [ (gogoproto.moretags) = "yaml:\"tags\"" ];

  // Editor of the post
  string editor = 6 [
    (gogoproto.moretags) = "yaml:\"editor\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgCreatePostResponse defines the Msg/EditPost response type.
message MsgEditPostResponse {
  // Edit date of the post
  google.protobuf.Timestamp edit_date = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"edit_date\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgDeletePost represents the message used when deleting a post.
message MsgDeletePost {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name)           = "desmos/MsgDeletePost";

  // Id of the subspace containing the post
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post to be deleted
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // User that is deleting the post
  string signer = 3 [
    (gogoproto.moretags) = "yaml:\"signer\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgDeletePostResponse represents the Msg/DeletePost response type
message MsgDeletePostResponse {}

// MsgAddPostAttachment represents the message that should be
// used when adding an attachment to post
message MsgAddPostAttachment {
  option (cosmos.msg.v1.signer) = "editor";
  option (amino.name)           = "desmos/MsgAddPostAttachment";

  // Id of the subspace containing the post
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post to which to add the attachment
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Content of the attachment
  google.protobuf.Any content = 3 [
    (cosmos_proto.accepts_interface) = "desmos.posts.v3.AttachmentContent",
    (gogoproto.moretags) = "yaml:\"content\""
  ];

  // Editor of the post
  string editor = 4 [
    (gogoproto.moretags) = "yaml:\"editor\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgAddPostAttachmentResponse defines the Msg/AddPostAttachment response type.
message MsgAddPostAttachmentResponse {
  // New id of the uploaded attachment
  uint32 attachment_id = 1 [
    (gogoproto.customname) = "AttachmentID",
    (gogoproto.moretags) = "yaml:\"attachment_id\""
  ];

  // Edit date of the post
  google.protobuf.Timestamp edit_date = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"edit_date\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgRemovePostAttachment represents the message to be used when
// removing an attachment from a post
message MsgRemovePostAttachment {
  option (cosmos.msg.v1.signer) = "editor";
  option (amino.name)           = "desmos/MsgRemovePostAttachment";

  // Id of the subspace containing the post
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post from which to remove the attachment
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Id of the attachment to be removed
  uint32 attachment_id = 3 [
    (gogoproto.customname) = "AttachmentID",
    (gogoproto.moretags) = "yaml:\"attachment_id\""
  ];

  // User that is removing the attachment
  string editor = 4 [
    (gogoproto.moretags) = "yaml:\"editor\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgRemovePostAttachmentResponse defines the
// Msg/RemovePostAttachment response type.
message MsgRemovePostAttachmentResponse {
  // Edit date of the post
  google.protobuf.Timestamp edit_date = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"edit_date\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgAnswerPoll represents the message used to answer a poll
message MsgAnswerPoll {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name)           = "desmos/MsgAnswerPoll";

  // Id of the subspace containing the post
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post that contains the poll to be answered
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Id of the poll to be answered
  uint32 poll_id = 3 [
    (gogoproto.customname) = "PollID",
    (gogoproto.moretags) = "yaml:\"poll_id\""
  ];

  // Indexes of the answer inside the ProvidedAnswers array
  repeated uint32 answers_indexes = 4
      [ (gogoproto.moretags) = "yaml:\"answers_indexes\"", (amino.dont_omitempty) = true ];

  // Address of the user answering the poll
  string signer = 5 [
    (gogoproto.moretags) = "yaml:\"signer\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgAnswerPollResponse represents the MSg/AnswerPoll response type
message MsgAnswerPollResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: Desmos 5.0.0
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "desmos/x/posts/MsgUpdateParams";


  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // params defines the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: Desmos 5.0.0
message MsgUpdateParamsResponse {}

// MsgMovePost moves a post to another subspace
//
// Since: Desmos 6.0.0
message MsgMovePost {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "desmos/MsgMovePost";

  // Id of the subspace where the post is currently located
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post to be moved
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Id of the target subspace to which the post will be moved
  uint64 target_subspace_id = 3 [
    (gogoproto.customname) = "TargetSubspaceID",
    (gogoproto.moretags) = "yaml:\"target_subspace_id\""
  ];

  // Id of the target section to which the post will be moved
  uint32 target_section_id = 4 [
    (gogoproto.customname) = "TargetSectionID",
    (gogoproto.moretags) = "yaml:\"target_section_id\""
  ];

  // Address of the post owner
  string owner = 5 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.moretags) = "yaml:\"owner\""
  ];
}

// MsgMovePostResponse defines the Msg/MsgMovePost response type
//
// Since: Desmos 6.0.0
message MsgMovePostResponse {
  // New id of the post in the target subspace
  uint64 post_id = 1 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];
}

// MsgRequestPostOwnerTransfer represent a message used to transfer a post
// ownership to receiver
//
// Since: Desmos 6.0.0
message MsgRequestPostOwnerTransfer {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "desmos/MsgRequestPostOwnerTransfer";

  // Id of the subspace that holds the post which ownership should be transfered
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post which will be transferred
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Address of the post ownership receiver
  string receiver = 3 [
    (gogoproto.moretags) = "yaml:\"receiver\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Address of the sender who is creating a transfer request
  string sender = 4 [
    (gogoproto.moretags) = "yaml:\"sender\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgRequestPostOwnerTransferResponse defines the Msg/RequestPostOwnerTransfer
// response type
//
// Since: Desmos 6.0.0
message MsgRequestPostOwnerTransferResponse {}

// MsgCancelPostOwnerTransferRequest represents a message used to cancel a
// outgoing post transfer request
//
// Since: Desmos 6.0.0
message MsgCancelPostOwnerTransferRequest {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "desmos/MsgCancelPostOwnerTransferRequest";

  // Id of the subspace that holds the post for which the request should be
  // canceled
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post for which the request will be cancelled
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Address of the transfer request sender
  string sender = 3 [
    (gogoproto.moretags) = "yaml:\"sender\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgCancelPostOwnerTransferRequestResponse defines the
// Msg/CancelPostOwnerTransferRequest response type
//
// Since: Desmos 6.0.0
message MsgCancelPostOwnerTransferRequestResponse {}

// MsgAcceptPostOwnerTransferRequest represents a message used to accept a
// incoming post transfer request
//
// Since: Desmos 6.0.0
message MsgAcceptPostOwnerTransferRequest {
  option (cosmos.msg.v1.signer) = "receiver";
  option (amino.name)           = "desmos/MsgAcceptPostOwnerTransferRequest";

  // Id of the subspace holding the post for which the request will be accepted
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post for which the request will be accepted
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Address of the request receiver
  string receiver = 3 [
    (gogoproto.moretags) = "yaml:\"receiver\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgAcceptPostOwnerTransferRequestResponse defines the
// Msg/AcceptPostOwnerTransferRequest response type
//
// Since: Desmos 6.0.0
message MsgAcceptPostOwnerTransferRequestResponse {}

// MsgRefusePostOwnerTransferRequest represents a message used to refuse a
// incoming post transfer request
//
// Since: Desmos 6.0.0
message MsgRefusePostOwnerTransferRequest {
  option (cosmos.msg.v1.signer) = "receiver";
  option (amino.name)           = "desmos/MsgRefusePostOwnerTransferRequest";

  // Id of the subspace holding the post for which the request will be refused
  uint64 subspace_id = 1 [
    (gogoproto.customname) = "SubspaceID",
    (gogoproto.moretags) = "yaml:\"subspace_id\""
  ];

  // Id of the post for which the request will be refused
  uint64 post_id = 2 [
    (gogoproto.customname) = "PostID",
    (gogoproto.moretags) = "yaml:\"post_id\""
  ];

  // Address of the request receiver
  string receiver = 3 [
    (gogoproto.moretags) = "yaml:\"receiver\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgRefusePostOwnerTransferRequest defines the
// Msg/RefusePostOwnerTransferRequest response type
//
// Since: Desmos 6.0.0
message MsgRefusePostOwnerTransferRequestResponse {}
