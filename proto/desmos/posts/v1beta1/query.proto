syntax = "proto3";
package desmos.posts.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "desmos/posts/v1beta1/posts.proto";
import "desmos/posts/v1beta1/reactions.proto";
import "desmos/posts/v1beta1/polls.proto";
import "desmos/posts/v1beta1/params.proto";

option go_package = "github.com/desmos-labs/desmos/x/posts/types";

// Query defines the gRPC querier service.
service Query {
  // Posts queries all the stored posts
  rpc Posts(QueryPostsRequest) returns (QueryPostsResponse) {
    option (google.api.http).get = "/desmos/posts/v1beta1/posts";
  }

  // Post queries a specific post
  rpc Post(QueryPostRequest) returns (QueryPostResponse) {
    option (google.api.http).get = "/desmos/posts/v1beta1/posts/{post_id}";
  }

  // PollAnswers queries the poll answers of the post having a specific id
  rpc PollAnswers(QueryPollAnswersRequest) returns (QueryPollAnswersResponse) {
    option (google.api.http).get =
        "/desmos/posts/v1beta1/posts/{post_id}/answers";
  }

  // RegisteredReactions queries all the registered reactions
  rpc RegisteredReactions(QueryRegisteredReactionsRequest)
      returns (QueryRegisteredReactionsResponse) {
    option (google.api.http).get =
        "/desmos/posts/v1beta1/posts/registered-reactions";
  }

  // Params queries the posts module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/desmos/posts/v1beta1/posts/params";
  }
}

// ___________________________________________________________________________________________________________________

// QueryPostsParams represent the parameters used to query for posts
message QueryPostsParams {
  uint64 page = 1;
  uint64 limit = 2;

  string sort_by = 3;
  string sort_order = 4;

  string parent_id = 5;
  google.protobuf.Timestamp creation_time = 6 [(gogoproto.stdtime) = true];
  string subspace = 7;
  string creator = 8;
  repeated string hashtags = 9;
}

// ___________________________________________________________________________________________________________________

// QueryPostsRequest is the request type for the Query/Posts RPC method.
message QueryPostsRequest {
  string sort_by = 1;
  string sort_order = 2;

  string parent_id = 3;
  google.protobuf.Timestamp creation_time = 4 [(gogoproto.stdtime) = true];
  string subspace = 5;
  string creator = 6;
  repeated string hashtags = 7;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 8;
}

// QueryPostsResponse is the response type for the Query/Posts RPC method
message QueryPostsResponse {
  repeated QueryPostResponse posts = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ___________________________________________________________________________________________________________________

// QueryPostRequest is the request type for the Query/Post RPC method.
message QueryPostRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string post_id = 1;
}

// QueryPostResponse is the response type for the Query/Post RPC method
message QueryPostResponse {
  desmos.posts.v1beta1.Post post = 1 [ (gogoproto.nullable) = false ];

  repeated desmos.posts.v1beta1.UserAnswer poll_answers = 2
      [ (gogoproto.nullable) = false ];

  repeated desmos.posts.v1beta1.PostReaction reactions = 3
      [ (gogoproto.nullable) = false ];

  repeated string children = 4;
}

// ___________________________________________________________________________________________________________________

// QueryPollAnswersRequest is the request type for the Query/PollAnswers RPC
// method.
message QueryPollAnswersRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string post_id = 1;
}

// QueryPollAnswersResponse is the response type for the Query/PollAnswers RPC
// method
message QueryPollAnswersResponse {
  string post_id = 1;
  repeated desmos.posts.v1beta1.UserAnswer answers = 2
      [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// QueryRegisteredReactionsRequest is the request type for the
// Query/RegisteredReactions RPC method.
message QueryRegisteredReactionsRequest {}

// QueryRegisteredReactionsResponse is the response type for the
// Query/RegisteredReactions RPC method
message QueryRegisteredReactionsResponse {
  repeated desmos.posts.v1beta1.RegisteredReaction registered_reactions = 1
      [ (gogoproto.nullable) = false ];
}

// ___________________________________________________________________________________________________________________

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryParamsResponse {
  desmos.posts.v1beta1.Params params = 1 [ (gogoproto.nullable) = false ];
}
