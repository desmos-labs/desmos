syntax = "proto3";
package desmos.subspaces.v3;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

import "desmos/subspaces/v3/models.proto";

option go_package = "github.com/desmos-labs/desmos/v4/x/subspaces/types";

// Query defines the gRPC querier service
service Query {

  // Subspaces queries all the subspaces inside Desmos
  rpc Subspaces(QuerySubspacesRequest) returns (QuerySubspacesResponse) {
    option (google.api.http).get = "/desmos/subspaces/v3/subspaces";
  }

  // Subspace queries all the information about the subspace with the given id
  rpc Subspace(QuerySubspaceRequest) returns (QuerySubspaceResponse) {
    option (google.api.http).get =
        "/desmos/subspaces/v3/subspaces/{subspace_id}";
  }

  // Sections allows to query for the sections of a specific subspace
  rpc Sections(QuerySectionsRequest) returns (QuerySectionsResponse) {
    option (google.api.http).get =
        "/desmos/subspaces/v3/{subspace_id}/sections";
  }

  // Section queries all the information about the section with the given id
  rpc Section(QuerySectionRequest) returns (QuerySectionResponse) {
    option (google.api.http).get =
        "/desmos/subspaces/v3/{subspace_id}/sections/{section_id}";
  }

  // UserGroups queries all the groups that are present inside the subspace with
  // the given id
  rpc UserGroups(QueryUserGroupsRequest) returns (QueryUserGroupsResponse) {
    option (google.api.http).get =
        "/desmos/subspaces/v3/subspaces/{subspace_id}/groups";
  }

  // UserGroup queries the user group having the given id inside the specific
  // subspace
  rpc UserGroup(QueryUserGroupRequest) returns (QueryUserGroupResponse) {
    option (google.api.http).get =
        "/desmos/subspaces/v3/subspaces/{subspace_id}/groups/{group_id}";
  }

  // UserGroupMembers queries all the members of a given user group
  rpc UserGroupMembers(QueryUserGroupMembersRequest)
      returns (QueryUserGroupMembersResponse) {
    option (google.api.http).get = "/desmos/subspaces/v3/subspaces/"
                                   "{subspace_id}/groups/{group_id}/members";
  }

  // UserPermissions queries the permissions for the given user
  rpc UserPermissions(QueryUserPermissionsRequest)
      returns (QueryUserPermissionsResponse) {
    option (google.api.http).get =
        "/desmos/subspaces/v3/subspaces/{subspace_id}/permissions/{user}";
  }
}

// --------------------------------------------------------------------------------------------------------------------

// QuerySubspacesRequest is the request type for the Query/Subspaces RPC method
message QuerySubspacesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySubspacesResponse is the response type for the Query/Subspaces RPC
// method
message QuerySubspacesResponse {
  repeated Subspace subspaces = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySubspace is the request type for the Query/Subspace RPC method
message QuerySubspaceRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Id of the subspace to query
  uint64 subspace_id = 1 [ (gogoproto.moretags) = "yaml:\"subspace_id\"" ];
}

// QuerySubspaceResponse is the response type for the Query/Subspace method
message QuerySubspaceResponse {
  Subspace subspace = 1 [ (gogoproto.nullable) = false ];
}

// --------------------------------------------------------------------------------------------------------------------

// QuerySectionsRequest is the request type for Query/Sections RPC method
message QuerySectionsRequest {
  // Id of the subspace to query the sections for
  uint64 subspace_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySectionsResponse is the response type for Query/Sections RPC method
message QuerySectionsResponse {
  repeated Section sections = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// --------------------------------------------------------------------------------------------------------------------

// QuerySectionRequest is the request type for Query/Section RPC method
message QuerySectionRequest {
  // Id of the subspace inside which to search for
  uint64 subspace_id = 1;

  // Id of the searched section
  uint32 section_id = 2;
}

// QuerySectionResponse is the response type for Query/Section RPC method
message QuerySectionResponse {
  Section section = 1 [ (gogoproto.nullable) = false ];
}

// --------------------------------------------------------------------------------------------------------------------

// QueryUserGroupsRequest is the request type for the Query/UserGroups RPC
// method
message QueryUserGroupsRequest {
  // Id of the subspace to query the groups for
  uint64 subspace_id = 1 [ (gogoproto.moretags) = "yaml:\"subspace_id\"" ];

  // (optional) Section id to query the groups for
  uint32 section_id = 2;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryUserGroupsResponse is the response type for the Query/UserGroups RPC
// method
message QueryUserGroupsResponse {
  repeated UserGroup groups = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryUserGroupRequest is the request type for the Query/UserGroup RPC method
message QueryUserGroupRequest {
  // Id of the subspace that contains the group
  uint64 subspace_id = 1 [ (gogoproto.moretags) = "yaml:\"subspace_id\"" ];

  // Id of the group to query
  uint32 group_id = 2 [ (gogoproto.moretags) = "yaml:\"group_id\"" ];
}

// QueryUserGroupResponse is the response type for the Query/UserGroup RPC
// method
message QueryUserGroupResponse {
  UserGroup group = 1 [ (gogoproto.nullable) = false ];
}

// QueryUserGroupMembersRequest is the request type for the
// Query/UserGroupMembers RPC method
message QueryUserGroupMembersRequest {
  // Id of the subspace that contains the group
  uint64 subspace_id = 1 [ (gogoproto.moretags) = "yaml:\"subspace_id\"" ];

  // Id of the user group to query the members for
  uint32 group_id = 2 [ (gogoproto.moretags) = "yaml:\"group_id\"" ];

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryUserGroupMembersResponse is the response type for the
// Query/UserGroupMembers RPC method
message QueryUserGroupMembersResponse {
  repeated string members = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// --------------------------------------------------------------------------------------------------------------------

// QueryUserPermissionsRequest is the request type for the Query/UserPermissions
// RPC method
message QueryUserPermissionsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Id of the subspace to query the permissions for
  uint64 subspace_id = 1 [ (gogoproto.moretags) = "yaml:\"subspace_id\"" ];

  // Id of the section to query the permissions for
  uint32 section_id = 2 [ (gogoproto.moretags) = "yaml:\"section_id\"" ];

  // Address of the user to query the permissions for
  string user = 3 [ (gogoproto.moretags) = "yaml:\"user\"" ];
}

// QueryUserPermissionsRequest is the response type for the
// Query/UserPermissions method
message QueryUserPermissionsResponse {
  repeated string permissions = 1
      [ (gogoproto.moretags) = "yaml:\"permissions\"" ];
  repeated PermissionDetail details = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"details\""
  ];
}

// PermissionDetail contains the details data of a permission
message PermissionDetail {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;

  // Id of the subspace for which this permission is valid
  uint64 subspace_id = 1;

  // Id of the section for which this permission is valid
  uint32 section_id = 2;

  // sum is the oneof that specifies whether this represents a user or
  // group permission detail
  oneof sum {
    // User represents a user permission
    User user = 3;

    // Group represents a group permission
    Group group = 4;
  }

  // User is a permission that has been set to a specific user
  message User {
    option (gogoproto.goproto_getters) = false;
    option (gogoproto.equal) = true;

    // User for which the permission was set
    string user = 1 [ (gogoproto.moretags) = "yaml:\"user\"" ];

    // Permissions set to the user
    repeated string permission = 2
        [ (gogoproto.moretags) = "yaml:\"permission\"" ];
  }

  // Group is a permission that has been set to a user group
  message Group {
    option (gogoproto.goproto_getters) = false;
    option (gogoproto.equal) = true;

    // Unique id of the group
    uint32 group_id = 1 [
      (gogoproto.customname) = "GroupID",
      (gogoproto.moretags) = "yaml:\"group_id\""
    ];

    // Permissions set to the group
    repeated string permission = 2;
  }
}