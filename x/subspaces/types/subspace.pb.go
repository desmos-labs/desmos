// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v1/subspace.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Subspace contains all the data of a Desmos subspace
type Subspace struct {
	// Unique SHA-256 string that identifies the subspace
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	// Human-readable name of the subspace
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// Optional description of this subspace
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// Represents the account that is associated with the subspace and
	// should be used to connect external applications to verify this subspace
	Treasury string `protobuf:"bytes,4,opt,name=treasury,proto3" json:"treasury,omitempty" yaml:"treasury"`
	// Address of the user that owns the subspace
	Owner string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// Address of the subspace creator
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	// the creation time of the subspace
	CreationTime time.Time `protobuf:"bytes,7,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
}

func (m *Subspace) Reset()         { *m = Subspace{} }
func (m *Subspace) String() string { return proto.CompactTextString(m) }
func (*Subspace) ProtoMessage()    {}
func (*Subspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b466175177a54c, []int{0}
}
func (m *Subspace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subspace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subspace.Merge(m, src)
}
func (m *Subspace) XXX_Size() int {
	return m.Size()
}
func (m *Subspace) XXX_DiscardUnknown() {
	xxx_messageInfo_Subspace.DiscardUnknown(m)
}

var xxx_messageInfo_Subspace proto.InternalMessageInfo

func (m *Subspace) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Subspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subspace) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Subspace) GetTreasury() string {
	if m != nil {
		return m.Treasury
	}
	return ""
}

func (m *Subspace) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Subspace) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Subspace) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Subspace)(nil), "desmos.subspaces.v1.Subspace")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v1/subspace.proto", fileDescriptor_64b466175177a54c)
}

var fileDescriptor_64b466175177a54c = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x1c, 0xc5, 0xeb, 0x5e, 0xef, 0xae, 0xe7, 0x1e, 0x1c, 0x72, 0x4f, 0x28, 0xea, 0x10, 0x57, 0x3e,
	0x09, 0x75, 0x80, 0x58, 0x57, 0x16, 0x74, 0x63, 0xc5, 0x82, 0xc4, 0x14, 0x98, 0x58, 0x90, 0x93,
	0x98, 0x60, 0xa9, 0x89, 0xa3, 0xd8, 0x29, 0x74, 0xe5, 0x13, 0xdc, 0xc8, 0x78, 0x1f, 0xe7, 0xc6,
	0x8e, 0x4c, 0x06, 0xa5, 0x0b, 0x73, 0x3e, 0xc1, 0x29, 0x76, 0x53, 0x65, 0xfb, 0xff, 0xdf, 0xfb,
	0xbd, 0xbf, 0xa2, 0x17, 0x43, 0x92, 0x70, 0x95, 0x49, 0x45, 0x55, 0x15, 0xa9, 0x82, 0xc5, 0x5c,
	0xd1, 0xcd, 0xed, 0x71, 0x09, 0x8a, 0x52, 0x6a, 0x89, 0xa6, 0x8e, 0x09, 0x8e, 0x4c, 0xb0, 0xb9,
	0x9d, 0x5d, 0xa7, 0x32, 0x95, 0xd6, 0xa7, 0xed, 0xe4, 0xd0, 0x19, 0x4e, 0xa5, 0x4c, 0xd7, 0x9c,
	0xda, 0x2d, 0xaa, 0xbe, 0x51, 0x2d, 0x32, 0xae, 0x34, 0xcb, 0x0a, 0x07, 0x90, 0x5f, 0x27, 0x70,
	0xfc, 0xe9, 0x70, 0x07, 0xdd, 0xc0, 0xa1, 0x48, 0x3c, 0x30, 0x07, 0x8b, 0xd1, 0x6a, 0x5a, 0x1b,
	0x3c, 0xfc, 0xf0, 0xbe, 0x31, 0xf8, 0x62, 0xcb, 0xb2, 0xf5, 0x1d, 0x11, 0x09, 0x09, 0x87, 0x22,
	0x41, 0x37, 0x70, 0x94, 0xb3, 0x8c, 0x7b, 0xc3, 0x39, 0x58, 0x5c, 0xac, 0xae, 0x1a, 0x83, 0x27,
	0x0e, 0x68, 0x55, 0x12, 0x5a, 0x13, 0xbd, 0x83, 0x93, 0x84, 0xab, 0xb8, 0x14, 0x85, 0x16, 0x32,
	0xf7, 0x4e, 0x2c, 0xfb, 0xb2, 0x31, 0x18, 0x39, 0xb6, 0x67, 0x92, 0xb0, 0x8f, 0x22, 0x0a, 0xc7,
	0xba, 0xe4, 0x4c, 0x55, 0xe5, 0xd6, 0x1b, 0xd9, 0xd8, 0xb4, 0x31, 0xf8, 0xca, 0xc5, 0x3a, 0x87,
	0x84, 0x47, 0x08, 0xbd, 0x82, 0xa7, 0xf2, 0x47, 0xce, 0x4b, 0xef, 0xd4, 0xd2, 0x2f, 0x1a, 0x83,
	0x2f, 0x1d, 0x6d, 0x65, 0x12, 0x3a, 0x1b, 0xbd, 0x86, 0xe7, 0x71, 0xc9, 0x99, 0x96, 0xa5, 0x77,
	0x66, 0x49, 0xd4, 0x18, 0xfc, 0xdc, 0x91, 0x07, 0x83, 0x84, 0x1d, 0x82, 0x18, 0x7c, 0x66, 0x47,
	0x21, 0xf3, 0xaf, 0x6d, 0x67, 0xde, 0xf9, 0x1c, 0x2c, 0x26, 0xcb, 0x59, 0xe0, 0x0a, 0x0d, 0xba,
	0x42, 0x83, 0xcf, 0x5d, 0xa1, 0xab, 0xf9, 0xa3, 0xc1, 0x83, 0xc6, 0xe0, 0xeb, 0xde, 0xcd, 0x2e,
	0x4e, 0xee, 0xff, 0x62, 0x10, 0x5e, 0x76, 0x5a, 0x1b, 0xba, 0x1b, 0xff, 0x7e, 0xc0, 0xe0, 0xff,
	0x03, 0x06, 0xab, 0x8f, 0x8f, 0xb5, 0x0f, 0x76, 0xb5, 0x0f, 0xfe, 0xd5, 0x3e, 0xb8, 0xdf, 0xfb,
	0x83, 0xdd, 0xde, 0x1f, 0xfc, 0xd9, 0xfb, 0x83, 0x2f, 0xcb, 0x54, 0xe8, 0xef, 0x55, 0x14, 0xc4,
	0x32, 0xa3, 0xee, 0xaf, 0xbf, 0x59, 0xb3, 0x48, 0x1d, 0x66, 0xba, 0x59, 0xd2, 0x9f, 0xbd, 0xa7,
	0xa2, 0xb7, 0x05, 0x57, 0xd1, 0x99, 0xfd, 0xb6, 0xb7, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0x97, 0xf2, 0x18, 0x4b, 0x02, 0x00, 0x00,
}

func (this *Subspace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subspace)
	if !ok {
		that2, ok := that.(Subspace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Treasury != that1.Treasury {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	return true
}
func (m *Subspace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSubspace(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Treasury) > 0 {
		i -= len(m.Treasury)
		copy(dAtA[i:], m.Treasury)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Treasury)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintSubspace(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubspace(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubspace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Subspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSubspace(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Treasury)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovSubspace(uint64(l))
	return n
}

func sovSubspace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubspace(x uint64) (n int) {
	return sovSubspace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subspace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubspace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subspace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subspace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasury", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treasury = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubspace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubspace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubspace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubspace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubspace
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubspace
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubspace
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubspace        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubspace          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubspace = fmt.Errorf("proto: unexpected end of group")
)
