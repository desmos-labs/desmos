// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v3/query_feegrant.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAllowancesRequest is the request type for the Query/Allowances
// RPC method
type QueryAllowancesRequest struct {
	// Id of the subspace for which to get the grant(s)
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// (optional) Address of the user that has granted an allowance
	Granter string `protobuf:"bytes,2,opt,name=granter,proto3" json:"granter,omitempty" yaml:"granter"`
	// Target that was granted an allowance
	Grantee *types.Any `protobuf:"bytes,3,opt,name=grantee,proto3" json:"grantee,omitempty" yaml:"grantee"`
	// pagination defines an pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllowancesRequest) Reset()         { *m = QueryAllowancesRequest{} }
func (m *QueryAllowancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowancesRequest) ProtoMessage()    {}
func (*QueryAllowancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9558844372f23e64, []int{0}
}
func (m *QueryAllowancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowancesRequest.Merge(m, src)
}
func (m *QueryAllowancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowancesRequest proto.InternalMessageInfo

// QueryAllowancesResponse is the response type for the Query/UserAllowances
// RPC method
type QueryAllowancesResponse struct {
	Grants []Grant `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants" yaml:"grants"`
	// pagination defines an pagination for the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllowancesResponse) Reset()         { *m = QueryAllowancesResponse{} }
func (m *QueryAllowancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowancesResponse) ProtoMessage()    {}
func (*QueryAllowancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9558844372f23e64, []int{1}
}
func (m *QueryAllowancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowancesResponse.Merge(m, src)
}
func (m *QueryAllowancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowancesResponse proto.InternalMessageInfo

func (m *QueryAllowancesResponse) GetGrants() []Grant {
	if m != nil {
		return m.Grants
	}
	return nil
}

func (m *QueryAllowancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAllowancesRequest)(nil), "desmos.subspaces.v3.QueryAllowancesRequest")
	proto.RegisterType((*QueryAllowancesResponse)(nil), "desmos.subspaces.v3.QueryAllowancesResponse")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v3/query_feegrant.proto", fileDescriptor_9558844372f23e64)
}

var fileDescriptor_9558844372f23e64 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0xa6, 0x55, 0x0b, 0x1b, 0xc1, 0x61, 0x29, 0x25, 0x44, 0x60, 0x47, 0x3e, 0x80, 0x41,
	0x74, 0x57, 0x4d, 0x90, 0x90, 0x7a, 0xab, 0x0f, 0x54, 0x95, 0x40, 0x02, 0x1f, 0xb9, 0x44, 0xeb,
	0x64, 0x6a, 0x2c, 0x39, 0xbb, 0x6e, 0xd6, 0x0e, 0xf8, 0x0f, 0x38, 0xf2, 0x09, 0xf9, 0x01, 0x6e,
	0x7c, 0x44, 0xc5, 0xa9, 0x47, 0x4e, 0x11, 0x4a, 0x2e, 0x9c, 0xf3, 0x05, 0x28, 0xbb, 0x6b, 0x30,
	0xa5, 0x12, 0xb7, 0x19, 0xbd, 0x37, 0x6f, 0xde, 0xbc, 0x5d, 0x1c, 0x8c, 0x41, 0x4d, 0xa4, 0x62,
	0xaa, 0x8c, 0x55, 0xce, 0x47, 0xa0, 0xd8, 0x6c, 0xc0, 0xce, 0x4b, 0x98, 0x56, 0xc3, 0x33, 0x80,
	0x64, 0xca, 0x45, 0x41, 0xf3, 0xa9, 0x2c, 0x24, 0xb9, 0x63, 0x98, 0xf4, 0x37, 0x93, 0xce, 0x06,
	0xdd, 0xbd, 0x44, 0x26, 0x52, 0xe3, 0x6c, 0x53, 0x19, 0x6a, 0xf7, 0x7e, 0x22, 0x65, 0x92, 0x01,
	0xd3, 0x5d, 0x5c, 0x9e, 0x31, 0x2e, 0x2a, 0x0b, 0x3d, 0xb0, 0x10, 0xcf, 0x53, 0xc6, 0x85, 0x90,
	0x05, 0x2f, 0x52, 0x29, 0x54, 0x3d, 0x38, 0x92, 0x9b, 0x1d, 0x43, 0xa3, 0x68, 0x1a, 0x0b, 0x3d,
	0x35, 0x1d, 0x8b, 0xb9, 0x02, 0x63, 0x90, 0xcd, 0x0e, 0x63, 0x28, 0xf8, 0x21, 0xcb, 0x79, 0x92,
	0x0a, 0xad, 0x63, 0xb9, 0x4f, 0xae, 0x3b, 0x6a, 0x22, 0xc7, 0x90, 0xa9, 0x2b, 0x57, 0xf9, 0xf3,
	0x16, 0xde, 0x7f, 0xbb, 0x51, 0x3b, 0xce, 0x32, 0xf9, 0x81, 0x8b, 0x11, 0xa8, 0x08, 0xce, 0x4b,
	0x50, 0x05, 0x79, 0x81, 0xdb, 0xb5, 0xc0, 0x30, 0x1d, 0x77, 0x50, 0x0f, 0x05, 0xdb, 0xe1, 0xfe,
	0x7a, 0xe1, 0x91, 0x8a, 0x4f, 0xb2, 0x23, 0xbf, 0x01, 0xfa, 0x11, 0xae, 0xbb, 0xd3, 0x31, 0x79,
	0x86, 0x77, 0xf5, 0x0a, 0x98, 0x76, 0x5a, 0x3d, 0x14, 0xdc, 0x0c, 0xc9, 0x7a, 0xe1, 0xdd, 0x36,
	0x43, 0x16, 0xf0, 0xa3, 0x9a, 0x42, 0x5e, 0xd7, 0x6c, 0xe8, 0x6c, 0xf5, 0x50, 0xd0, 0xee, 0xef,
	0x51, 0x93, 0x11, 0xad, 0xe3, 0xa3, 0xc7, 0xa2, 0x0a, 0x1f, 0x5e, 0xd5, 0x00, 0xff, 0xdb, 0xd7,
	0x83, 0xdd, 0x13, 0x53, 0xd7, 0x72, 0x40, 0x5e, 0x62, 0xfc, 0x27, 0x8f, 0xce, 0xb6, 0x56, 0x7c,
	0x44, 0x6d, 0x94, 0x9b, 0xf0, 0xa8, 0x0e, 0x8f, 0xda, 0xf0, 0xe8, 0x1b, 0x9e, 0x80, 0xbd, 0x38,
	0x6a, 0x4c, 0x1e, 0xdd, 0xf8, 0x34, 0xf7, 0x9c, 0x9f, 0x73, 0xcf, 0xf1, 0xbf, 0x20, 0x7c, 0xef,
	0x9f, 0x88, 0x54, 0x2e, 0x85, 0x02, 0x72, 0x8a, 0x77, 0xf4, 0x62, 0xd5, 0x41, 0xbd, 0xad, 0xa0,
	0xdd, 0xef, 0xd2, 0x6b, 0x7e, 0x09, 0xd5, 0x26, 0xc3, 0xbb, 0x17, 0x0b, 0xcf, 0x59, 0x2f, 0xbc,
	0x5b, 0x8d, 0x2b, 0x94, 0x1f, 0x59, 0x01, 0x72, 0xf2, 0x97, 0xf1, 0x96, 0x36, 0xfe, 0xf8, 0xbf,
	0xc6, 0x8d, 0x8f, 0xa6, 0xf3, 0xf0, 0xd5, 0xc5, 0xd2, 0x45, 0x97, 0x4b, 0x17, 0xfd, 0x58, 0xba,
	0xe8, 0xf3, 0xca, 0x75, 0x2e, 0x57, 0xae, 0xf3, 0x7d, 0xe5, 0x3a, 0xef, 0xfa, 0x49, 0x5a, 0xbc,
	0x2f, 0x63, 0x3a, 0x92, 0x13, 0x66, 0x7c, 0x1e, 0x64, 0x3c, 0x56, 0xb6, 0x66, 0xb3, 0xe7, 0xec,
	0x63, 0xe3, 0xcf, 0x14, 0x55, 0x0e, 0x2a, 0xde, 0xd1, 0xaf, 0x30, 0xf8, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x80, 0x63, 0xc3, 0xc5, 0x29, 0x03, 0x00, 0x00,
}

func (m *QueryAllowancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryFeegrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Grantee != nil {
		{
			size, err := m.Grantee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryFeegrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintQueryFeegrant(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0x12
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQueryFeegrant(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryFeegrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryFeegrant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryFeegrant(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryFeegrant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllowancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQueryFeegrant(uint64(m.SubspaceId))
	}
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovQueryFeegrant(uint64(l))
	}
	if m.Grantee != nil {
		l = m.Grantee.Size()
		n += 1 + l + sovQueryFeegrant(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQueryFeegrant(uint64(l))
	}
	return n
}

func (m *QueryAllowancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovQueryFeegrant(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQueryFeegrant(uint64(l))
	}
	return n
}

func sovQueryFeegrant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryFeegrant(x uint64) (n int) {
	return sovQueryFeegrant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllowancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryFeegrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grantee == nil {
				m.Grantee = &types.Any{}
			}
			if err := m.Grantee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryFeegrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryFeegrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, Grant{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryFeegrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryFeegrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryFeegrant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryFeegrant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryFeegrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryFeegrant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryFeegrant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryFeegrant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryFeegrant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryFeegrant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryFeegrant = fmt.Errorf("proto: unexpected end of group")
)
