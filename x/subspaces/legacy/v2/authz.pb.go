// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v2/authz/authz.proto

package v2

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenericSubspaceAuthorization defines an authorization to perform any
// operation only inside a specific subspace.
type GenericSubspaceAuthorization struct {
	// Ids of the subspaces inside which to grant the permission
	SubspacesIDs []uint64 `protobuf:"varint,1,rep,packed,name=subspaces_ids,json=subspacesIds,proto3" json:"subspaces_ids,omitempty"`
	// Msg, identified by it's type URL, to grant unrestricted permissions to
	// execute within the subspace
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *GenericSubspaceAuthorization) Reset()         { *m = GenericSubspaceAuthorization{} }
func (m *GenericSubspaceAuthorization) String() string { return proto.CompactTextString(m) }
func (*GenericSubspaceAuthorization) ProtoMessage()    {}
func (*GenericSubspaceAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_21914b81942bd86e, []int{0}
}
func (m *GenericSubspaceAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericSubspaceAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenericSubspaceAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenericSubspaceAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericSubspaceAuthorization.Merge(m, src)
}
func (m *GenericSubspaceAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *GenericSubspaceAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericSubspaceAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_GenericSubspaceAuthorization proto.InternalMessageInfo

func (m *GenericSubspaceAuthorization) GetSubspacesIDs() []uint64 {
	if m != nil {
		return m.SubspacesIDs
	}
	return nil
}

func (m *GenericSubspaceAuthorization) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*GenericSubspaceAuthorization)(nil), "desmos.subspaces.v2.authz.GenericSubspaceAuthorization")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v2/authz/authz.proto", fileDescriptor_21914b81942bd86e)
}

var fileDescriptor_21914b81942bd86e = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0x49, 0x2d, 0xce,
	0xcd, 0x2f, 0xd6, 0x2f, 0x2e, 0x4d, 0x2a, 0x2e, 0x48, 0x4c, 0x4e, 0x2d, 0xd6, 0x2f, 0x33, 0xd2,
	0x4f, 0x2c, 0x2d, 0xc9, 0xa8, 0x82, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x92, 0x10,
	0x65, 0x7a, 0x70, 0x65, 0x7a, 0x65, 0x46, 0x7a, 0x60, 0x05, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9,
	0x60, 0x55, 0xfa, 0x20, 0x16, 0x44, 0x83, 0x94, 0x64, 0x72, 0x3e, 0x48, 0x43, 0x3c, 0x44, 0x02,
	0xc2, 0x81, 0x48, 0x29, 0xf5, 0x33, 0x72, 0xc9, 0xb8, 0xa7, 0xe6, 0xa5, 0x16, 0x65, 0x26, 0x07,
	0x43, 0x8d, 0x73, 0x2c, 0x2d, 0xc9, 0xc8, 0x2f, 0xca, 0xac, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x13,
	0x32, 0xe5, 0xe2, 0x85, 0xdb, 0x13, 0x9f, 0x99, 0x52, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0xe2,
	0x24, 0xf0, 0xe8, 0x9e, 0x3c, 0x0f, 0x4c, 0x47, 0xb1, 0xa7, 0x4b, 0x71, 0x10, 0x0f, 0x5c, 0x99,
	0x67, 0x4a, 0xb1, 0x90, 0x00, 0x17, 0x73, 0x6e, 0x71, 0xba, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67,
	0x10, 0x88, 0x69, 0xa5, 0x76, 0x6a, 0x8b, 0xae, 0x12, 0xd4, 0x6e, 0x88, 0x6f, 0xca, 0x0c, 0x93,
	0x52, 0x4b, 0x12, 0x0d, 0xf5, 0x50, 0x2c, 0x74, 0x0a, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23,
	0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6,
	0x63, 0x39, 0x86, 0x28, 0xb3, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d,
	0x48, 0x10, 0xe8, 0xe6, 0x24, 0x26, 0x15, 0x43, 0xd9, 0xfa, 0x65, 0xa6, 0xfa, 0x15, 0x48, 0x41,
	0x97, 0x93, 0x9a, 0x9e, 0x98, 0x5c, 0xa9, 0x5f, 0x66, 0x94, 0xc4, 0x06, 0xf6, 0xaa, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x44, 0x61, 0x9f, 0x0e, 0x5f, 0x01, 0x00, 0x00,
}

func (m *GenericSubspaceAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericSubspaceAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericSubspaceAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubspacesIDs) > 0 {
		dAtA2 := make([]byte, len(m.SubspacesIDs)*10)
		var j1 int
		for _, num := range m.SubspacesIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintAuthz(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenericSubspaceAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubspacesIDs) > 0 {
		l = 0
		for _, e := range m.SubspacesIDs {
			l += sovAuthz(uint64(e))
		}
		n += 1 + sovAuthz(uint64(l)) + l
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenericSubspaceAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericSubspaceAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericSubspaceAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubspacesIDs = append(m.SubspacesIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAuthz
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAuthz
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubspacesIDs) == 0 {
					m.SubspacesIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubspacesIDs = append(m.SubspacesIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspacesIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
