// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/posts/v1beta1/reactions.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegisteredReaction represents a registered reaction that can be referenced
// by its shortCode inside post reactions
type RegisteredReaction struct {
	ShortCode string `protobuf:"bytes,1,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty" yaml"short_code"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" yaml"value"`
	Subspace  string `protobuf:"bytes,3,opt,name=subspace,proto3" json:"subspace,omitempty" yaml"subspace"`
	Creator   string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty" yaml"creator"`
}

func (m *RegisteredReaction) Reset()         { *m = RegisteredReaction{} }
func (m *RegisteredReaction) String() string { return proto.CompactTextString(m) }
func (*RegisteredReaction) ProtoMessage()    {}
func (*RegisteredReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_279d343e0105421c, []int{0}
}
func (m *RegisteredReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredReaction.Merge(m, src)
}
func (m *RegisteredReaction) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredReaction.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredReaction proto.InternalMessageInfo

func (m *RegisteredReaction) GetShortCode() string {
	if m != nil {
		return m.ShortCode
	}
	return ""
}

func (m *RegisteredReaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RegisteredReaction) GetSubspace() string {
	if m != nil {
		return m.Subspace
	}
	return ""
}

func (m *RegisteredReaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// RegisteredReactions wraps a list of post reactions
type RegisteredReactions struct {
	Reactions []RegisteredReaction `protobuf:"bytes,1,rep,name=reactions,proto3" json:"reactions"`
}

func (m *RegisteredReactions) Reset()         { *m = RegisteredReactions{} }
func (m *RegisteredReactions) String() string { return proto.CompactTextString(m) }
func (*RegisteredReactions) ProtoMessage()    {}
func (*RegisteredReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_279d343e0105421c, []int{1}
}
func (m *RegisteredReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredReactions.Merge(m, src)
}
func (m *RegisteredReactions) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredReactions.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredReactions proto.InternalMessageInfo

func (m *RegisteredReactions) GetReactions() []RegisteredReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

// PostReaction is a struct of a user reaction to a post
type PostReaction struct {
	ShortCode string `protobuf:"bytes,1,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty" yaml"short_code"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" yaml"value"`
	Owner     string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml"owner"`
}

func (m *PostReaction) Reset()         { *m = PostReaction{} }
func (m *PostReaction) String() string { return proto.CompactTextString(m) }
func (*PostReaction) ProtoMessage()    {}
func (*PostReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_279d343e0105421c, []int{2}
}
func (m *PostReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostReaction.Merge(m, src)
}
func (m *PostReaction) XXX_Size() int {
	return m.Size()
}
func (m *PostReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_PostReaction.DiscardUnknown(m)
}

var xxx_messageInfo_PostReaction proto.InternalMessageInfo

func (m *PostReaction) GetShortCode() string {
	if m != nil {
		return m.ShortCode
	}
	return ""
}

func (m *PostReaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PostReaction) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// PostReactions wraps a list of registered reactions
type PostReactions struct {
	Reactions []PostReaction `protobuf:"bytes,1,rep,name=reactions,proto3" json:"reactions"`
}

func (m *PostReactions) Reset()         { *m = PostReactions{} }
func (m *PostReactions) String() string { return proto.CompactTextString(m) }
func (*PostReactions) ProtoMessage()    {}
func (*PostReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_279d343e0105421c, []int{3}
}
func (m *PostReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostReactions.Merge(m, src)
}
func (m *PostReactions) XXX_Size() int {
	return m.Size()
}
func (m *PostReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_PostReactions.DiscardUnknown(m)
}

var xxx_messageInfo_PostReactions proto.InternalMessageInfo

func (m *PostReactions) GetReactions() []PostReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisteredReaction)(nil), "desmos.posts.v1beta1.RegisteredReaction")
	proto.RegisterType((*RegisteredReactions)(nil), "desmos.posts.v1beta1.RegisteredReactions")
	proto.RegisterType((*PostReaction)(nil), "desmos.posts.v1beta1.PostReaction")
	proto.RegisterType((*PostReactions)(nil), "desmos.posts.v1beta1.PostReactions")
}

func init() {
	proto.RegisterFile("desmos/posts/v1beta1/reactions.proto", fileDescriptor_279d343e0105421c)
}

var fileDescriptor_279d343e0105421c = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0x3f, 0x4f, 0x2a, 0x41,
	0x14, 0xc5, 0x77, 0x1e, 0xf0, 0x1e, 0x0c, 0x8f, 0xf7, 0x74, 0xa4, 0xd8, 0x58, 0xec, 0x92, 0x89,
	0x24, 0x24, 0xc4, 0xdd, 0x20, 0x9d, 0x25, 0x46, 0x2b, 0x0b, 0x33, 0x8d, 0x89, 0x8d, 0xd9, 0x3f,
	0x93, 0x85, 0x04, 0x98, 0xcd, 0xde, 0x01, 0xe5, 0x5b, 0x58, 0x9a, 0xd8, 0xf0, 0x71, 0x28, 0xe9,
	0xb4, 0xda, 0x18, 0x68, 0xac, 0xf7, 0x13, 0x18, 0x67, 0x57, 0x20, 0x59, 0x6a, 0xbb, 0xd9, 0x7b,
	0x7e, 0xf7, 0x64, 0xcf, 0xc9, 0xc5, 0x27, 0x3e, 0x87, 0x91, 0x00, 0x3b, 0x14, 0x20, 0xc1, 0x9e,
	0x76, 0x5c, 0x2e, 0x9d, 0x8e, 0x1d, 0x71, 0xc7, 0x93, 0x03, 0x31, 0x06, 0x2b, 0x8c, 0x84, 0x14,
	0xa4, 0x9e, 0x52, 0x96, 0xa2, 0xac, 0x8c, 0x3a, 0xae, 0x07, 0x22, 0x10, 0x0a, 0xb0, 0xbf, 0x5e,
	0x29, 0x4b, 0x5f, 0x11, 0x26, 0x8c, 0x07, 0x03, 0x90, 0x3c, 0xe2, 0x3e, 0xcb, 0x9c, 0x48, 0x17,
	0x63, 0xe8, 0x8b, 0x48, 0xde, 0x7b, 0xc2, 0xe7, 0x3a, 0x6a, 0xa0, 0x56, 0xa5, 0x57, 0x4f, 0x62,
	0xf3, 0x60, 0xe6, 0x8c, 0x86, 0x74, 0x2b, 0x51, 0x56, 0x51, 0x1f, 0x17, 0xc2, 0xe7, 0xa4, 0x89,
	0x4b, 0x53, 0x67, 0x38, 0xe1, 0xfa, 0x2f, 0xc5, 0xff, 0x4f, 0x62, 0xb3, 0xaa, 0x78, 0x35, 0xa5,
	0x2c, 0x55, 0x89, 0x85, 0xcb, 0x30, 0x71, 0x21, 0x74, 0x3c, 0xae, 0x17, 0x14, 0x49, 0x92, 0xd8,
	0xfc, 0x97, 0x3a, 0x67, 0x02, 0x65, 0x1b, 0x86, 0xb4, 0xf1, 0x1f, 0x2f, 0xe2, 0x8e, 0x14, 0x91,
	0x5e, 0x54, 0xf8, 0x61, 0x12, 0x9b, 0x35, 0x85, 0x67, 0x73, 0xca, 0xbe, 0x89, 0xf3, 0xf2, 0xf3,
	0xdc, 0x44, 0x1f, 0x73, 0x13, 0x51, 0x0f, 0x1f, 0xe5, 0x83, 0x01, 0xb9, 0xc6, 0x95, 0x4d, 0x5f,
	0x3a, 0x6a, 0x14, 0x5a, 0xd5, 0xb3, 0x96, 0xb5, 0xaf, 0x30, 0x2b, 0xbf, 0xdd, 0x2b, 0x2e, 0x62,
	0x53, 0x63, 0x5b, 0x03, 0xfa, 0x82, 0xf0, 0xdf, 0x1b, 0x01, 0xf2, 0x47, 0x8a, 0x6b, 0xe2, 0x92,
	0x78, 0x18, 0xf3, 0x28, 0x6b, 0x6d, 0x8b, 0xa9, 0x29, 0x65, 0xa9, 0xba, 0x53, 0xc1, 0x2d, 0xae,
	0xed, 0xfe, 0x1c, 0x90, 0xab, 0x7c, 0x78, 0xba, 0x3f, 0xfc, 0xee, 0x5e, 0x2e, 0x76, 0xef, 0x72,
	0xb1, 0x32, 0xd0, 0x72, 0x65, 0xa0, 0xf7, 0x95, 0x81, 0x9e, 0xd6, 0x86, 0xb6, 0x5c, 0x1b, 0xda,
	0xdb, 0xda, 0xd0, 0xee, 0xda, 0xc1, 0x40, 0xf6, 0x27, 0xae, 0xe5, 0x89, 0x91, 0x9d, 0x1a, 0x9f,
	0x0e, 0x1d, 0x17, 0xb2, 0xb7, 0xfd, 0x98, 0x9d, 0xae, 0x9c, 0x85, 0x1c, 0xdc, 0xdf, 0xea, 0x06,
	0xbb, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x73, 0x89, 0x2c, 0xd7, 0x02, 0x00, 0x00,
}

func (this *RegisteredReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisteredReaction)
	if !ok {
		that2, ok := that.(RegisteredReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShortCode != that1.ShortCode {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Subspace != that1.Subspace {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}
func (this *PostReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostReaction)
	if !ok {
		that2, ok := that.(PostReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShortCode != that1.ShortCode {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	return true
}
func (m *RegisteredReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShortCode) > 0 {
		i -= len(m.ShortCode)
		copy(dAtA[i:], m.ShortCode)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.ShortCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReactions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShortCode) > 0 {
		i -= len(m.ShortCode)
		copy(dAtA[i:], m.ShortCode)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.ShortCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReactions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintReactions(dAtA []byte, offset int, v uint64) int {
	offset -= sovReactions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisteredReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShortCode)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	return n
}

func (m *RegisteredReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovReactions(uint64(l))
		}
	}
	return n
}

func (m *PostReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShortCode)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	return n
}

func (m *PostReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovReactions(uint64(l))
		}
	}
	return n
}

func sovReactions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReactions(x uint64) (n int) {
	return sovReactions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisteredReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, RegisteredReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, PostReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReactions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReactions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReactions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReactions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReactions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReactions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReactions = fmt.Errorf("proto: unexpected end of group")
)
