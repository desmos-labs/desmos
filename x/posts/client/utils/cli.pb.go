// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/posts/v1/client/cli.proto

package utils

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/desmos-labs/desmos/v4/x/posts/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreatePostJSON contains the data that can be specified when creating a Post
// using the CLi command
type CreatePostJSON struct {
	// (optional) External id for this post
	ExternalID string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// (optional) Text of the post
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// (optional) Entities connected to this post
	Entities *types.Entities `protobuf:"bytes,3,opt,name=entities,proto3" json:"entities,omitempty"`
	// Attachments of the post
	Attachments []*types1.Any `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// (optional) Id of the original post of the conversation
	ConversationID uint64 `protobuf:"varint,5,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// Reply settings of this post
	ReplySettings types.ReplySetting `protobuf:"varint,6,opt,name=reply_settings,json=replySettings,proto3,enum=desmos.posts.v1.ReplySetting" json:"reply_settings,omitempty"`
	// A list this posts references (either as a reply, repost or quote)
	ReferencedPosts []types.PostReference `protobuf:"bytes,7,rep,name=referenced_posts,json=referencedPosts,proto3" json:"referenced_posts"`
}

func (m *CreatePostJSON) Reset()         { *m = CreatePostJSON{} }
func (m *CreatePostJSON) String() string { return proto.CompactTextString(m) }
func (*CreatePostJSON) ProtoMessage()    {}
func (*CreatePostJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_905ce8d49fe91e44, []int{0}
}
func (m *CreatePostJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePostJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePostJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePostJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePostJSON.Merge(m, src)
}
func (m *CreatePostJSON) XXX_Size() int {
	return m.Size()
}
func (m *CreatePostJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePostJSON.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePostJSON proto.InternalMessageInfo

func (m *CreatePostJSON) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *CreatePostJSON) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CreatePostJSON) GetEntities() *types.Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *CreatePostJSON) GetAttachments() []*types1.Any {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *CreatePostJSON) GetConversationID() uint64 {
	if m != nil {
		return m.ConversationID
	}
	return 0
}

func (m *CreatePostJSON) GetReplySettings() types.ReplySetting {
	if m != nil {
		return m.ReplySettings
	}
	return types.REPLY_SETTING_UNSPECIFIED
}

func (m *CreatePostJSON) GetReferencedPosts() []types.PostReference {
	if m != nil {
		return m.ReferencedPosts
	}
	return nil
}

// EditPostJSON contains the data that can be specified when editing a Post
// using the CLI command
type EditPostJSON struct {
	// New text of the post
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// New entities connected to this post
	Entities *types.Entities `protobuf:"bytes,2,opt,name=entities,proto3" json:"entities,omitempty"`
}

func (m *EditPostJSON) Reset()         { *m = EditPostJSON{} }
func (m *EditPostJSON) String() string { return proto.CompactTextString(m) }
func (*EditPostJSON) ProtoMessage()    {}
func (*EditPostJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_905ce8d49fe91e44, []int{1}
}
func (m *EditPostJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditPostJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditPostJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditPostJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditPostJSON.Merge(m, src)
}
func (m *EditPostJSON) XXX_Size() int {
	return m.Size()
}
func (m *EditPostJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_EditPostJSON.DiscardUnknown(m)
}

var xxx_messageInfo_EditPostJSON proto.InternalMessageInfo

func (m *EditPostJSON) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *EditPostJSON) GetEntities() *types.Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func init() {
	proto.RegisterType((*CreatePostJSON)(nil), "desmos.posts.v1.client.CreatePostJSON")
	proto.RegisterType((*EditPostJSON)(nil), "desmos.posts.v1.client.EditPostJSON")
}

func init() { proto.RegisterFile("desmos/posts/v1/client/cli.proto", fileDescriptor_905ce8d49fe91e44) }

var fileDescriptor_905ce8d49fe91e44 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x26, 0x14, 0xd8, 0x80, 0x8b, 0x56, 0x15, 0x72, 0x2b, 0x70, 0xac, 0x9e, 0x7c,
	0x61, 0x57, 0x0d, 0x94, 0x0b, 0x27, 0xd2, 0xe4, 0x10, 0x0e, 0x04, 0x6d, 0x4f, 0x70, 0x89, 0x1c,
	0x7b, 0xea, 0xae, 0x64, 0xef, 0x46, 0xde, 0x49, 0x94, 0xbc, 0x05, 0x47, 0x1e, 0xa9, 0xc7, 0x1e,
	0x39, 0x45, 0xc8, 0x79, 0x11, 0xe4, 0x7f, 0x25, 0x4a, 0x85, 0xd4, 0x93, 0x67, 0xfc, 0xfd, 0x66,
	0x76, 0xf6, 0xdb, 0x21, 0x5e, 0x04, 0x26, 0xd5, 0x86, 0xcf, 0xb5, 0x41, 0xc3, 0x97, 0xe7, 0x3c,
	0x4c, 0x24, 0x28, 0x2c, 0x3e, 0x6c, 0x9e, 0x69, 0xd4, 0xf4, 0x75, 0x45, 0xb0, 0x92, 0x60, 0xcb,
	0x73, 0x56, 0x11, 0xa7, 0xc7, 0xb1, 0x8e, 0x75, 0x89, 0xf0, 0x22, 0xaa, 0xe8, 0xd3, 0x93, 0x58,
	0xeb, 0x38, 0x01, 0x5e, 0x66, 0xb3, 0xc5, 0x35, 0x0f, 0xd4, 0xba, 0x96, 0x7a, 0xfb, 0x12, 0xca,
	0x14, 0x0c, 0x06, 0xe9, 0xbc, 0xa9, 0x0d, 0x75, 0x71, 0xd2, 0xb4, 0x6a, 0x5a, 0x25, 0xb5, 0xf4,
	0x66, 0x7f, 0xcc, 0x54, 0x47, 0x90, 0xd4, 0xea, 0xd9, 0xaf, 0x36, 0xb1, 0x2f, 0x33, 0x08, 0x10,
	0xbe, 0x69, 0x83, 0x5f, 0xae, 0x26, 0x5f, 0x29, 0x27, 0x5d, 0x58, 0x21, 0x64, 0x2a, 0x48, 0xa6,
	0x32, 0x72, 0x2c, 0xcf, 0xf2, 0x9f, 0x0f, 0xec, 0x7c, 0xd3, 0x23, 0xa3, 0xfa, 0xf7, 0x78, 0x28,
	0x48, 0x83, 0x8c, 0x23, 0x4a, 0x49, 0x07, 0x61, 0x85, 0xce, 0x41, 0x41, 0x8a, 0x32, 0xa6, 0x17,
	0xe4, 0x19, 0x28, 0x94, 0x28, 0xc1, 0x38, 0x6d, 0xcf, 0xf2, 0xbb, 0xfd, 0x13, 0xb6, 0xef, 0xc6,
	0xa8, 0x06, 0xc4, 0x3d, 0x4a, 0x3f, 0x92, 0x6e, 0x80, 0x18, 0x84, 0x37, 0x29, 0x28, 0x34, 0x4e,
	0xc7, 0x6b, 0xfb, 0xdd, 0xfe, 0x31, 0xab, 0xae, 0xcf, 0x9a, 0xeb, 0xb3, 0xcf, 0x6a, 0x2d, 0x76,
	0x41, 0xfa, 0x89, 0x1c, 0x85, 0x5a, 0x2d, 0x21, 0x33, 0x01, 0x4a, 0xad, 0x8a, 0xb9, 0x9f, 0x78,
	0x96, 0xdf, 0x19, 0xd0, 0x7c, 0xd3, 0xb3, 0x2f, 0x77, 0xa4, 0xf1, 0x50, 0xd8, 0xbb, 0xe8, 0x38,
	0xa2, 0x43, 0x62, 0x67, 0x30, 0x4f, 0xd6, 0x53, 0x03, 0x88, 0x52, 0xc5, 0xc6, 0x39, 0xf4, 0x2c,
	0xdf, 0xee, 0xbf, 0x7d, 0x30, 0xb1, 0x28, 0xb0, 0xab, 0x8a, 0x12, 0x2f, 0xb3, 0x9d, 0xcc, 0xd0,
	0x09, 0x79, 0x95, 0xc1, 0x35, 0x64, 0xa0, 0x42, 0x88, 0xa6, 0x65, 0x89, 0xf3, 0xb4, 0x9c, 0xdf,
	0x7d, 0xd0, 0xa7, 0xf0, 0x5a, 0x34, 0xf0, 0xa0, 0x73, 0xbb, 0xe9, 0xb5, 0xc4, 0xd1, 0xbf, 0xea,
	0x42, 0x36, 0x67, 0xdf, 0xc9, 0x8b, 0x51, 0x24, 0xf1, 0xfe, 0x5d, 0x1a, 0x9b, 0xad, 0xff, 0xd8,
	0x7c, 0xf0, 0x68, 0x9b, 0x07, 0x93, 0xdb, 0xdc, 0xb5, 0xee, 0x72, 0xd7, 0xfa, 0x93, 0xbb, 0xd6,
	0xcf, 0xad, 0xdb, 0xba, 0xdb, 0xba, 0xad, 0xdf, 0x5b, 0xb7, 0xf5, 0xe3, 0x22, 0x96, 0x78, 0xb3,
	0x98, 0xb1, 0x50, 0xa7, 0xbc, 0x6a, 0xf4, 0x2e, 0x09, 0x66, 0xa6, 0x8e, 0xf9, 0xf2, 0x03, 0x5f,
	0xd5, 0x9b, 0x54, 0x6f, 0xfb, 0x02, 0x65, 0x62, 0x66, 0x87, 0xe5, 0xd3, 0xbc, 0xff, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xb9, 0x94, 0x1a, 0x7a, 0x14, 0x03, 0x00, 0x00,
}

func (m *CreatePostJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePostJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePostJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferencedPosts) > 0 {
		for iNdEx := len(m.ReferencedPosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReferencedPosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCli(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReplySettings != 0 {
		i = encodeVarintCli(dAtA, i, uint64(m.ReplySettings))
		i--
		dAtA[i] = 0x30
	}
	if m.ConversationID != 0 {
		i = encodeVarintCli(dAtA, i, uint64(m.ConversationID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCli(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Entities != nil {
		{
			size, err := m.Entities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCli(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCli(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintCli(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EditPostJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditPostJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditPostJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entities != nil {
		{
			size, err := m.Entities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCli(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCli(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCli(dAtA []byte, offset int, v uint64) int {
	offset -= sovCli(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreatePostJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovCli(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCli(uint64(l))
	}
	if m.Entities != nil {
		l = m.Entities.Size()
		n += 1 + l + sovCli(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovCli(uint64(l))
		}
	}
	if m.ConversationID != 0 {
		n += 1 + sovCli(uint64(m.ConversationID))
	}
	if m.ReplySettings != 0 {
		n += 1 + sovCli(uint64(m.ReplySettings))
	}
	if len(m.ReferencedPosts) > 0 {
		for _, e := range m.ReferencedPosts {
			l = e.Size()
			n += 1 + l + sovCli(uint64(l))
		}
	}
	return n
}

func (m *EditPostJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCli(uint64(l))
	}
	if m.Entities != nil {
		l = m.Entities.Size()
		n += 1 + l + sovCli(uint64(l))
	}
	return n
}

func sovCli(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCli(x uint64) (n int) {
	return sovCli(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePostJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCli
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePostJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePostJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entities == nil {
				m.Entities = &types.Entities{}
			}
			if err := m.Entities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &types1.Any{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationID", wireType)
			}
			m.ConversationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConversationID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplySettings", wireType)
			}
			m.ReplySettings = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplySettings |= types.ReplySetting(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedPosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferencedPosts = append(m.ReferencedPosts, types.PostReference{})
			if err := m.ReferencedPosts[len(m.ReferencedPosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCli(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCli
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditPostJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCli
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditPostJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditPostJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCli
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCli
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entities == nil {
				m.Entities = &types.Entities{}
			}
			if err := m.Entities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCli(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCli
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCli(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCli
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCli
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCli
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCli
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCli
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCli
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCli        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCli          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCli = fmt.Errorf("proto: unexpected end of group")
)
