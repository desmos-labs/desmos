// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/reactions/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryReactionsRequest is the request type for the Query/Reactions RPC method
type QueryReactionsRequest struct {
	// Id of the subspace to query the reactions for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty"`
	// (optional) Post id to query the reactions for
	PostId uint64 `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReactionsRequest) Reset()         { *m = QueryReactionsRequest{} }
func (m *QueryReactionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReactionsRequest) ProtoMessage()    {}
func (*QueryReactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a605cb95b392783f, []int{0}
}
func (m *QueryReactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReactionsRequest.Merge(m, src)
}
func (m *QueryReactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReactionsRequest proto.InternalMessageInfo

func (m *QueryReactionsRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

func (m *QueryReactionsRequest) GetPostId() uint64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *QueryReactionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryReactionsResponse is the response type for the Query/Reactions RPC
// method
type QueryReactionsResponse struct {
	Reactions  []Reaction          `protobuf:"bytes,1,rep,name=reactions,proto3" json:"reactions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReactionsResponse) Reset()         { *m = QueryReactionsResponse{} }
func (m *QueryReactionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReactionsResponse) ProtoMessage()    {}
func (*QueryReactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a605cb95b392783f, []int{1}
}
func (m *QueryReactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReactionsResponse.Merge(m, src)
}
func (m *QueryReactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReactionsResponse proto.InternalMessageInfo

func (m *QueryReactionsResponse) GetReactions() []Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *QueryReactionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRegisteredReactionsRequest is the request type for the
// Query/RegisteredReactions RPC method
type QueryRegisteredReactionsRequest struct {
	// Id of the subspace to query the registered reactions for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRegisteredReactionsRequest) Reset()         { *m = QueryRegisteredReactionsRequest{} }
func (m *QueryRegisteredReactionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredReactionsRequest) ProtoMessage()    {}
func (*QueryRegisteredReactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a605cb95b392783f, []int{2}
}
func (m *QueryRegisteredReactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredReactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredReactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredReactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredReactionsRequest.Merge(m, src)
}
func (m *QueryRegisteredReactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredReactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredReactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredReactionsRequest proto.InternalMessageInfo

func (m *QueryRegisteredReactionsRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

func (m *QueryRegisteredReactionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRegisteredReactionsResponse is the response type for the
// Query/RegisteredReactions RPC method
type QueryRegisteredReactionsResponse struct {
	RegisteredReactions []RegisteredReaction `protobuf:"bytes,1,rep,name=registered_reactions,json=registeredReactions,proto3" json:"registered_reactions"`
	Pagination          *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRegisteredReactionsResponse) Reset()         { *m = QueryRegisteredReactionsResponse{} }
func (m *QueryRegisteredReactionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredReactionsResponse) ProtoMessage()    {}
func (*QueryRegisteredReactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a605cb95b392783f, []int{3}
}
func (m *QueryRegisteredReactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredReactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredReactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredReactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredReactionsResponse.Merge(m, src)
}
func (m *QueryRegisteredReactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredReactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredReactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredReactionsResponse proto.InternalMessageInfo

func (m *QueryRegisteredReactionsResponse) GetRegisteredReactions() []RegisteredReaction {
	if m != nil {
		return m.RegisteredReactions
	}
	return nil
}

func (m *QueryRegisteredReactionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryReactionsParamsRequest is the request type for the Query/ReactionsParams
// RPC method
type QueryReactionsParamsRequest struct {
	// Id of the subspace for which to query the params
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty"`
}

func (m *QueryReactionsParamsRequest) Reset()         { *m = QueryReactionsParamsRequest{} }
func (m *QueryReactionsParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReactionsParamsRequest) ProtoMessage()    {}
func (*QueryReactionsParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a605cb95b392783f, []int{4}
}
func (m *QueryReactionsParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReactionsParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReactionsParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReactionsParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReactionsParamsRequest.Merge(m, src)
}
func (m *QueryReactionsParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReactionsParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReactionsParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReactionsParamsRequest proto.InternalMessageInfo

func (m *QueryReactionsParamsRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

// QueryReactionsParamsResponse is the response type for the
// Query/ReactionsParam RPC method
type QueryReactionsParamsResponse struct {
	Params SubspaceReactionsParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryReactionsParamsResponse) Reset()         { *m = QueryReactionsParamsResponse{} }
func (m *QueryReactionsParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReactionsParamsResponse) ProtoMessage()    {}
func (*QueryReactionsParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a605cb95b392783f, []int{5}
}
func (m *QueryReactionsParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReactionsParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReactionsParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReactionsParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReactionsParamsResponse.Merge(m, src)
}
func (m *QueryReactionsParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReactionsParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReactionsParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReactionsParamsResponse proto.InternalMessageInfo

func (m *QueryReactionsParamsResponse) GetParams() SubspaceReactionsParams {
	if m != nil {
		return m.Params
	}
	return SubspaceReactionsParams{}
}

func init() {
	proto.RegisterType((*QueryReactionsRequest)(nil), "desmos.reactions.v1.QueryReactionsRequest")
	proto.RegisterType((*QueryReactionsResponse)(nil), "desmos.reactions.v1.QueryReactionsResponse")
	proto.RegisterType((*QueryRegisteredReactionsRequest)(nil), "desmos.reactions.v1.QueryRegisteredReactionsRequest")
	proto.RegisterType((*QueryRegisteredReactionsResponse)(nil), "desmos.reactions.v1.QueryRegisteredReactionsResponse")
	proto.RegisterType((*QueryReactionsParamsRequest)(nil), "desmos.reactions.v1.QueryReactionsParamsRequest")
	proto.RegisterType((*QueryReactionsParamsResponse)(nil), "desmos.reactions.v1.QueryReactionsParamsResponse")
}

func init() { proto.RegisterFile("desmos/reactions/v1/query.proto", fileDescriptor_a605cb95b392783f) }

var fileDescriptor_a605cb95b392783f = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xbf, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x73, 0x69, 0xbe, 0xf9, 0xaa, 0x97, 0x01, 0xe9, 0x52, 0x20, 0x84, 0xe2, 0x44, 0x19,
	0x68, 0xe8, 0x8f, 0x3b, 0x9c, 0x16, 0x21, 0x16, 0x10, 0x1d, 0x40, 0x45, 0x0c, 0x25, 0x6c, 0x2c,
	0xe1, 0x1c, 0x9f, 0x8c, 0x51, 0x92, 0x73, 0x7d, 0x4e, 0x44, 0x85, 0x58, 0x18, 0x99, 0x90, 0x90,
	0x90, 0x60, 0x66, 0xe1, 0xef, 0x60, 0xe9, 0x82, 0x54, 0x89, 0x85, 0x09, 0xa1, 0x84, 0x3f, 0x04,
	0xf9, 0xee, 0x1c, 0x27, 0xc6, 0x01, 0x47, 0xea, 0x96, 0xf3, 0xfb, 0x3e, 0xcf, 0xfb, 0xb9, 0x27,
	0xaf, 0x0d, 0x6b, 0x36, 0x13, 0x7d, 0x2e, 0x88, 0xcf, 0x68, 0x37, 0x70, 0xf9, 0x40, 0x90, 0x91,
	0x49, 0x8e, 0x86, 0xcc, 0x3f, 0xc6, 0x9e, 0xcf, 0x03, 0x8e, 0xca, 0xaa, 0x01, 0x4f, 0x1b, 0xf0,
	0xc8, 0xac, 0xae, 0x39, 0xdc, 0xe1, 0xb2, 0x4e, 0xc2, 0x5f, 0xaa, 0xb5, 0xba, 0xee, 0x70, 0xee,
	0xf4, 0x18, 0xa1, 0x9e, 0x4b, 0xe8, 0x60, 0xc0, 0x03, 0xaa, 0x04, 0xaa, 0x7a, 0xa9, 0xcb, 0x43,
	0xa3, 0x8e, 0x92, 0xa9, 0x83, 0x2e, 0x6d, 0xaa, 0x13, 0xb1, 0xa8, 0x60, 0x6a, 0x38, 0x19, 0x99,
	0x16, 0x0b, 0xa8, 0x49, 0x3c, 0xea, 0xb8, 0x03, 0xe9, 0xa3, 0x7b, 0xeb, 0x69, 0xc0, 0x7d, 0x6e,
	0xb3, 0x9e, 0x76, 0x6b, 0x7c, 0x00, 0xf0, 0xfc, 0xa3, 0xd0, 0xa4, 0x1d, 0xb5, 0xb4, 0xd9, 0xd1,
	0x90, 0x89, 0x00, 0xd5, 0x60, 0x49, 0x0c, 0x2d, 0xe1, 0xd1, 0x2e, 0xeb, 0xb8, 0x76, 0x05, 0xd4,
	0x41, 0xb3, 0xd0, 0x86, 0xd1, 0xa3, 0x03, 0x1b, 0x5d, 0x84, 0xff, 0x7b, 0x5c, 0x04, 0x61, 0x31,
	0x2f, 0x8b, 0xc5, 0xf0, 0x78, 0x60, 0xa3, 0x7b, 0x10, 0xc6, 0x24, 0x95, 0x95, 0x3a, 0x68, 0x96,
	0x5a, 0x57, 0xb1, 0xbe, 0x44, 0x88, 0x8d, 0x55, 0x66, 0x1a, 0x1b, 0x1f, 0x52, 0x87, 0xe9, 0xa9,
	0xed, 0x19, 0x65, 0xe3, 0x13, 0x80, 0x17, 0x92, 0x6c, 0xc2, 0xe3, 0x03, 0xc1, 0xd0, 0x5d, 0xb8,
	0x3a, 0xbd, 0x53, 0x05, 0xd4, 0x57, 0x9a, 0xa5, 0xd6, 0x15, 0x9c, 0x12, 0x3e, 0x8e, 0xa4, 0xfb,
	0x85, 0x93, 0x1f, 0xb5, 0x5c, 0x3b, 0x56, 0xa1, 0xfb, 0x73, 0x94, 0x79, 0x49, 0xb9, 0xf1, 0x4f,
	0x4a, 0x35, 0x7f, 0x0e, 0xf3, 0x0d, 0x80, 0x35, 0x8d, 0xe9, 0xb8, 0x22, 0x60, 0x3e, 0xb3, 0x97,
	0x0f, 0xf3, 0xac, 0x32, 0xfb, 0x0a, 0x60, 0x7d, 0x31, 0x8c, 0x4e, 0xef, 0x29, 0x5c, 0xf3, 0xa7,
	0xe5, 0x4e, 0x32, 0xc8, 0x8d, 0x05, 0x41, 0x26, 0xfd, 0x74, 0xa4, 0x65, 0xff, 0xcf, 0x49, 0x67,
	0x17, 0xee, 0x6d, 0x78, 0x79, 0x7e, 0x05, 0x0e, 0xa9, 0x4f, 0xfb, 0x99, 0x73, 0x6d, 0x3c, 0x87,
	0xeb, 0xe9, 0x7a, 0x1d, 0xc5, 0x03, 0x58, 0xf4, 0xe4, 0x13, 0xa9, 0x2d, 0xb5, 0xb6, 0x53, 0x2f,
	0xff, 0x58, 0x1b, 0x26, 0x5c, 0x74, 0x02, 0xda, 0xa1, 0xf5, 0xbe, 0x00, 0xff, 0x93, 0xc3, 0xd0,
	0x47, 0x00, 0x57, 0xe3, 0x30, 0x36, 0x53, 0x3d, 0x53, 0xdf, 0xba, 0xea, 0x56, 0xa6, 0x5e, 0x05,
	0xdf, 0xd8, 0x7b, 0xfd, 0xed, 0xd7, 0xbb, 0x3c, 0x46, 0xdb, 0x24, 0xed, 0x3d, 0x7f, 0x39, 0x93,
	0xcc, 0xab, 0xb8, 0x84, 0xbe, 0x00, 0x58, 0x4e, 0xd9, 0x0e, 0xb4, 0xf7, 0xb7, 0xd1, 0x8b, 0x36,
	0xbb, 0x7a, 0x63, 0x49, 0x95, 0x46, 0xbf, 0x23, 0xd1, 0x6f, 0xa1, 0x9b, 0x99, 0xd0, 0x23, 0x9f,
	0x9d, 0xf8, 0x16, 0x9f, 0x01, 0x3c, 0x97, 0xf8, 0x3b, 0xd0, 0xf5, 0x0c, 0xe1, 0xcd, 0xed, 0x4f,
	0xd5, 0x5c, 0x42, 0xa1, 0xc9, 0x4d, 0x49, 0xbe, 0x85, 0xae, 0x65, 0x20, 0x57, 0x8b, 0xb1, 0xff,
	0xf0, 0x64, 0x6c, 0x80, 0xd3, 0xb1, 0x01, 0x7e, 0x8e, 0x0d, 0xf0, 0x76, 0x62, 0xe4, 0x4e, 0x27,
	0x46, 0xee, 0xfb, 0xc4, 0xc8, 0x3d, 0x69, 0x39, 0x6e, 0xf0, 0x6c, 0x68, 0xe1, 0x2e, 0xef, 0x6b,
	0xbb, 0x9d, 0x1e, 0xb5, 0x44, 0x64, 0x3d, 0xda, 0x25, 0x2f, 0x66, 0xfc, 0x83, 0x63, 0x8f, 0x09,
	0xab, 0x28, 0xbf, 0xdc, 0xbb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21, 0x20, 0x76, 0xba, 0x8e,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Reactions allows to query the reactions present inside a subspace
	Reactions(ctx context.Context, in *QueryReactionsRequest, opts ...grpc.CallOption) (*QueryReactionsResponse, error)
	// RegisteredReactions allows to query the registered reaction of a subspace
	RegisteredReactions(ctx context.Context, in *QueryRegisteredReactionsRequest, opts ...grpc.CallOption) (*QueryRegisteredReactionsResponse, error)
	// ReactionsParams allows to query the reaction params of a subspace
	ReactionsParams(ctx context.Context, in *QueryReactionsParamsRequest, opts ...grpc.CallOption) (*QueryReactionsParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Reactions(ctx context.Context, in *QueryReactionsRequest, opts ...grpc.CallOption) (*QueryReactionsResponse, error) {
	out := new(QueryReactionsResponse)
	err := c.cc.Invoke(ctx, "/desmos.reactions.v1.Query/Reactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredReactions(ctx context.Context, in *QueryRegisteredReactionsRequest, opts ...grpc.CallOption) (*QueryRegisteredReactionsResponse, error) {
	out := new(QueryRegisteredReactionsResponse)
	err := c.cc.Invoke(ctx, "/desmos.reactions.v1.Query/RegisteredReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReactionsParams(ctx context.Context, in *QueryReactionsParamsRequest, opts ...grpc.CallOption) (*QueryReactionsParamsResponse, error) {
	out := new(QueryReactionsParamsResponse)
	err := c.cc.Invoke(ctx, "/desmos.reactions.v1.Query/ReactionsParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Reactions allows to query the reactions present inside a subspace
	Reactions(context.Context, *QueryReactionsRequest) (*QueryReactionsResponse, error)
	// RegisteredReactions allows to query the registered reaction of a subspace
	RegisteredReactions(context.Context, *QueryRegisteredReactionsRequest) (*QueryRegisteredReactionsResponse, error)
	// ReactionsParams allows to query the reaction params of a subspace
	ReactionsParams(context.Context, *QueryReactionsParamsRequest) (*QueryReactionsParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Reactions(ctx context.Context, req *QueryReactionsRequest) (*QueryReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reactions not implemented")
}
func (*UnimplementedQueryServer) RegisteredReactions(ctx context.Context, req *QueryRegisteredReactionsRequest) (*QueryRegisteredReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredReactions not implemented")
}
func (*UnimplementedQueryServer) ReactionsParams(ctx context.Context, req *QueryReactionsParamsRequest) (*QueryReactionsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactionsParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Reactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reactions.v1.Query/Reactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reactions(ctx, req.(*QueryReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reactions.v1.Query/RegisteredReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredReactions(ctx, req.(*QueryRegisteredReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReactionsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReactionsParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReactionsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reactions.v1.Query/ReactionsParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReactionsParams(ctx, req.(*QueryReactionsParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.reactions.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reactions",
			Handler:    _Query_Reactions_Handler,
		},
		{
			MethodName: "RegisteredReactions",
			Handler:    _Query_RegisteredReactions_Handler,
		},
		{
			MethodName: "ReactionsParams",
			Handler:    _Query_ReactionsParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/reactions/v1/query.proto",
}

func (m *QueryReactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PostId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x10
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredReactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredReactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredReactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredReactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredReactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredReactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegisteredReactions) > 0 {
		for iNdEx := len(m.RegisteredReactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredReactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReactionsParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReactionsParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReactionsParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReactionsParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReactionsParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReactionsParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryReactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	if m.PostId != 0 {
		n += 1 + sovQuery(uint64(m.PostId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredReactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredReactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredReactions) > 0 {
		for _, e := range m.RegisteredReactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReactionsParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	return n
}

func (m *QueryReactionsParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryReactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, Reaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredReactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredReactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredReactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredReactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredReactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredReactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredReactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredReactions = append(m.RegisteredReactions, RegisteredReaction{})
			if err := m.RegisteredReactions[len(m.RegisteredReactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReactionsParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReactionsParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReactionsParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReactionsParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReactionsParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReactionsParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
