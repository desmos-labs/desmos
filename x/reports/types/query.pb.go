// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/reports/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryReportsResponse is the request type for Query/Reports RPC method
type QueryReportsRequest struct {
	// Id of the subspace to query the reports for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// (optional) Target to query the reports for
	Target *types.Any `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty" yaml:"target"`
	// (optional) User that reported the target.
	// This is going to be used only if the target is also specified
	Reporter string `protobuf:"bytes,3,opt,name=reporter,proto3" json:"reporter,omitempty" yaml:"reporter"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryReportsRequest) Reset()         { *m = QueryReportsRequest{} }
func (m *QueryReportsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReportsRequest) ProtoMessage()    {}
func (*QueryReportsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{0}
}
func (m *QueryReportsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportsRequest.Merge(m, src)
}
func (m *QueryReportsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportsRequest proto.InternalMessageInfo

func (m *QueryReportsRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

func (m *QueryReportsRequest) GetTarget() *types.Any {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *QueryReportsRequest) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *QueryReportsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryReportsResponse is the response type for Query/Reports RPC method
type QueryReportsResponse struct {
	Reports    []Report            `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports" yaml:"reports"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryReportsResponse) Reset()         { *m = QueryReportsResponse{} }
func (m *QueryReportsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReportsResponse) ProtoMessage()    {}
func (*QueryReportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{1}
}
func (m *QueryReportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportsResponse.Merge(m, src)
}
func (m *QueryReportsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportsResponse proto.InternalMessageInfo

func (m *QueryReportsResponse) GetReports() []Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *QueryReportsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryReportRequest is the request type for Query/Report RPC method
type QueryReportRequest struct {
	// Id of the subspace that holds the report to query for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Id of the report to query for
	ReportId uint64 `protobuf:"varint,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" yaml:"report_id"`
}

func (m *QueryReportRequest) Reset()         { *m = QueryReportRequest{} }
func (m *QueryReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReportRequest) ProtoMessage()    {}
func (*QueryReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{2}
}
func (m *QueryReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportRequest.Merge(m, src)
}
func (m *QueryReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportRequest proto.InternalMessageInfo

func (m *QueryReportRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

func (m *QueryReportRequest) GetReportId() uint64 {
	if m != nil {
		return m.ReportId
	}
	return 0
}

// QueryReportResponse is the response type for Query/Report RPC method
type QueryReportResponse struct {
	Report Report `protobuf:"bytes,1,opt,name=report,proto3" json:"report" yaml:"report"`
}

func (m *QueryReportResponse) Reset()         { *m = QueryReportResponse{} }
func (m *QueryReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReportResponse) ProtoMessage()    {}
func (*QueryReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{3}
}
func (m *QueryReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReportResponse.Merge(m, src)
}
func (m *QueryReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReportResponse proto.InternalMessageInfo

func (m *QueryReportResponse) GetReport() Report {
	if m != nil {
		return m.Report
	}
	return Report{}
}

// QueryReasonsRequest is the request type for Query/Reasons RPC method
type QueryReasonsRequest struct {
	// Id of the subspace to query the supported reporting reasons for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryReasonsRequest) Reset()         { *m = QueryReasonsRequest{} }
func (m *QueryReasonsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReasonsRequest) ProtoMessage()    {}
func (*QueryReasonsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{4}
}
func (m *QueryReasonsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReasonsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReasonsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReasonsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReasonsRequest.Merge(m, src)
}
func (m *QueryReasonsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReasonsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReasonsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReasonsRequest proto.InternalMessageInfo

func (m *QueryReasonsRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

func (m *QueryReasonsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryReasonsResponse is the response type for Query/Reasons RPC method
type QueryReasonsResponse struct {
	Reasons    []Reason            `protobuf:"bytes,1,rep,name=reasons,proto3" json:"reasons" yaml:"reasons"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryReasonsResponse) Reset()         { *m = QueryReasonsResponse{} }
func (m *QueryReasonsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReasonsResponse) ProtoMessage()    {}
func (*QueryReasonsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{5}
}
func (m *QueryReasonsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReasonsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReasonsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReasonsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReasonsResponse.Merge(m, src)
}
func (m *QueryReasonsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReasonsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReasonsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReasonsResponse proto.InternalMessageInfo

func (m *QueryReasonsResponse) GetReasons() []Reason {
	if m != nil {
		return m.Reasons
	}
	return nil
}

func (m *QueryReasonsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryReasonRequest is the request type for Query/Reason RPC method
type QueryReasonRequest struct {
	// Id of the subspace that holds the reason to query for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Id of the reason to query for
	ReasonId uint32 `protobuf:"varint,2,opt,name=reason_id,json=reasonId,proto3" json:"reason_id,omitempty" yaml:"reason_id"`
}

func (m *QueryReasonRequest) Reset()         { *m = QueryReasonRequest{} }
func (m *QueryReasonRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReasonRequest) ProtoMessage()    {}
func (*QueryReasonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{6}
}
func (m *QueryReasonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReasonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReasonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReasonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReasonRequest.Merge(m, src)
}
func (m *QueryReasonRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReasonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReasonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReasonRequest proto.InternalMessageInfo

func (m *QueryReasonRequest) GetSubspaceId() uint64 {
	if m != nil {
		return m.SubspaceId
	}
	return 0
}

func (m *QueryReasonRequest) GetReasonId() uint32 {
	if m != nil {
		return m.ReasonId
	}
	return 0
}

// QueryReasonResponse is the response type for Query/Reason RPC method
type QueryReasonResponse struct {
	Reason Reason `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason" yaml:"reason"`
}

func (m *QueryReasonResponse) Reset()         { *m = QueryReasonResponse{} }
func (m *QueryReasonResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReasonResponse) ProtoMessage()    {}
func (*QueryReasonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{7}
}
func (m *QueryReasonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReasonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReasonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReasonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReasonResponse.Merge(m, src)
}
func (m *QueryReasonResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReasonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReasonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReasonResponse proto.InternalMessageInfo

func (m *QueryReasonResponse) GetReason() Reason {
	if m != nil {
		return m.Reason
	}
	return Reason{}
}

// QueryParamsRequest is the request type for Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{8}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e9c7b1802c3e20, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryReportsRequest)(nil), "desmos.reports.v1.QueryReportsRequest")
	proto.RegisterType((*QueryReportsResponse)(nil), "desmos.reports.v1.QueryReportsResponse")
	proto.RegisterType((*QueryReportRequest)(nil), "desmos.reports.v1.QueryReportRequest")
	proto.RegisterType((*QueryReportResponse)(nil), "desmos.reports.v1.QueryReportResponse")
	proto.RegisterType((*QueryReasonsRequest)(nil), "desmos.reports.v1.QueryReasonsRequest")
	proto.RegisterType((*QueryReasonsResponse)(nil), "desmos.reports.v1.QueryReasonsResponse")
	proto.RegisterType((*QueryReasonRequest)(nil), "desmos.reports.v1.QueryReasonRequest")
	proto.RegisterType((*QueryReasonResponse)(nil), "desmos.reports.v1.QueryReasonResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "desmos.reports.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "desmos.reports.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("desmos/reports/v1/query.proto", fileDescriptor_f0e9c7b1802c3e20) }

var fileDescriptor_f0e9c7b1802c3e20 = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x6b, 0x13, 0x4d,
	0x18, 0xce, 0xa6, 0x6d, 0xfa, 0x75, 0xfa, 0xf5, 0xfb, 0xec, 0x34, 0x2d, 0x69, 0xd4, 0x24, 0x5d,
	0x30, 0x0d, 0x42, 0x77, 0x4c, 0x2a, 0x08, 0x3d, 0x88, 0xe6, 0x20, 0x56, 0x0f, 0xd6, 0xc5, 0x93,
	0xa0, 0x65, 0xd2, 0x8c, 0x6b, 0x20, 0xd9, 0xd9, 0x66, 0x36, 0xc1, 0x58, 0x0a, 0xe2, 0x2f, 0x10,
	0x04, 0xaf, 0xfe, 0x02, 0xf1, 0xe2, 0x3f, 0xf0, 0x52, 0x3c, 0x15, 0xbc, 0x78, 0x5a, 0xa4, 0xf5,
	0x17, 0xe4, 0xe6, 0x4d, 0x76, 0xde, 0xd9, 0x74, 0xd7, 0xb4, 0x1b, 0xb5, 0xea, 0x6d, 0x76, 0xde,
	0xf7, 0x7d, 0xde, 0xe7, 0x7d, 0xe6, 0x99, 0x49, 0xd0, 0xf9, 0x3a, 0x13, 0x2d, 0x2e, 0x48, 0x9b,
	0x39, 0xbc, 0xed, 0x0a, 0xd2, 0x2d, 0x93, 0xed, 0x0e, 0x6b, 0xf7, 0x0c, 0xa7, 0xcd, 0x5d, 0x8e,
	0x67, 0x21, 0x6c, 0xa8, 0xb0, 0xd1, 0x2d, 0x67, 0xd3, 0x16, 0xb7, 0xb8, 0x8c, 0x12, 0x7f, 0x05,
	0x89, 0xd9, 0x73, 0x16, 0xe7, 0x56, 0x93, 0x11, 0xea, 0x34, 0x08, 0xb5, 0x6d, 0xee, 0x52, 0xb7,
	0xc1, 0x6d, 0xa1, 0xa2, 0x8b, 0x2a, 0x2a, 0xbf, 0x6a, 0x9d, 0x47, 0x84, 0xda, 0xbd, 0x20, 0xb4,
	0xc5, 0xfd, 0x0e, 0x9b, 0x80, 0x08, 0x1f, 0x2a, 0x74, 0x11, 0xbe, 0x48, 0x8d, 0x0a, 0x06, 0xac,
	0x48, 0xb7, 0x5c, 0x63, 0x2e, 0x2d, 0x13, 0x87, 0x5a, 0x0d, 0x5b, 0xb6, 0x50, 0xb9, 0xb9, 0xe1,
	0x39, 0x5a, 0xbc, 0xce, 0x9a, 0x0a, 0x4b, 0x7f, 0x9b, 0x44, 0x73, 0x77, 0x7d, 0x08, 0x13, 0x12,
	0x4c, 0xb6, 0xdd, 0x61, 0xc2, 0xc5, 0x57, 0xd0, 0xb4, 0xe8, 0xd4, 0x84, 0x43, 0xb7, 0xd8, 0x66,
	0xa3, 0x9e, 0xd1, 0x0a, 0x5a, 0x69, 0xbc, 0xba, 0xd0, 0xf7, 0xf2, 0xb8, 0x47, 0x5b, 0xcd, 0x35,
	0x3d, 0x14, 0xd4, 0x4d, 0x14, 0x7c, 0xad, 0xd7, 0xf1, 0x1d, 0x94, 0x72, 0x69, 0xdb, 0x62, 0x6e,
	0x26, 0x59, 0xd0, 0x4a, 0xd3, 0x95, 0xb4, 0x01, 0x33, 0x1a, 0xc1, 0x8c, 0xc6, 0x75, 0xbb, 0x57,
	0x5d, 0xea, 0x7b, 0xf9, 0x19, 0x40, 0x82, 0x6c, 0xfd, 0xc3, 0xbb, 0x95, 0x7f, 0x81, 0xc3, 0x3d,
	0xb9, 0x61, 0x2a, 0x18, 0x4c, 0xd0, 0x3f, 0x40, 0x9e, 0xb5, 0x33, 0x63, 0x05, 0xad, 0x34, 0x55,
	0x9d, 0xeb, 0x7b, 0xf9, 0xff, 0xa1, 0x38, 0x88, 0xe8, 0xe6, 0x20, 0x09, 0x3f, 0x40, 0xe8, 0x48,
	0x86, 0xcc, 0xb8, 0x64, 0x51, 0x34, 0x94, 0x82, 0xbe, 0x66, 0x06, 0x9c, 0xa4, 0xd2, 0xcc, 0xd8,
	0xa0, 0x16, 0x53, 0x63, 0x57, 0xe7, 0xfb, 0x5e, 0x7e, 0x16, 0xa0, 0x8f, 0x30, 0x74, 0x33, 0x04,
	0xa8, 0xbf, 0xd7, 0x50, 0x3a, 0xaa, 0x98, 0x70, 0xb8, 0x2d, 0x18, 0xbe, 0x8d, 0x26, 0x95, 0xca,
	0x19, 0xad, 0x30, 0x56, 0x9a, 0xae, 0x2c, 0x1a, 0x43, 0x2e, 0x31, 0xa0, 0xa8, 0xba, 0xb0, 0xe7,
	0xe5, 0x13, 0x7d, 0x2f, 0xff, 0x5f, 0x78, 0x0c, 0xa1, 0x9b, 0x01, 0x02, 0x7e, 0x18, 0x19, 0x02,
	0xa4, 0x5c, 0x1e, 0x39, 0x04, 0x30, 0xf9, 0x91, 0x29, 0x9e, 0x69, 0x08, 0x87, 0xa6, 0x38, 0xf5,
	0xb1, 0x97, 0xd1, 0x14, 0x50, 0xf7, 0xcb, 0x92, 0xb2, 0x2c, 0xdd, 0xf7, 0xf2, 0x67, 0xc2, 0xf3,
	0xc9, 0x22, 0x75, 0x4e, 0xeb, 0x75, 0x7d, 0x33, 0xe2, 0xbc, 0x81, 0x8c, 0x37, 0x51, 0x0a, 0x52,
	0x64, 0xf7, 0x58, 0x15, 0xe7, 0x95, 0x8a, 0x33, 0xe1, 0x2e, 0xba, 0xa9, 0xea, 0xf5, 0x37, 0xda,
	0xa0, 0x03, 0x15, 0xdc, 0x3e, 0xbd, 0xb7, 0xa3, 0xce, 0x1a, 0xfb, 0x83, 0xce, 0x52, 0x7c, 0xc3,
	0xce, 0x92, 0x5b, 0xb1, 0xce, 0xf2, 0x33, 0x86, 0x9d, 0x25, 0xeb, 0xa4, 0xb3, 0xe4, 0xea, 0x6f,
	0x3a, 0xcb, 0x6f, 0xf8, 0x7b, 0x9c, 0xe5, 0x23, 0x05, 0xce, 0x9a, 0x89, 0x3a, 0x4b, 0x85, 0xa4,
	0xb3, 0xfc, 0x75, 0xc4, 0x59, 0xc0, 0x20, 0xec, 0x2c, 0x7f, 0x27, 0xd6, 0x59, 0x52, 0xc5, 0x21,
	0x67, 0xf9, 0xbb, 0xd2, 0x59, 0x72, 0x91, 0x56, 0x23, 0x6e, 0xd0, 0x36, 0x6d, 0x05, 0xbe, 0x1a,
	0xb4, 0x0d, 0x76, 0x8f, 0xda, 0x3a, 0x72, 0x27, 0xa6, 0x2d, 0x94, 0x7c, 0xdf, 0x16, 0xca, 0x74,
	0x53, 0xd5, 0x57, 0xbe, 0x4e, 0xa0, 0x09, 0xd9, 0x01, 0xbf, 0xd2, 0xd0, 0xa4, 0x7a, 0x7f, 0x70,
	0xf1, 0x18, 0xbc, 0x63, 0x9e, 0xf4, 0xec, 0xf2, 0xc8, 0x3c, 0x20, 0xac, 0xaf, 0x3d, 0xff, 0xf8,
	0xe5, 0x65, 0xf2, 0x32, 0xae, 0x90, 0xe1, 0x1f, 0x8f, 0xe0, 0x60, 0x04, 0xd9, 0x09, 0x9d, 0xd8,
	0x6e, 0x90, 0x82, 0x5f, 0x6b, 0x28, 0x05, 0x78, 0xf8, 0x42, 0x7c, 0xbf, 0x80, 0x56, 0x71, 0x54,
	0x9a, 0x62, 0x75, 0x43, 0xb2, 0xba, 0x86, 0xaf, 0xfe, 0x3c, 0x2b, 0xb2, 0x33, 0x78, 0x80, 0x76,
	0x95, 0x74, 0x70, 0x17, 0x62, 0x7a, 0x87, 0x5f, 0x8c, 0x38, 0xe9, 0x22, 0x37, 0xf5, 0x17, 0xa5,
	0x03, 0x32, 0x20, 0x9d, 0xbf, 0x8e, 0x93, 0x2e, 0x74, 0xa7, 0xb2, 0xc5, 0x51, 0x69, 0xa7, 0x92,
	0x4e, 0xb2, 0xf2, 0xa5, 0x53, 0x37, 0x6c, 0x17, 0x3f, 0x45, 0x29, 0x30, 0xea, 0xc9, 0x04, 0x23,
	0x37, 0xe2, 0x64, 0x82, 0xd1, 0x2b, 0xa2, 0x2f, 0x49, 0x82, 0x67, 0xf1, 0xe2, 0x31, 0x04, 0xc1,
	0xfb, 0xd5, 0x5b, 0x7b, 0x07, 0x39, 0x6d, 0xff, 0x20, 0xa7, 0x7d, 0x3e, 0xc8, 0x69, 0x2f, 0x0e,
	0x73, 0x89, 0xfd, 0xc3, 0x5c, 0xe2, 0xd3, 0x61, 0x2e, 0x71, 0xff, 0x92, 0xd5, 0x70, 0x1f, 0x77,
	0x6a, 0xc6, 0x16, 0x6f, 0xa9, 0xf2, 0x95, 0x26, 0xad, 0x89, 0x00, 0xaa, 0xbb, 0x4a, 0x9e, 0x0c,
	0xf0, 0xdc, 0x9e, 0xc3, 0x44, 0x2d, 0x25, 0xff, 0x8b, 0xac, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x71, 0xaa, 0xb1, 0x54, 0xe5, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Reports allows to query the reports for a specific target
	Reports(ctx context.Context, in *QueryReportsRequest, opts ...grpc.CallOption) (*QueryReportsResponse, error)
	// Report allows to query the report having the given id
	Report(ctx context.Context, in *QueryReportRequest, opts ...grpc.CallOption) (*QueryReportResponse, error)
	// Reasons allows to query the supported reporting reasons for a subspace
	Reasons(ctx context.Context, in *QueryReasonsRequest, opts ...grpc.CallOption) (*QueryReasonsResponse, error)
	// Reason allows to query the reason having the given id
	Reason(ctx context.Context, in *QueryReasonRequest, opts ...grpc.CallOption) (*QueryReasonResponse, error)
	// Params allows to query the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Reports(ctx context.Context, in *QueryReportsRequest, opts ...grpc.CallOption) (*QueryReportsResponse, error) {
	out := new(QueryReportsResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Query/Reports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Report(ctx context.Context, in *QueryReportRequest, opts ...grpc.CallOption) (*QueryReportResponse, error) {
	out := new(QueryReportResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Query/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reasons(ctx context.Context, in *QueryReasonsRequest, opts ...grpc.CallOption) (*QueryReasonsResponse, error) {
	out := new(QueryReasonsResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Query/Reasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reason(ctx context.Context, in *QueryReasonRequest, opts ...grpc.CallOption) (*QueryReasonResponse, error) {
	out := new(QueryReasonResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Query/Reason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Reports allows to query the reports for a specific target
	Reports(context.Context, *QueryReportsRequest) (*QueryReportsResponse, error)
	// Report allows to query the report having the given id
	Report(context.Context, *QueryReportRequest) (*QueryReportResponse, error)
	// Reasons allows to query the supported reporting reasons for a subspace
	Reasons(context.Context, *QueryReasonsRequest) (*QueryReasonsResponse, error)
	// Reason allows to query the reason having the given id
	Reason(context.Context, *QueryReasonRequest) (*QueryReasonResponse, error)
	// Params allows to query the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Reports(ctx context.Context, req *QueryReportsRequest) (*QueryReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reports not implemented")
}
func (*UnimplementedQueryServer) Report(ctx context.Context, req *QueryReportRequest) (*QueryReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedQueryServer) Reasons(ctx context.Context, req *QueryReasonsRequest) (*QueryReasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reasons not implemented")
}
func (*UnimplementedQueryServer) Reason(ctx context.Context, req *QueryReasonRequest) (*QueryReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reason not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Reports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Query/Reports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reports(ctx, req.(*QueryReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Query/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Report(ctx, req.(*QueryReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Query/Reasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reasons(ctx, req.(*QueryReasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Query/Reason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reason(ctx, req.(*QueryReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.reports.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reports",
			Handler:    _Query_Reports_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Query_Report_Handler,
		},
		{
			MethodName: "Reasons",
			Handler:    _Query_Reasons_Handler,
		},
		{
			MethodName: "Reason",
			Handler:    _Query_Reason_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/reports/v1/query.proto",
}

func (m *QueryReportsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ReportId))
		i--
		dAtA[i] = 0x10
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReasonsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReasonsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReasonsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReasonsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReasonsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReasonsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reasons) > 0 {
		for iNdEx := len(m.Reasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReasonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReasonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReasonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReasonId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ReasonId))
		i--
		dAtA[i] = 0x10
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReasonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReasonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReasonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryReportsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReportsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	if m.ReportId != 0 {
		n += 1 + sovQuery(uint64(m.ReportId))
	}
	return n
}

func (m *QueryReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Report.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReasonsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReasonsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reasons) > 0 {
		for _, e := range m.Reasons {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReasonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	if m.ReasonId != 0 {
		n += 1 + sovQuery(uint64(m.ReasonId))
	}
	return n
}

func (m *QueryReasonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reason.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryReportsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &types.Any{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, Report{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportId", wireType)
			}
			m.ReportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReasonsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReasonsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReasonsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReasonsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReasonsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReasonsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reasons = append(m.Reasons, Reason{})
			if err := m.Reasons[len(m.Reasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReasonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReasonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReasonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonId", wireType)
			}
			m.ReasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReasonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReasonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReasonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
