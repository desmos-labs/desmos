// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/reports/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateReport represents the message to be used to create a report
type MsgCreateReport struct {
	// Id of the subspace for which the report should be stored
	SubspaceID uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Id of the reason this report has been created for
	ReasonsIDs []uint32 `protobuf:"varint,2,rep,packed,name=reasons_ids,json=reasonsIds,proto3" json:"reasons_ids,omitempty" yaml:"reasons_ids"`
	// (optional) Message attached to this report
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty" yaml:"message"`
	// Address of the reporter
	Reporter string `protobuf:"bytes,4,opt,name=reporter,proto3" json:"reporter,omitempty" yaml:"reporter"`
	// Target of the report
	Target *types.Any `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty" yaml:"target"`
}

func (m *MsgCreateReport) Reset()         { *m = MsgCreateReport{} }
func (m *MsgCreateReport) String() string { return proto.CompactTextString(m) }
func (*MsgCreateReport) ProtoMessage()    {}
func (*MsgCreateReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{0}
}
func (m *MsgCreateReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateReport.Merge(m, src)
}
func (m *MsgCreateReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateReport proto.InternalMessageInfo

func (m *MsgCreateReport) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

func (m *MsgCreateReport) GetReasonsIDs() []uint32 {
	if m != nil {
		return m.ReasonsIDs
	}
	return nil
}

func (m *MsgCreateReport) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgCreateReport) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *MsgCreateReport) GetTarget() *types.Any {
	if m != nil {
		return m.Target
	}
	return nil
}

// MsgCreateReportResponse represents the Msg/CreateReport response type
type MsgCreateReportResponse struct {
	// Id of the newly created report
	ReportID uint64 `protobuf:"varint,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" yaml:"report_id"`
	// Time in which the report was created
	CreationDate time.Time `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date" yaml:"creation_date"`
}

func (m *MsgCreateReportResponse) Reset()         { *m = MsgCreateReportResponse{} }
func (m *MsgCreateReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateReportResponse) ProtoMessage()    {}
func (*MsgCreateReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{1}
}
func (m *MsgCreateReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateReportResponse.Merge(m, src)
}
func (m *MsgCreateReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateReportResponse proto.InternalMessageInfo

func (m *MsgCreateReportResponse) GetReportID() uint64 {
	if m != nil {
		return m.ReportID
	}
	return 0
}

func (m *MsgCreateReportResponse) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

// MsgDeleteReport represents the message to be used when deleting a report
type MsgDeleteReport struct {
	// Id of the subspace that contains the report to be deleted
	SubspaceID uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Id of the report to be deleted
	ReportID uint64 `protobuf:"varint,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" yaml:"report_id"`
	// Address of the user deleting the report
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
}

func (m *MsgDeleteReport) Reset()         { *m = MsgDeleteReport{} }
func (m *MsgDeleteReport) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteReport) ProtoMessage()    {}
func (*MsgDeleteReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{2}
}
func (m *MsgDeleteReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteReport.Merge(m, src)
}
func (m *MsgDeleteReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteReport proto.InternalMessageInfo

func (m *MsgDeleteReport) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

func (m *MsgDeleteReport) GetReportID() uint64 {
	if m != nil {
		return m.ReportID
	}
	return 0
}

func (m *MsgDeleteReport) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgDeleteReportResponse represents the Msg/DeleteReport response type
type MsgDeleteReportResponse struct {
}

func (m *MsgDeleteReportResponse) Reset()         { *m = MsgDeleteReportResponse{} }
func (m *MsgDeleteReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteReportResponse) ProtoMessage()    {}
func (*MsgDeleteReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{3}
}
func (m *MsgDeleteReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteReportResponse.Merge(m, src)
}
func (m *MsgDeleteReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteReportResponse proto.InternalMessageInfo

// MsgSupportStandardReason represents the message to be used when wanting to
// support one reason from the module params
type MsgSupportStandardReason struct {
	// Id of the subspace for which to support the reason
	SubspaceID uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Id of the reason that should be supported
	StandardReasonID uint32 `protobuf:"varint,2,opt,name=standard_reason_id,json=standardReasonId,proto3" json:"standard_reason_id,omitempty" yaml:"standard_reason_id"`
	// Address of the user signing the message
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
}

func (m *MsgSupportStandardReason) Reset()         { *m = MsgSupportStandardReason{} }
func (m *MsgSupportStandardReason) String() string { return proto.CompactTextString(m) }
func (*MsgSupportStandardReason) ProtoMessage()    {}
func (*MsgSupportStandardReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{4}
}
func (m *MsgSupportStandardReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSupportStandardReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSupportStandardReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSupportStandardReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSupportStandardReason.Merge(m, src)
}
func (m *MsgSupportStandardReason) XXX_Size() int {
	return m.Size()
}
func (m *MsgSupportStandardReason) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSupportStandardReason.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSupportStandardReason proto.InternalMessageInfo

func (m *MsgSupportStandardReason) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

func (m *MsgSupportStandardReason) GetStandardReasonID() uint32 {
	if m != nil {
		return m.StandardReasonID
	}
	return 0
}

func (m *MsgSupportStandardReason) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgSupportStandardReasonResponse represents the Msg/SupportStandardReason
// response type
type MsgSupportStandardReasonResponse struct {
	// Id of the newly added reason
	ReasonsID uint32 `protobuf:"varint,1,opt,name=reasons_ids,json=reasonsIds,proto3" json:"reasons_ids,omitempty" yaml:"reasons_ids"`
}

func (m *MsgSupportStandardReasonResponse) Reset()         { *m = MsgSupportStandardReasonResponse{} }
func (m *MsgSupportStandardReasonResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSupportStandardReasonResponse) ProtoMessage()    {}
func (*MsgSupportStandardReasonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{5}
}
func (m *MsgSupportStandardReasonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSupportStandardReasonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSupportStandardReasonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSupportStandardReasonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSupportStandardReasonResponse.Merge(m, src)
}
func (m *MsgSupportStandardReasonResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSupportStandardReasonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSupportStandardReasonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSupportStandardReasonResponse proto.InternalMessageInfo

func (m *MsgSupportStandardReasonResponse) GetReasonsID() uint32 {
	if m != nil {
		return m.ReasonsID
	}
	return 0
}

// MsgAddReason represents the message to be used when adding a new supported
// reason
type MsgAddReason struct {
	// Id of the subspace for which to add the reason
	SubspaceID uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Title of the reason
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	// (optional) Extended description of the reason and the cases it applies to
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// Address of the user adding the supported reason
	Signer string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
}

func (m *MsgAddReason) Reset()         { *m = MsgAddReason{} }
func (m *MsgAddReason) String() string { return proto.CompactTextString(m) }
func (*MsgAddReason) ProtoMessage()    {}
func (*MsgAddReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{6}
}
func (m *MsgAddReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddReason.Merge(m, src)
}
func (m *MsgAddReason) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddReason) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddReason.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddReason proto.InternalMessageInfo

func (m *MsgAddReason) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

func (m *MsgAddReason) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgAddReason) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgAddReason) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAddReasonResponse represents the Msg/AddReason response type
type MsgAddReasonResponse struct {
	// Id of the newly supported reason
	ReasonID uint32 `protobuf:"varint,1,opt,name=reason_id,json=reasonId,proto3" json:"reason_id,omitempty" yaml:"reason_id"`
}

func (m *MsgAddReasonResponse) Reset()         { *m = MsgAddReasonResponse{} }
func (m *MsgAddReasonResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddReasonResponse) ProtoMessage()    {}
func (*MsgAddReasonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{7}
}
func (m *MsgAddReasonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddReasonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddReasonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddReasonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddReasonResponse.Merge(m, src)
}
func (m *MsgAddReasonResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddReasonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddReasonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddReasonResponse proto.InternalMessageInfo

func (m *MsgAddReasonResponse) GetReasonID() uint32 {
	if m != nil {
		return m.ReasonID
	}
	return 0
}

// MsgRemoveReason represents the message to be used when removing an exiting
// reporting reason
type MsgRemoveReason struct {
	// Id of the subspace from which to remove the reason
	SubspaceID uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
	// Id of the reason to be deleted
	ReasonID uint32 `protobuf:"varint,2,opt,name=reason_id,json=reasonId,proto3" json:"reason_id,omitempty" yaml:"reason_id"`
	// Address of the user adding the supported reason
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
}

func (m *MsgRemoveReason) Reset()         { *m = MsgRemoveReason{} }
func (m *MsgRemoveReason) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveReason) ProtoMessage()    {}
func (*MsgRemoveReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{8}
}
func (m *MsgRemoveReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveReason.Merge(m, src)
}
func (m *MsgRemoveReason) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveReason) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveReason.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveReason proto.InternalMessageInfo

func (m *MsgRemoveReason) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

func (m *MsgRemoveReason) GetReasonID() uint32 {
	if m != nil {
		return m.ReasonID
	}
	return 0
}

func (m *MsgRemoveReason) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgRemoveReasonResponse represents the Msg/RemoveReason response type
type MsgRemoveReasonResponse struct {
}

func (m *MsgRemoveReasonResponse) Reset()         { *m = MsgRemoveReasonResponse{} }
func (m *MsgRemoveReasonResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveReasonResponse) ProtoMessage()    {}
func (*MsgRemoveReasonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7165cc8d939a535, []int{9}
}
func (m *MsgRemoveReasonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveReasonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveReasonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveReasonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveReasonResponse.Merge(m, src)
}
func (m *MsgRemoveReasonResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveReasonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveReasonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveReasonResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateReport)(nil), "desmos.reports.v1.MsgCreateReport")
	proto.RegisterType((*MsgCreateReportResponse)(nil), "desmos.reports.v1.MsgCreateReportResponse")
	proto.RegisterType((*MsgDeleteReport)(nil), "desmos.reports.v1.MsgDeleteReport")
	proto.RegisterType((*MsgDeleteReportResponse)(nil), "desmos.reports.v1.MsgDeleteReportResponse")
	proto.RegisterType((*MsgSupportStandardReason)(nil), "desmos.reports.v1.MsgSupportStandardReason")
	proto.RegisterType((*MsgSupportStandardReasonResponse)(nil), "desmos.reports.v1.MsgSupportStandardReasonResponse")
	proto.RegisterType((*MsgAddReason)(nil), "desmos.reports.v1.MsgAddReason")
	proto.RegisterType((*MsgAddReasonResponse)(nil), "desmos.reports.v1.MsgAddReasonResponse")
	proto.RegisterType((*MsgRemoveReason)(nil), "desmos.reports.v1.MsgRemoveReason")
	proto.RegisterType((*MsgRemoveReasonResponse)(nil), "desmos.reports.v1.MsgRemoveReasonResponse")
}

func init() { proto.RegisterFile("desmos/reports/v1/msgs.proto", fileDescriptor_c7165cc8d939a535) }

var fileDescriptor_c7165cc8d939a535 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xda, 0x4a,
	0x10, 0xc6, 0x90, 0xe4, 0x85, 0x0d, 0xbc, 0x10, 0x3f, 0xde, 0x7b, 0x04, 0x55, 0x98, 0x6e, 0xab,
	0x96, 0xfe, 0x88, 0xdd, 0x24, 0x3d, 0x54, 0x95, 0x7a, 0x08, 0xa5, 0x07, 0x2a, 0xa1, 0x4a, 0x9b,
	0xe4, 0xd2, 0x43, 0x90, 0xc1, 0x5b, 0xc7, 0x12, 0x66, 0x2d, 0xaf, 0x41, 0xe5, 0xbf, 0xc8, 0x1f,
	0xd3, 0x5b, 0x6f, 0x3d, 0x45, 0xbd, 0x34, 0xc7, 0x9e, 0xdc, 0xca, 0x39, 0xf7, 0xc2, 0xa5, 0xd7,
	0xca, 0xde, 0xb5, 0xb1, 0x13, 0x23, 0x84, 0xc4, 0x8d, 0x9d, 0xf9, 0xf6, 0x9b, 0x99, 0x6f, 0x66,
	0xd6, 0x80, 0x3b, 0x1a, 0xa6, 0x26, 0xa1, 0x8a, 0x8d, 0x2d, 0x62, 0x3b, 0x54, 0x19, 0xef, 0x2b,
	0x26, 0xd5, 0xa9, 0x6c, 0xd9, 0xc4, 0x21, 0xe2, 0x0e, 0xf3, 0xca, 0xdc, 0x2b, 0x8f, 0xf7, 0xab,
	0x65, 0x9d, 0xe8, 0x24, 0xf0, 0x2a, 0xfe, 0x2f, 0x06, 0xac, 0xee, 0xea, 0x84, 0xe8, 0x03, 0xac,
	0x04, 0xa7, 0xde, 0xe8, 0x83, 0xa2, 0x0e, 0x27, 0xdc, 0x25, 0xdd, 0x74, 0x39, 0x86, 0x89, 0xa9,
	0xa3, 0x9a, 0x56, 0x78, 0xb7, 0x4f, 0xfc, 0x20, 0x5d, 0x46, 0xca, 0x0e, 0xdc, 0x55, 0x4b, 0xc9,
	0x8e, 0x68, 0x78, 0xc0, 0xfd, 0xf0, 0x5b, 0x16, 0x6c, 0x77, 0xa8, 0xfe, 0xda, 0xc6, 0xaa, 0x83,
	0x51, 0x00, 0x12, 0xdf, 0x80, 0x2d, 0x3a, 0xea, 0x51, 0x4b, 0xed, 0xe3, 0xae, 0xa1, 0x55, 0x84,
	0xba, 0xd0, 0x58, 0x6b, 0xde, 0xf7, 0x5c, 0x09, 0x1c, 0x73, 0x73, 0xbb, 0x35, 0x75, 0x25, 0x71,
	0xa2, 0x9a, 0x83, 0x97, 0x30, 0x06, 0x85, 0x08, 0x84, 0xa7, 0xb6, 0xe6, 0xd3, 0xd8, 0x58, 0xa5,
	0x64, 0x48, 0xbb, 0x86, 0x46, 0x2b, 0xd9, 0x7a, 0xae, 0x51, 0x64, 0x34, 0x88, 0x99, 0xdb, 0x2d,
	0x3a, 0xa3, 0x89, 0x41, 0x21, 0x02, 0xfc, 0xd4, 0xd6, 0xa8, 0xf8, 0x14, 0xfc, 0x65, 0x62, 0x4a,
	0x55, 0x1d, 0x57, 0x72, 0x75, 0xa1, 0x91, 0x6f, 0x8a, 0x53, 0x57, 0xfa, 0x9b, 0x5d, 0xe2, 0x0e,
	0x88, 0x42, 0x88, 0xa8, 0x80, 0x4d, 0x56, 0x2a, 0xb6, 0x2b, 0x6b, 0x01, 0xfc, 0x9f, 0xa9, 0x2b,
	0x6d, 0x87, 0x31, 0x98, 0x07, 0xa2, 0x08, 0x24, 0xbe, 0x03, 0x1b, 0x8e, 0x6a, 0xeb, 0xd8, 0xa9,
	0xac, 0xd7, 0x85, 0xc6, 0xd6, 0x41, 0x59, 0x66, 0x6a, 0xcb, 0xa1, 0xda, 0xf2, 0xd1, 0x70, 0xd2,
	0xbc, 0x3b, 0x75, 0xa5, 0x22, 0x23, 0x61, 0x68, 0xf8, 0xf5, 0xd3, 0x5e, 0x81, 0xe9, 0x75, 0x12,
	0x18, 0x10, 0xa7, 0x81, 0x9f, 0x05, 0xf0, 0xff, 0x0d, 0x45, 0x11, 0xa6, 0x16, 0x19, 0x52, 0x2c,
	0xbe, 0x02, 0x79, 0x16, 0x78, 0xa6, 0x6b, 0xdd, 0x73, 0xa5, 0x4d, 0x06, 0x0b, 0x54, 0x2d, 0xc5,
	0x53, 0x0d, 0x34, 0xe5, 0xb9, 0xb6, 0x35, 0x51, 0x05, 0xc5, 0xbe, 0x4f, 0x6b, 0x90, 0x61, 0x57,
	0x53, 0x1d, 0x5c, 0xc9, 0x06, 0x29, 0x57, 0x6f, 0xa5, 0x7c, 0x12, 0x0e, 0x48, 0xb3, 0x7e, 0xe9,
	0x4a, 0x99, 0xa9, 0x2b, 0x95, 0x19, 0x6d, 0xe2, 0x3a, 0xbc, 0xf8, 0x21, 0x09, 0xa8, 0x10, 0xda,
	0x5a, 0xbe, 0xe9, 0x8b, 0x10, 0xcc, 0x43, 0x0b, 0x0f, 0xf0, 0xaa, 0xe7, 0x21, 0x51, 0x7c, 0x76,
	0xe9, 0xe2, 0x1f, 0x81, 0x0d, 0x6a, 0xe8, 0x43, 0x6c, 0xf3, 0x31, 0xd8, 0x99, 0xb5, 0x84, 0xd9,
	0x21, 0xe2, 0x00, 0xb8, 0x1b, 0x74, 0x20, 0x5e, 0x43, 0xd8, 0x01, 0xf8, 0x4b, 0x00, 0x95, 0x0e,
	0xd5, 0x8f, 0x47, 0x96, 0x6f, 0x3e, 0x76, 0xd4, 0xa1, 0xa6, 0xda, 0x1a, 0x1b, 0xc8, 0x55, 0x15,
	0xda, 0x05, 0x22, 0xe5, 0xc4, 0x5d, 0x36, 0xc8, 0x61, 0xc5, 0xc5, 0xe6, 0xbe, 0xe7, 0x4a, 0xa5,
	0x64, 0xd8, 0x80, 0x73, 0x97, 0x73, 0xde, 0xba, 0x07, 0x51, 0x89, 0x26, 0xe1, 0x4b, 0x49, 0x71,
	0x0e, 0xea, 0xf3, 0xca, 0x8d, 0xa6, 0xb2, 0x95, 0x5c, 0x54, 0x21, 0x48, 0xf4, 0x9e, 0xe7, 0x4a,
	0xf9, 0x68, 0x51, 0x17, 0xef, 0x29, 0xf4, 0x04, 0x50, 0xe8, 0x50, 0xfd, 0x48, 0x5b, 0xb1, 0x9a,
	0x0f, 0xc0, 0xba, 0x63, 0x38, 0x03, 0x36, 0xec, 0xf9, 0x66, 0x69, 0xea, 0x4a, 0x05, 0xbe, 0x89,
	0xbe, 0x19, 0x22, 0xe6, 0x16, 0x5f, 0x80, 0x2d, 0x0d, 0xd3, 0xbe, 0x6d, 0x58, 0xfe, 0x30, 0x73,
	0x65, 0xfe, 0x9b, 0x05, 0x88, 0x39, 0x21, 0x8a, 0x43, 0x63, 0x72, 0xae, 0x2d, 0x92, 0xf3, 0x14,
	0x94, 0xe3, 0x35, 0x26, 0x17, 0x3b, 0xec, 0x34, 0x13, 0x90, 0xcf, 0x76, 0xd4, 0xe1, 0x52, 0x5c,
	0xbf, 0x70, 0xb6, 0x59, 0x43, 0xc3, 0xad, 0x43, 0xd8, 0x24, 0x63, 0xbc, 0x5a, 0xf9, 0x12, 0x99,
	0x65, 0x97, 0xcd, 0x6c, 0xf9, 0xad, 0x8b, 0xd7, 0x10, 0xca, 0x73, 0xf0, 0x3b, 0x07, 0x72, 0x1d,
	0xaa, 0x8b, 0x67, 0xa0, 0x90, 0xf8, 0xd2, 0x40, 0xf9, 0xd6, 0xe7, 0x51, 0xbe, 0xf1, 0x76, 0x56,
	0x1f, 0x2f, 0xc6, 0x44, 0x6d, 0x38, 0x03, 0x85, 0xc4, 0xcb, 0x35, 0x87, 0x3f, 0x8e, 0x99, 0xc7,
	0x9f, 0xf6, 0x7a, 0x88, 0x13, 0xf0, 0x6f, 0xfa, 0xcb, 0xf1, 0x24, 0x9d, 0x24, 0x15, 0x5c, 0x3d,
	0x5c, 0x02, 0x1c, 0x85, 0x3e, 0x05, 0xf9, 0xd9, 0x6a, 0x49, 0xe9, 0x0c, 0x11, 0xa0, 0xfa, 0x70,
	0x01, 0x20, 0xae, 0x58, 0x62, 0xea, 0xe6, 0x28, 0x16, 0xc7, 0xcc, 0x53, 0x2c, 0xad, 0xf3, 0xcd,
	0xb7, 0x97, 0x5e, 0x4d, 0xb8, 0xf2, 0x6a, 0xc2, 0x4f, 0xaf, 0x26, 0x5c, 0x5c, 0xd7, 0x32, 0x57,
	0xd7, 0xb5, 0xcc, 0xf7, 0xeb, 0x5a, 0xe6, 0xfd, 0x33, 0xdd, 0x70, 0xce, 0x47, 0x3d, 0xb9, 0x4f,
	0x4c, 0x85, 0xf1, 0xed, 0x0d, 0xd4, 0x1e, 0xe5, 0xbf, 0x95, 0xf1, 0x73, 0xe5, 0x63, 0xf4, 0xaf,
	0xc5, 0x99, 0x58, 0x98, 0xf6, 0x36, 0x82, 0xef, 0xdb, 0xe1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xed, 0x13, 0x59, 0x47, 0x72, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateReport allows to create a new report
	CreateReport(ctx context.Context, in *MsgCreateReport, opts ...grpc.CallOption) (*MsgCreateReportResponse, error)
	// DeleteReport allows to delete an existing report
	DeleteReport(ctx context.Context, in *MsgDeleteReport, opts ...grpc.CallOption) (*MsgDeleteReportResponse, error)
	// SupportStandardReason allows to support one of the reasons present inside
	// the module params
	SupportStandardReason(ctx context.Context, in *MsgSupportStandardReason, opts ...grpc.CallOption) (*MsgSupportStandardReasonResponse, error)
	// AddReason allows to add a new supported reporting reason
	AddReason(ctx context.Context, in *MsgAddReason, opts ...grpc.CallOption) (*MsgAddReasonResponse, error)
	// RemoveReason allows to remove a supported reporting reason
	RemoveReason(ctx context.Context, in *MsgRemoveReason, opts ...grpc.CallOption) (*MsgRemoveReasonResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateReport(ctx context.Context, in *MsgCreateReport, opts ...grpc.CallOption) (*MsgCreateReportResponse, error) {
	out := new(MsgCreateReportResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Msg/CreateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteReport(ctx context.Context, in *MsgDeleteReport, opts ...grpc.CallOption) (*MsgDeleteReportResponse, error) {
	out := new(MsgDeleteReportResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Msg/DeleteReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SupportStandardReason(ctx context.Context, in *MsgSupportStandardReason, opts ...grpc.CallOption) (*MsgSupportStandardReasonResponse, error) {
	out := new(MsgSupportStandardReasonResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Msg/SupportStandardReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddReason(ctx context.Context, in *MsgAddReason, opts ...grpc.CallOption) (*MsgAddReasonResponse, error) {
	out := new(MsgAddReasonResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Msg/AddReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveReason(ctx context.Context, in *MsgRemoveReason, opts ...grpc.CallOption) (*MsgRemoveReasonResponse, error) {
	out := new(MsgRemoveReasonResponse)
	err := c.cc.Invoke(ctx, "/desmos.reports.v1.Msg/RemoveReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateReport allows to create a new report
	CreateReport(context.Context, *MsgCreateReport) (*MsgCreateReportResponse, error)
	// DeleteReport allows to delete an existing report
	DeleteReport(context.Context, *MsgDeleteReport) (*MsgDeleteReportResponse, error)
	// SupportStandardReason allows to support one of the reasons present inside
	// the module params
	SupportStandardReason(context.Context, *MsgSupportStandardReason) (*MsgSupportStandardReasonResponse, error)
	// AddReason allows to add a new supported reporting reason
	AddReason(context.Context, *MsgAddReason) (*MsgAddReasonResponse, error)
	// RemoveReason allows to remove a supported reporting reason
	RemoveReason(context.Context, *MsgRemoveReason) (*MsgRemoveReasonResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateReport(ctx context.Context, req *MsgCreateReport) (*MsgCreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (*UnimplementedMsgServer) DeleteReport(ctx context.Context, req *MsgDeleteReport) (*MsgDeleteReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}
func (*UnimplementedMsgServer) SupportStandardReason(ctx context.Context, req *MsgSupportStandardReason) (*MsgSupportStandardReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportStandardReason not implemented")
}
func (*UnimplementedMsgServer) AddReason(ctx context.Context, req *MsgAddReason) (*MsgAddReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReason not implemented")
}
func (*UnimplementedMsgServer) RemoveReason(ctx context.Context, req *MsgRemoveReason) (*MsgRemoveReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReason not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Msg/CreateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateReport(ctx, req.(*MsgCreateReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Msg/DeleteReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteReport(ctx, req.(*MsgDeleteReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SupportStandardReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSupportStandardReason)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SupportStandardReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Msg/SupportStandardReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SupportStandardReason(ctx, req.(*MsgSupportStandardReason))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddReason)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Msg/AddReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddReason(ctx, req.(*MsgAddReason))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveReason)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.reports.v1.Msg/RemoveReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveReason(ctx, req.(*MsgRemoveReason))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.reports.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReport",
			Handler:    _Msg_CreateReport_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _Msg_DeleteReport_Handler,
		},
		{
			MethodName: "SupportStandardReason",
			Handler:    _Msg_SupportStandardReason_Handler,
		},
		{
			MethodName: "AddReason",
			Handler:    _Msg_AddReason_Handler,
		},
		{
			MethodName: "RemoveReason",
			Handler:    _Msg_RemoveReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/reports/v1/msgs.proto",
}

func (m *MsgCreateReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReasonsIDs) > 0 {
		dAtA3 := make([]byte, len(m.ReasonsIDs)*10)
		var j2 int
		for _, num := range m.ReasonsIDs {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMsgs(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintMsgs(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if m.ReportID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ReportID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReportID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ReportID))
		i--
		dAtA[i] = 0x10
	}
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSupportStandardReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSupportStandardReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSupportStandardReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StandardReasonID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.StandardReasonID))
		i--
		dAtA[i] = 0x10
	}
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSupportStandardReasonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSupportStandardReasonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSupportStandardReasonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReasonsID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ReasonsID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddReasonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddReasonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddReasonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReasonID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ReasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReasonID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ReasonID))
		i--
		dAtA[i] = 0x10
	}
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveReasonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveReasonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveReasonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	if len(m.ReasonsIDs) > 0 {
		l = 0
		for _, e := range m.ReasonsIDs {
			l += sovMsgs(uint64(e))
		}
		n += 1 + sovMsgs(uint64(l)) + l
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCreateReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportID != 0 {
		n += 1 + sovMsgs(uint64(m.ReportID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationDate)
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgDeleteReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	if m.ReportID != 0 {
		n += 1 + sovMsgs(uint64(m.ReportID))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgDeleteReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSupportStandardReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	if m.StandardReasonID != 0 {
		n += 1 + sovMsgs(uint64(m.StandardReasonID))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSupportStandardReasonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReasonsID != 0 {
		n += 1 + sovMsgs(uint64(m.ReasonsID))
	}
	return n
}

func (m *MsgAddReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgAddReasonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReasonID != 0 {
		n += 1 + sovMsgs(uint64(m.ReasonID))
	}
	return n
}

func (m *MsgRemoveReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	if m.ReasonID != 0 {
		n += 1 + sovMsgs(uint64(m.ReasonID))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgRemoveReasonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReasonsIDs = append(m.ReasonsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgs
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgs
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReasonsIDs) == 0 {
					m.ReasonsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReasonsIDs = append(m.ReasonsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonsIDs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &types.Any{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportID", wireType)
			}
			m.ReportID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportID", wireType)
			}
			m.ReportID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSupportStandardReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSupportStandardReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSupportStandardReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardReasonID", wireType)
			}
			m.StandardReasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StandardReasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSupportStandardReasonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSupportStandardReasonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSupportStandardReasonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonsID", wireType)
			}
			m.ReasonsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonsID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddReasonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddReasonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddReasonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonID", wireType)
			}
			m.ReasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonID", wireType)
			}
			m.ReasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveReasonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveReasonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveReasonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
