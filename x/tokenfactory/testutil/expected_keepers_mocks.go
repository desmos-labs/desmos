// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/tokenfactory/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/bank/types"
	types1 "github.com/desmos-labs/desmos/v5/x/subspaces/types"
	gomock "github.com/golang/mock/gomock"
	types2 "github.com/osmosis-labs/osmosis/v15/x/tokenfactory/types"
)

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// GetDenomMetaData mocks base method.
func (m *MockBankKeeper) GetDenomMetaData(ctx types.Context, denom string) (types0.Metadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenomMetaData", ctx, denom)
	ret0, _ := ret[0].(types0.Metadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDenomMetaData indicates an expected call of GetDenomMetaData.
func (mr *MockBankKeeperMockRecorder) GetDenomMetaData(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenomMetaData", reflect.TypeOf((*MockBankKeeper)(nil).GetDenomMetaData), ctx, denom)
}

// SetDenomMetaData mocks base method.
func (m *MockBankKeeper) SetDenomMetaData(ctx types.Context, denomMetaData types0.Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDenomMetaData", ctx, denomMetaData)
}

// SetDenomMetaData indicates an expected call of SetDenomMetaData.
func (mr *MockBankKeeperMockRecorder) SetDenomMetaData(ctx, denomMetaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDenomMetaData", reflect.TypeOf((*MockBankKeeper)(nil).SetDenomMetaData), ctx, denomMetaData)
}

// MockTokenFactoryKeeper is a mock of TokenFactoryKeeper interface.
type MockTokenFactoryKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTokenFactoryKeeperMockRecorder
}

// MockTokenFactoryKeeperMockRecorder is the mock recorder for MockTokenFactoryKeeper.
type MockTokenFactoryKeeperMockRecorder struct {
	mock *MockTokenFactoryKeeper
}

// NewMockTokenFactoryKeeper creates a new mock instance.
func NewMockTokenFactoryKeeper(ctrl *gomock.Controller) *MockTokenFactoryKeeper {
	mock := &MockTokenFactoryKeeper{ctrl: ctrl}
	mock.recorder = &MockTokenFactoryKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenFactoryKeeper) EXPECT() *MockTokenFactoryKeeperMockRecorder {
	return m.recorder
}

// BurnFrom mocks base method.
func (m *MockTokenFactoryKeeper) BurnFrom(ctx types.Context, amount types.Coin, burnFrom string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BurnFrom", ctx, amount, burnFrom)
	ret0, _ := ret[0].(error)
	return ret0
}

// BurnFrom indicates an expected call of BurnFrom.
func (mr *MockTokenFactoryKeeperMockRecorder) BurnFrom(ctx, amount, burnFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BurnFrom", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).BurnFrom), ctx, amount, burnFrom)
}

// CreateDenom mocks base method.
func (m *MockTokenFactoryKeeper) CreateDenom(ctx types.Context, creatorAddr, subdenom string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDenom", ctx, creatorAddr, subdenom)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDenom indicates an expected call of CreateDenom.
func (mr *MockTokenFactoryKeeperMockRecorder) CreateDenom(ctx, creatorAddr, subdenom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDenom", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).CreateDenom), ctx, creatorAddr, subdenom)
}

// ExportGenesis mocks base method.
func (m *MockTokenFactoryKeeper) ExportGenesis(ctx types.Context) *types2.GenesisState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportGenesis", ctx)
	ret0, _ := ret[0].(*types2.GenesisState)
	return ret0
}

// ExportGenesis indicates an expected call of ExportGenesis.
func (mr *MockTokenFactoryKeeperMockRecorder) ExportGenesis(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportGenesis", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).ExportGenesis), ctx)
}

// GetAuthorityMetadata mocks base method.
func (m *MockTokenFactoryKeeper) GetAuthorityMetadata(ctx types.Context, denom string) (types2.DenomAuthorityMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorityMetadata", ctx, denom)
	ret0, _ := ret[0].(types2.DenomAuthorityMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorityMetadata indicates an expected call of GetAuthorityMetadata.
func (mr *MockTokenFactoryKeeperMockRecorder) GetAuthorityMetadata(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorityMetadata", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).GetAuthorityMetadata), ctx, denom)
}

// GetDenomsFromCreator mocks base method.
func (m *MockTokenFactoryKeeper) GetDenomsFromCreator(ctx types.Context, creator string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenomsFromCreator", ctx, creator)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDenomsFromCreator indicates an expected call of GetDenomsFromCreator.
func (mr *MockTokenFactoryKeeperMockRecorder) GetDenomsFromCreator(ctx, creator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenomsFromCreator", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).GetDenomsFromCreator), ctx, creator)
}

// GetParams mocks base method.
func (m *MockTokenFactoryKeeper) GetParams(ctx types.Context) types2.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types2.Params)
	return ret0
}

// GetParams indicates an expected call of GetParams.
func (mr *MockTokenFactoryKeeperMockRecorder) GetParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).GetParams), ctx)
}

// InitGenesis mocks base method.
func (m *MockTokenFactoryKeeper) InitGenesis(ctx types.Context, genState types2.GenesisState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitGenesis", ctx, genState)
}

// InitGenesis indicates an expected call of InitGenesis.
func (mr *MockTokenFactoryKeeperMockRecorder) InitGenesis(ctx, genState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGenesis", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).InitGenesis), ctx, genState)
}

// MintTo mocks base method.
func (m *MockTokenFactoryKeeper) MintTo(ctx types.Context, amount types.Coin, mintTo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintTo", ctx, amount, mintTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// MintTo indicates an expected call of MintTo.
func (mr *MockTokenFactoryKeeperMockRecorder) MintTo(ctx, amount, mintTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintTo", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).MintTo), ctx, amount, mintTo)
}

// SetParams mocks base method.
func (m *MockTokenFactoryKeeper) SetParams(ctx types.Context, params types2.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParams", ctx, params)
}

// SetParams indicates an expected call of SetParams.
func (mr *MockTokenFactoryKeeperMockRecorder) SetParams(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockTokenFactoryKeeper)(nil).SetParams), ctx, params)
}

// MockSubspacesKeeper is a mock of SubspacesKeeper interface.
type MockSubspacesKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockSubspacesKeeperMockRecorder
}

// MockSubspacesKeeperMockRecorder is the mock recorder for MockSubspacesKeeper.
type MockSubspacesKeeperMockRecorder struct {
	mock *MockSubspacesKeeper
}

// NewMockSubspacesKeeper creates a new mock instance.
func NewMockSubspacesKeeper(ctrl *gomock.Controller) *MockSubspacesKeeper {
	mock := &MockSubspacesKeeper{ctrl: ctrl}
	mock.recorder = &MockSubspacesKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubspacesKeeper) EXPECT() *MockSubspacesKeeperMockRecorder {
	return m.recorder
}

// GetSubspace mocks base method.
func (m *MockSubspacesKeeper) GetSubspace(ctx types.Context, subspaceID uint64) (types1.Subspace, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubspace", ctx, subspaceID)
	ret0, _ := ret[0].(types1.Subspace)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSubspace indicates an expected call of GetSubspace.
func (mr *MockSubspacesKeeperMockRecorder) GetSubspace(ctx, subspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubspace", reflect.TypeOf((*MockSubspacesKeeper)(nil).GetSubspace), ctx, subspaceID)
}

// HasPermission mocks base method.
func (m *MockSubspacesKeeper) HasPermission(ctx types.Context, subspaceID uint64, sectionID uint32, user string, permission types1.Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", ctx, subspaceID, sectionID, user, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockSubspacesKeeperMockRecorder) HasPermission(ctx, subspaceID, sectionID, user, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockSubspacesKeeper)(nil).HasPermission), ctx, subspaceID, sectionID, user, permission)
}
