// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v3/msgs_relationships.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRelationship represents a message to create a relationship
// between two users on a specific subspace.
type MsgCreateRelationship struct {
	Sender     string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Receiver   string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty" yaml:"receiver"`
	SubspaceID uint64 `protobuf:"varint,3,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace"`
}

func (m *MsgCreateRelationship) Reset()         { *m = MsgCreateRelationship{} }
func (m *MsgCreateRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationship) ProtoMessage()    {}
func (*MsgCreateRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{0}
}
func (m *MsgCreateRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationship.Merge(m, src)
}
func (m *MsgCreateRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationship proto.InternalMessageInfo

// MsgCreateRelationshipResponse defines the Msg/CreateRelationship response
// type.
type MsgCreateRelationshipResponse struct {
}

func (m *MsgCreateRelationshipResponse) Reset()         { *m = MsgCreateRelationshipResponse{} }
func (m *MsgCreateRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationshipResponse) ProtoMessage()    {}
func (*MsgCreateRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{1}
}
func (m *MsgCreateRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationshipResponse.Merge(m, src)
}
func (m *MsgCreateRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationshipResponse proto.InternalMessageInfo

// MsgDeleteRelationship represents a message to delete the relationship
// between two users.
type MsgDeleteRelationship struct {
	User         string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
	Counterparty string `protobuf:"bytes,2,opt,name=counterparty,proto3" json:"counterparty,omitempty" yaml:"counterparty"`
	SubspaceID   uint64 `protobuf:"varint,3,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace"`
}

func (m *MsgDeleteRelationship) Reset()         { *m = MsgDeleteRelationship{} }
func (m *MsgDeleteRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelationship) ProtoMessage()    {}
func (*MsgDeleteRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{2}
}
func (m *MsgDeleteRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelationship.Merge(m, src)
}
func (m *MsgDeleteRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelationship proto.InternalMessageInfo

func (m *MsgDeleteRelationship) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgDeleteRelationship) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *MsgDeleteRelationship) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgDeleteRelationshipResponse defines the Msg/DeleteRelationship response
// type.
type MsgDeleteRelationshipResponse struct {
}

func (m *MsgDeleteRelationshipResponse) Reset()         { *m = MsgDeleteRelationshipResponse{} }
func (m *MsgDeleteRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelationshipResponse) ProtoMessage()    {}
func (*MsgDeleteRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{3}
}
func (m *MsgDeleteRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelationshipResponse.Merge(m, src)
}
func (m *MsgDeleteRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelationshipResponse proto.InternalMessageInfo

// MsgBlockUser represents a message to block another user specifying an
// optional reason.
type MsgBlockUser struct {
	Blocker    string `protobuf:"bytes,1,opt,name=blocker,proto3" json:"blocker,omitempty" yaml:"blocker"`
	Blocked    string `protobuf:"bytes,2,opt,name=blocked,proto3" json:"blocked,omitempty" yaml:"blocked"`
	Reason     string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" yaml:"reason"`
	SubspaceID uint64 `protobuf:"varint,4,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace"`
}

func (m *MsgBlockUser) Reset()         { *m = MsgBlockUser{} }
func (m *MsgBlockUser) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUser) ProtoMessage()    {}
func (*MsgBlockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{4}
}
func (m *MsgBlockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUser.Merge(m, src)
}
func (m *MsgBlockUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUser proto.InternalMessageInfo

func (m *MsgBlockUser) GetBlocker() string {
	if m != nil {
		return m.Blocker
	}
	return ""
}

func (m *MsgBlockUser) GetBlocked() string {
	if m != nil {
		return m.Blocked
	}
	return ""
}

func (m *MsgBlockUser) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgBlockUser) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgBlockUserResponse defines the Msg/BlockUser response type.
type MsgBlockUserResponse struct {
}

func (m *MsgBlockUserResponse) Reset()         { *m = MsgBlockUserResponse{} }
func (m *MsgBlockUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUserResponse) ProtoMessage()    {}
func (*MsgBlockUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{5}
}
func (m *MsgBlockUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUserResponse.Merge(m, src)
}
func (m *MsgBlockUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUserResponse proto.InternalMessageInfo

// MsgUnblockUser represents a message to unblock a previously blocked user.
type MsgUnblockUser struct {
	Blocker    string `protobuf:"bytes,1,opt,name=blocker,proto3" json:"blocker,omitempty" yaml:"blocker"`
	Blocked    string `protobuf:"bytes,2,opt,name=blocked,proto3" json:"blocked,omitempty" yaml:"blocked"`
	SubspaceID uint64 `protobuf:"varint,4,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace"`
}

func (m *MsgUnblockUser) Reset()         { *m = MsgUnblockUser{} }
func (m *MsgUnblockUser) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockUser) ProtoMessage()    {}
func (*MsgUnblockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{6}
}
func (m *MsgUnblockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockUser.Merge(m, src)
}
func (m *MsgUnblockUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockUser proto.InternalMessageInfo

func (m *MsgUnblockUser) GetBlocker() string {
	if m != nil {
		return m.Blocker
	}
	return ""
}

func (m *MsgUnblockUser) GetBlocked() string {
	if m != nil {
		return m.Blocked
	}
	return ""
}

func (m *MsgUnblockUser) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgUnblockUserResponse defines the Msg/UnblockUser response type.
type MsgUnblockUserResponse struct {
}

func (m *MsgUnblockUserResponse) Reset()         { *m = MsgUnblockUserResponse{} }
func (m *MsgUnblockUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockUserResponse) ProtoMessage()    {}
func (*MsgUnblockUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5c94f36538e44ae, []int{7}
}
func (m *MsgUnblockUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockUserResponse.Merge(m, src)
}
func (m *MsgUnblockUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockUserResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateRelationship)(nil), "desmos.profiles.v3.MsgCreateRelationship")
	proto.RegisterType((*MsgCreateRelationshipResponse)(nil), "desmos.profiles.v3.MsgCreateRelationshipResponse")
	proto.RegisterType((*MsgDeleteRelationship)(nil), "desmos.profiles.v3.MsgDeleteRelationship")
	proto.RegisterType((*MsgDeleteRelationshipResponse)(nil), "desmos.profiles.v3.MsgDeleteRelationshipResponse")
	proto.RegisterType((*MsgBlockUser)(nil), "desmos.profiles.v3.MsgBlockUser")
	proto.RegisterType((*MsgBlockUserResponse)(nil), "desmos.profiles.v3.MsgBlockUserResponse")
	proto.RegisterType((*MsgUnblockUser)(nil), "desmos.profiles.v3.MsgUnblockUser")
	proto.RegisterType((*MsgUnblockUserResponse)(nil), "desmos.profiles.v3.MsgUnblockUserResponse")
}

func init() {
	proto.RegisterFile("desmos/profiles/v3/msgs_relationships.proto", fileDescriptor_f5c94f36538e44ae)
}

var fileDescriptor_f5c94f36538e44ae = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0xe3, 0xdf, 0x2f, 0x2a, 0xe5, 0x5a, 0x5a, 0xe1, 0x96, 0x12, 0x2a, 0x61, 0x97, 0x63,
	0xa0, 0x08, 0x9a, 0x13, 0x64, 0x2b, 0x5b, 0xe8, 0x52, 0xa1, 0x2c, 0x46, 0x5d, 0x58, 0x22, 0xff,
	0x79, 0x7a, 0xb5, 0x70, 0x7c, 0xe6, 0x1e, 0x3b, 0x22, 0xef, 0x80, 0x91, 0x97, 0xd0, 0x97, 0xc0,
	0x1b, 0x60, 0x60, 0x63, 0xec, 0x08, 0x8b, 0x85, 0x92, 0x85, 0x39, 0xaf, 0x00, 0xd9, 0x77, 0x76,
	0x92, 0x36, 0x30, 0xa0, 0x8a, 0xed, 0xee, 0xf9, 0x7e, 0xfc, 0xf8, 0xf9, 0x48, 0xf7, 0x90, 0x27,
	0x01, 0xe0, 0x40, 0x20, 0x4b, 0xa4, 0x38, 0x0d, 0x23, 0x40, 0x36, 0xec, 0xb0, 0x01, 0x72, 0xec,
	0x4b, 0x88, 0xdc, 0x34, 0x14, 0x31, 0x9e, 0x85, 0x09, 0xb6, 0x13, 0x29, 0x52, 0x61, 0x9a, 0x0a,
	0x6e, 0x57, 0x70, 0x7b, 0xd8, 0xd9, 0xdd, 0xe6, 0x82, 0x8b, 0x32, 0x66, 0xc5, 0x49, 0x91, 0xbb,
	0xf7, 0xb8, 0x10, 0x3c, 0x02, 0x56, 0xde, 0xbc, 0xec, 0x94, 0xb9, 0xf1, 0xa8, 0x8a, 0x7c, 0x51,
	0x34, 0xe9, 0xab, 0x6f, 0xd4, 0x45, 0x47, 0x8f, 0x96, 0x0d, 0x23, 0x02, 0x88, 0x4a, 0xba, 0x28,
	0x69, 0xf0, 0xe0, 0xf7, 0xe0, 0x92, 0xb9, 0xff, 0x84, 0x07, 0xa9, 0xcb, 0xfb, 0x12, 0xde, 0x65,
	0x80, 0xa9, 0xc6, 0xe9, 0x17, 0x83, 0xdc, 0xe9, 0x21, 0x7f, 0x29, 0xc1, 0x4d, 0xc1, 0x99, 0xeb,
	0x67, 0x3e, 0x26, 0x2b, 0x08, 0x71, 0x00, 0xb2, 0x65, 0xec, 0x19, 0xfb, 0x37, 0xbb, 0xb7, 0xa7,
	0xb9, 0x7d, 0x6b, 0xe4, 0x0e, 0xa2, 0x43, 0xaa, 0xea, 0xd4, 0xd1, 0x80, 0xc9, 0xc8, 0xaa, 0x04,
	0x1f, 0xc2, 0x21, 0xc8, 0xd6, 0x7f, 0x25, 0xbc, 0x35, 0xcd, 0xed, 0x4d, 0x05, 0x57, 0x09, 0x75,
	0x6a, 0xc8, 0xec, 0x92, 0x35, 0xcc, 0x3c, 0x4c, 0x5c, 0x1f, 0xfa, 0x61, 0xd0, 0xfa, 0x7f, 0xcf,
	0xd8, 0x6f, 0x76, 0x1f, 0x8c, 0x73, 0x9b, 0xbc, 0xd6, 0xe5, 0xe3, 0xa3, 0x59, 0x87, 0x0a, 0xa5,
	0x0e, 0xa9, 0x8e, 0xc7, 0xc1, 0xe1, 0xea, 0x87, 0x73, 0xbb, 0xf1, 0xf3, 0xdc, 0x6e, 0x50, 0x9b,
	0xdc, 0x5f, 0xaa, 0xe0, 0x00, 0x26, 0x22, 0x46, 0xa0, 0x9f, 0x95, 0xe4, 0x11, 0x44, 0x70, 0x49,
	0xf2, 0x21, 0x69, 0x66, 0x58, 0x2b, 0x6e, 0x4e, 0x73, 0x7b, 0x4d, 0xfd, 0xb3, 0xa8, 0x52, 0xa7,
	0x0c, 0xcd, 0x17, 0x64, 0xdd, 0x17, 0x59, 0x9c, 0x82, 0x4c, 0x5c, 0x99, 0x8e, 0xb4, 0xe2, 0xdd,
	0x69, 0x6e, 0x6f, 0x29, 0x78, 0x3e, 0xa5, 0xce, 0x02, 0x7c, 0x1d, 0xaa, 0x5a, 0xf0, 0xea, 0xf8,
	0xb5, 0xe0, 0x77, 0x83, 0xac, 0xf7, 0x90, 0x77, 0x23, 0xe1, 0xbf, 0x3d, 0x29, 0x46, 0x7e, 0x4a,
	0x6e, 0x78, 0xc5, 0xa5, 0x56, 0x33, 0xa7, 0xb9, 0xbd, 0xa1, 0xfe, 0xa1, 0x03, 0xea, 0x54, 0xc8,
	0x8c, 0x0e, 0xb4, 0xdb, 0x15, 0x3a, 0xa8, 0xe9, 0xa0, 0x78, 0x18, 0x12, 0x5c, 0x14, 0x71, 0x29,
	0xb3, 0xf0, 0x30, 0x54, 0x9d, 0x3a, 0x1a, 0xb8, 0x2c, 0xdf, 0xfc, 0x1b, 0xf9, 0x1d, 0xb2, 0x3d,
	0xaf, 0x56, 0x3b, 0x7f, 0x32, 0xc8, 0x46, 0x0f, 0xf9, 0x49, 0xec, 0xfd, 0x13, 0xeb, 0xeb, 0x50,
	0x69, 0x91, 0x9d, 0xc5, 0x89, 0x2b, 0x99, 0xee, 0xab, 0xaf, 0x63, 0xcb, 0xb8, 0x18, 0x5b, 0xc6,
	0x8f, 0xb1, 0x65, 0x7c, 0x9c, 0x58, 0x8d, 0x8b, 0x89, 0xd5, 0xf8, 0x36, 0xb1, 0x1a, 0x6f, 0x9e,
	0xf1, 0x30, 0x3d, 0xcb, 0xbc, 0xb6, 0x2f, 0x06, 0x4c, 0xad, 0xf6, 0x41, 0xe4, 0x7a, 0xa8, 0xcf,
	0x6c, 0xf8, 0x9c, 0xbd, 0x9f, 0xed, 0x7a, 0x3a, 0x4a, 0x00, 0xbd, 0x95, 0x72, 0xb5, 0x3b, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x17, 0xf1, 0x0d, 0xf0, 0x04, 0x00, 0x00,
}

func (m *MsgCreateRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBlockUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnblockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintMsgsRelationships(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnblockUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgsRelationships(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgsRelationships(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgsRelationships(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgCreateRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgsRelationships(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgDeleteRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBlockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgsRelationships(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgBlockUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnblockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovMsgsRelationships(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgsRelationships(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgUnblockUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgsRelationships(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgsRelationships(x uint64) (n int) {
	return sovMsgsRelationships(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgsRelationships(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgsRelationships
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgsRelationships(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgsRelationships
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgsRelationships
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgsRelationships
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgsRelationships
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgsRelationships
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgsRelationships        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgsRelationships          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgsRelationships = fmt.Errorf("proto: unexpected end of group")
)
