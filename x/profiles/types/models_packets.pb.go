// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v3/models_packets.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LinkChainAccountPacketData defines the object that should be sent inside a
// MsgSendPacket when wanting to link an external chain to a Desmos profile
// using IBC
type LinkChainAccountPacketData struct {
	// SourceAddress contains the details of the external chain address
	SourceAddress *types.Any `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty" yaml:"source_address"`
	// SourceProof represents the proof of ownership of the source address
	SourceProof Proof `protobuf:"bytes,2,opt,name=source_proof,json=sourceProof,proto3" json:"source_proof" yaml:"source_proof"`
	// SourceChainConfig contains the details of the source chain
	SourceChainConfig ChainConfig `protobuf:"bytes,3,opt,name=source_chain_config,json=sourceChainConfig,proto3" json:"source_chain_config" yaml:"source_chain_config"`
	// DestinationAddress represents the Desmos address of the profile that should
	// be linked with the external account
	DestinationAddress string `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty" yaml:"destination_address"`
	// DestinationProof contains the proof of ownership of the DestinationAddress
	DestinationProof Proof `protobuf:"bytes,5,opt,name=destination_proof,json=destinationProof,proto3" json:"destination_proof" yaml:"destination_proof"`
}

func (m *LinkChainAccountPacketData) Reset()         { *m = LinkChainAccountPacketData{} }
func (m *LinkChainAccountPacketData) String() string { return proto.CompactTextString(m) }
func (*LinkChainAccountPacketData) ProtoMessage()    {}
func (*LinkChainAccountPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd3778626d03f03, []int{0}
}
func (m *LinkChainAccountPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkChainAccountPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkChainAccountPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkChainAccountPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkChainAccountPacketData.Merge(m, src)
}
func (m *LinkChainAccountPacketData) XXX_Size() int {
	return m.Size()
}
func (m *LinkChainAccountPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkChainAccountPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_LinkChainAccountPacketData proto.InternalMessageInfo

// LinkChainAccountPacketAck defines a struct for the packet acknowledgment
type LinkChainAccountPacketAck struct {
	// SourceAddress contains the external address that has been linked properly
	// with the profile
	SourceAddress string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (m *LinkChainAccountPacketAck) Reset()         { *m = LinkChainAccountPacketAck{} }
func (m *LinkChainAccountPacketAck) String() string { return proto.CompactTextString(m) }
func (*LinkChainAccountPacketAck) ProtoMessage()    {}
func (*LinkChainAccountPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecd3778626d03f03, []int{1}
}
func (m *LinkChainAccountPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkChainAccountPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkChainAccountPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkChainAccountPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkChainAccountPacketAck.Merge(m, src)
}
func (m *LinkChainAccountPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *LinkChainAccountPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkChainAccountPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_LinkChainAccountPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LinkChainAccountPacketData)(nil), "desmos.profiles.v3.LinkChainAccountPacketData")
	proto.RegisterType((*LinkChainAccountPacketAck)(nil), "desmos.profiles.v3.LinkChainAccountPacketAck")
}

func init() {
	proto.RegisterFile("desmos/profiles/v3/models_packets.proto", fileDescriptor_ecd3778626d03f03)
}

var fileDescriptor_ecd3778626d03f03 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x6f, 0xd3, 0x4c,
	0x18, 0xb7, 0xdf, 0x37, 0x20, 0xd5, 0x05, 0x44, 0x9c, 0x20, 0x25, 0x19, 0xec, 0xc8, 0x52, 0xd5,
	0x0a, 0x14, 0x9f, 0x20, 0x82, 0xa1, 0x4c, 0x71, 0x19, 0x90, 0x60, 0xa8, 0xc2, 0xc6, 0x40, 0x74,
	0xb1, 0x2f, 0xee, 0x29, 0xf6, 0x3d, 0x96, 0xef, 0x12, 0x25, 0xdf, 0x80, 0x91, 0x8f, 0xc0, 0xc8,
	0xc8, 0xd0, 0x0f, 0x51, 0x31, 0xa0, 0x8a, 0x89, 0x29, 0x42, 0xc9, 0xc0, 0xde, 0x4f, 0x80, 0x7c,
	0x77, 0xa1, 0x0e, 0x35, 0x62, 0xb1, 0xce, 0xf7, 0xfc, 0xfe, 0x3c, 0xcf, 0xef, 0x1e, 0xeb, 0x30,
	0x22, 0x3c, 0x05, 0x8e, 0xb2, 0x1c, 0x26, 0x34, 0x21, 0x1c, 0xcd, 0xfb, 0x28, 0x85, 0x88, 0x24,
	0x7c, 0x94, 0xe1, 0x70, 0x4a, 0x04, 0xf7, 0xb3, 0x1c, 0x04, 0xd8, 0xb6, 0x02, 0xfa, 0x5b, 0xa0,
	0x3f, 0xef, 0x77, 0xea, 0x38, 0xa5, 0x0c, 0x90, 0xfc, 0x2a, 0x58, 0xa7, 0x19, 0x43, 0x0c, 0xf2,
	0x88, 0x8a, 0x93, 0xbe, 0x6d, 0xc7, 0x00, 0x71, 0x42, 0x90, 0xfc, 0x1b, 0xcf, 0x26, 0x08, 0xb3,
	0xe5, 0xb6, 0x14, 0x42, 0xa1, 0x3b, 0x52, 0x1c, 0xf5, 0xa3, 0x4b, 0x8f, 0xfe, 0xde, 0x5b, 0x78,
	0x86, 0x29, 0x1b, 0x25, 0x94, 0x4d, 0x35, 0xd8, 0xfb, 0x5a, 0xb3, 0x3a, 0xaf, 0x29, 0x9b, 0x9e,
	0x14, 0x95, 0x41, 0x18, 0xc2, 0x8c, 0x89, 0x53, 0x39, 0xc1, 0x0b, 0x2c, 0xb0, 0xbd, 0xb0, 0xee,
	0x71, 0x98, 0xe5, 0x21, 0x19, 0xe1, 0x28, 0xca, 0x09, 0xe7, 0x2d, 0xb3, 0x6b, 0x1e, 0xed, 0x3f,
	0x69, 0xfa, 0xaa, 0x35, 0x7f, 0xdb, 0x9a, 0x3f, 0x60, 0xcb, 0xe0, 0xf9, 0xd5, 0xca, 0x7d, 0xb0,
	0xc4, 0x69, 0x72, 0xec, 0xed, 0xb2, 0xbc, 0x2f, 0xe7, 0x3d, 0xe7, 0x66, 0x12, 0xfe, 0x40, 0x95,
	0x0b, 0xab, 0xe1, 0x5d, 0x45, 0xd1, 0x57, 0xf6, 0x3b, 0xeb, 0x8e, 0xd6, 0xc8, 0x72, 0x80, 0x49,
	0xeb, 0x3f, 0xe9, 0xdb, 0xf6, 0x2b, 0x54, 0x4e, 0x0b, 0x40, 0xd0, 0xbd, 0x58, 0xb9, 0xc6, 0xd5,
	0xca, 0x6d, 0xec, 0x34, 0x20, 0xc9, 0xde, 0xa7, 0x9f, 0x9f, 0x1f, 0x9a, 0xc3, 0x7d, 0x75, 0x27,
	0xe1, 0xf6, 0xc2, 0x6a, 0x68, 0x88, 0x0a, 0x25, 0x04, 0x36, 0xa1, 0x71, 0xeb, 0x7f, 0x69, 0xe3,
	0x56, 0xd9, 0xc8, 0x88, 0x4e, 0x24, 0x2c, 0x38, 0xd4, 0x66, 0x9d, 0x1d, 0xb3, 0xb2, 0x92, 0xf6,
	0xac, 0xab, 0x52, 0x89, 0x6b, 0xc7, 0x56, 0x23, 0x22, 0x5c, 0x50, 0x86, 0x05, 0x05, 0xf6, 0x3b,
	0xd8, 0x5a, 0xd7, 0x3c, 0xda, 0x0b, 0x9e, 0x5d, 0x8b, 0x56, 0x80, 0xbc, 0x6f, 0xe7, 0xbd, 0xa6,
	0x7e, 0x6c, 0x1d, 0xd4, 0x1b, 0x91, 0x53, 0x16, 0x0f, 0xed, 0x12, 0x7a, 0x1b, 0x61, 0x6a, 0xd5,
	0xcb, 0x1a, 0x2a, 0xc7, 0x5b, 0xff, 0xca, 0xf1, 0x40, 0x8f, 0xd6, 0xba, 0xd9, 0x45, 0x39, 0xcc,
	0xfb, 0xa5, 0x82, 0x24, 0x1e, 0xd7, 0xde, 0x7f, 0x74, 0x0d, 0xef, 0xa5, 0xd5, 0xae, 0xde, 0xa7,
	0x41, 0x38, 0xb5, 0x0f, 0x2a, 0xd7, 0x69, 0xef, 0x8f, 0xb7, 0x57, 0x4a, 0xc1, 0xab, 0x8b, 0xb5,
	0x63, 0x5e, 0xae, 0x1d, 0xf3, 0xc7, 0xda, 0x31, 0x3f, 0x6c, 0x1c, 0xe3, 0x72, 0xe3, 0x18, 0xdf,
	0x37, 0x8e, 0xf1, 0xf6, 0x71, 0x4c, 0xc5, 0xd9, 0x6c, 0xec, 0x87, 0x90, 0x22, 0x35, 0x47, 0x2f,
	0xc1, 0x63, 0xae, 0xcf, 0x68, 0xfe, 0x14, 0x2d, 0xae, 0xb7, 0x5f, 0x2c, 0x33, 0xc2, 0xc7, 0xb7,
	0xe5, 0xa2, 0xf6, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xc4, 0xae, 0x9f, 0xb9, 0x03, 0x00,
	0x00,
}

func (m *LinkChainAccountPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkChainAccountPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkChainAccountPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DestinationProof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModelsPackets(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintModelsPackets(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.SourceChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModelsPackets(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SourceProof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModelsPackets(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.SourceAddress != nil {
		{
			size, err := m.SourceAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelsPackets(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LinkChainAccountPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkChainAccountPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkChainAccountPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintModelsPackets(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModelsPackets(dAtA []byte, offset int, v uint64) int {
	offset -= sovModelsPackets(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LinkChainAccountPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceAddress != nil {
		l = m.SourceAddress.Size()
		n += 1 + l + sovModelsPackets(uint64(l))
	}
	l = m.SourceProof.Size()
	n += 1 + l + sovModelsPackets(uint64(l))
	l = m.SourceChainConfig.Size()
	n += 1 + l + sovModelsPackets(uint64(l))
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovModelsPackets(uint64(l))
	}
	l = m.DestinationProof.Size()
	n += 1 + l + sovModelsPackets(uint64(l))
	return n
}

func (m *LinkChainAccountPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovModelsPackets(uint64(l))
	}
	return n
}

func sovModelsPackets(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModelsPackets(x uint64) (n int) {
	return sovModelsPackets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LinkChainAccountPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsPackets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkChainAccountPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkChainAccountPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsPackets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceAddress == nil {
				m.SourceAddress = &types.Any{}
			}
			if err := m.SourceAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsPackets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsPackets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsPackets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsPackets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestinationProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsPackets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkChainAccountPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsPackets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkChainAccountPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkChainAccountPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsPackets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsPackets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsPackets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModelsPackets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModelsPackets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelsPackets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModelsPackets
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModelsPackets
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModelsPackets
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModelsPackets        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModelsPackets          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModelsPackets = fmt.Errorf("proto: unexpected end of group")
)
