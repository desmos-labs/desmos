// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("desmos/profiles/v1beta1/query.proto", fileDescriptor_5e0074f57a59f38d)
}

var fileDescriptor_5e0074f57a59f38d = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0x87, 0x63, 0x24, 0x5a, 0xc9, 0x12, 0x48, 0x58, 0x48, 0x88, 0x08, 0x1d, 0x02, 0x86, 0x42,
	0xd3, 0x9c, 0x9b, 0xa4, 0x02, 0x89, 0xb1, 0x30, 0x30, 0x30, 0x94, 0xaa, 0x2c, 0x2c, 0x91, 0x2f,
	0x75, 0x2e, 0xa7, 0x5e, 0xec, 0xab, 0x5f, 0x1f, 0xa2, 0x42, 0x2c, 0xcc, 0x0c, 0x48, 0x2c, 0x7c,
	0x00, 0x16, 0x36, 0x3e, 0x02, 0x23, 0x63, 0x25, 0x16, 0x46, 0x94, 0xf0, 0x29, 0x98, 0xd0, 0xf9,
	0xcf, 0x95, 0x28, 0xba, 0xcb, 0x65, 0x8b, 0x9d, 0xe7, 0xf7, 0xbe, 0x8f, 0xed, 0xb3, 0xf1, 0xbd,
	0x63, 0x0e, 0x53, 0x09, 0x34, 0x53, 0x72, 0x9c, 0xa4, 0x1c, 0xe8, 0xeb, 0x5e, 0xc4, 0x35, 0xeb,
	0xd1, 0xd3, 0x9c, 0xab, 0xb3, 0x30, 0x53, 0x52, 0x4b, 0x72, 0xc3, 0x42, 0xa1, 0x87, 0x42, 0x07,
	0xb5, 0xaf, 0xc7, 0x32, 0x96, 0x86, 0xa1, 0xc5, 0x2f, 0x8b, 0xb7, 0x6f, 0xc5, 0x52, 0xc6, 0x29,
	0xa7, 0x2c, 0x4b, 0x28, 0x13, 0x42, 0x6a, 0xa6, 0x13, 0x29, 0xc0, 0xfd, 0x7b, 0xd3, 0xfd, 0x6b,
	0x46, 0x51, 0x3e, 0xa6, 0x4c, 0xb8, 0x3e, 0xed, 0x4e, 0xad, 0xcc, 0xd0, 0x4d, 0x3b, 0xb8, 0x57,
	0x0f, 0x2b, 0x9e, 0xda, 0xb6, 0x93, 0x24, 0x83, 0x66, 0x91, 0x63, 0xcd, 0xe2, 0xa1, 0xe2, 0xa7,
	0x39, 0x07, 0xed, 0x23, 0xdb, 0x2b, 0x94, 0x98, 0x62, 0x53, 0xcf, 0xd2, 0x7a, 0x76, 0x34, 0x61,
	0x89, 0x18, 0xa6, 0x89, 0x38, 0x29, 0xb7, 0x62, 0x24, 0x8b, 0xc0, 0xd0, 0xee, 0xa0, 0x1d, 0xf8,
	0xbe, 0x76, 0x44, 0x23, 0x06, 0xdc, 0xe6, 0xcb, 0x6a, 0x19, 0x8b, 0x13, 0x61, 0xd6, 0x66, 0xd9,
	0xfe, 0xdf, 0x4d, 0x7c, 0xf9, 0x45, 0x81, 0x90, 0xcf, 0x08, 0x6f, 0x1e, 0xd8, 0xee, 0x64, 0x27,
	0xac, 0x38, 0xb5, 0xd0, 0xb0, 0x0e, 0x3b, 0xb4, 0xcb, 0x6d, 0x77, 0x1b, 0xd2, 0x90, 0x49, 0x01,
	0xfc, 0xee, 0xee, 0xfb, 0x9f, 0x7f, 0x3e, 0x5d, 0xda, 0x26, 0xf7, 0x2b, 0xd7, 0x5c, 0x4e, 0xbc,
	0xcd, 0x81, 0xab, 0x77, 0xe4, 0x2b, 0xc2, 0x57, 0x9e, 0x1e, 0xb1, 0xf8, 0x48, 0x31, 0x01, 0x63,
	0xae, 0x80, 0xf4, 0xeb, 0x5b, 0x2e, 0xc0, 0x5e, 0x73, 0xb0, 0x56, 0xc6, 0xc9, 0x52, 0x23, 0xfb,
	0x80, 0x6c, 0x55, 0xca, 0x9a, 0x93, 0xd7, 0xa5, 0xd9, 0x07, 0x84, 0x37, 0x0e, 0xcc, 0xc9, 0x92,
	0xce, 0x8a, 0x7d, 0x31, 0x94, 0xb7, 0xdb, 0x69, 0x06, 0x3b, 0xad, 0x2d, 0xa3, 0x75, 0x87, 0xdc,
	0xae, 0xde, 0x43, 0xeb, 0xf0, 0x1d, 0xe1, 0x6b, 0x2f, 0x81, 0xab, 0xc3, 0xff, 0x3f, 0x69, 0xf2,
	0xb0, 0xbe, 0xd9, 0x52, 0xc0, 0x4b, 0x3e, 0x5a, 0x3b, 0xe7, 0x7c, 0x1f, 0x1b, 0xdf, 0x3d, 0xd2,
	0xf7, 0xbe, 0x0b, 0x57, 0xac, 0x94, 0x5e, 0x9c, 0x75, 0xa7, 0xff, 0x05, 0x61, 0x5c, 0x54, 0xde,
	0x4f, 0xe5, 0xe8, 0x04, 0x08, 0x5d, 0xed, 0x60, 0x49, 0x2f, 0xbd, 0xdb, 0x3c, 0xe0, 0x6c, 0x07,
	0xc6, 0xb6, 0x4b, 0x3a, 0xf5, 0xb6, 0x91, 0x49, 0x79, 0xcd, 0x6f, 0x08, 0x5f, 0x2d, 0x6a, 0x3d,
	0x29, 0xae, 0xea, 0xf3, 0xe2, 0xa6, 0x92, 0xc1, 0xea, 0xce, 0x17, 0xb4, 0xd7, 0xdd, 0x5b, 0x2f,
	0x54, 0xa5, 0xbc, 0xf4, 0x41, 0x98, 0x27, 0xa4, 0x6b, 0x9e, 0x10, 0xa7, 0xbc, 0xff, 0xec, 0xc7,
	0x2c, 0x40, 0xe7, 0xb3, 0x00, 0xfd, 0x9e, 0x05, 0xe8, 0xe3, 0x3c, 0x68, 0x9d, 0xcf, 0x83, 0xd6,
	0xaf, 0x79, 0xd0, 0x7a, 0x15, 0xc6, 0x89, 0x9e, 0xe4, 0x51, 0x38, 0x92, 0x53, 0x57, 0xb0, 0x9b,
	0xb2, 0x08, 0x7c, 0xf1, 0x37, 0x17, 0xe5, 0xf5, 0x59, 0xc6, 0x21, 0xda, 0x30, 0xaf, 0xc9, 0xe0,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x2e, 0xd1, 0x1c, 0x13, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Profile queries the profile of a specific user given their DTag or address.
	// If the queried user does not have a profile, the returned response will
	// contain a null profile.
	Profile(ctx context.Context, in *QueryProfileRequest, opts ...grpc.CallOption) (*QueryProfileResponse, error)
	// DTagTransfers queries all the DTag transfers requests that have been made
	// towards the user with the given address
	DTagTransfers(ctx context.Context, in *QueryDTagTransfersRequest, opts ...grpc.CallOption) (*QueryDTagTransfersResponse, error)
	// Params queries the profiles module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// UserRelationships queries the relationships for the user having the given
	// address
	UserRelationships(ctx context.Context, in *QueryUserRelationshipsRequest, opts ...grpc.CallOption) (*QueryUserRelationshipsResponse, error)
	// UserBlocks queries the user blocks for the user having the given address
	UserBlocks(ctx context.Context, in *QueryUserBlocksRequest, opts ...grpc.CallOption) (*QueryUserBlocksResponse, error)
	// UserChainLinks queries chain links for the given user
	UserChainLinks(ctx context.Context, in *QueryUserChainLinksRequest, opts ...grpc.CallOption) (*QueryUserChainLinksResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Profile(ctx context.Context, in *QueryProfileRequest, opts ...grpc.CallOption) (*QueryProfileResponse, error) {
	out := new(QueryProfileResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DTagTransfers(ctx context.Context, in *QueryDTagTransfersRequest, opts ...grpc.CallOption) (*QueryDTagTransfersResponse, error) {
	out := new(QueryDTagTransfersResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/DTagTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRelationships(ctx context.Context, in *QueryUserRelationshipsRequest, opts ...grpc.CallOption) (*QueryUserRelationshipsResponse, error) {
	out := new(QueryUserRelationshipsResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/UserRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserBlocks(ctx context.Context, in *QueryUserBlocksRequest, opts ...grpc.CallOption) (*QueryUserBlocksResponse, error) {
	out := new(QueryUserBlocksResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/UserBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserChainLinks(ctx context.Context, in *QueryUserChainLinksRequest, opts ...grpc.CallOption) (*QueryUserChainLinksResponse, error) {
	out := new(QueryUserChainLinksResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/UserChainLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Profile queries the profile of a specific user given their DTag or address.
	// If the queried user does not have a profile, the returned response will
	// contain a null profile.
	Profile(context.Context, *QueryProfileRequest) (*QueryProfileResponse, error)
	// DTagTransfers queries all the DTag transfers requests that have been made
	// towards the user with the given address
	DTagTransfers(context.Context, *QueryDTagTransfersRequest) (*QueryDTagTransfersResponse, error)
	// Params queries the profiles module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// UserRelationships queries the relationships for the user having the given
	// address
	UserRelationships(context.Context, *QueryUserRelationshipsRequest) (*QueryUserRelationshipsResponse, error)
	// UserBlocks queries the user blocks for the user having the given address
	UserBlocks(context.Context, *QueryUserBlocksRequest) (*QueryUserBlocksResponse, error)
	// UserChainLinks queries chain links for the given user
	UserChainLinks(context.Context, *QueryUserChainLinksRequest) (*QueryUserChainLinksResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Profile(ctx context.Context, req *QueryProfileRequest) (*QueryProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedQueryServer) DTagTransfers(ctx context.Context, req *QueryDTagTransfersRequest) (*QueryDTagTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DTagTransfers not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UserRelationships(ctx context.Context, req *QueryUserRelationshipsRequest) (*QueryUserRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRelationships not implemented")
}
func (*UnimplementedQueryServer) UserBlocks(ctx context.Context, req *QueryUserBlocksRequest) (*QueryUserBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBlocks not implemented")
}
func (*UnimplementedQueryServer) UserChainLinks(ctx context.Context, req *QueryUserChainLinksRequest) (*QueryUserChainLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainLinks not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Profile(ctx, req.(*QueryProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DTagTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDTagTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DTagTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/DTagTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DTagTransfers(ctx, req.(*QueryDTagTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/UserRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRelationships(ctx, req.(*QueryUserRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/UserBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserBlocks(ctx, req.(*QueryUserBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserChainLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserChainLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserChainLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/UserChainLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserChainLinks(ctx, req.(*QueryUserChainLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.profiles.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _Query_Profile_Handler,
		},
		{
			MethodName: "DTagTransfers",
			Handler:    _Query_DTagTransfers_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserRelationships",
			Handler:    _Query_UserRelationships_Handler,
		},
		{
			MethodName: "UserBlocks",
			Handler:    _Query_UserBlocks_Handler,
		},
		{
			MethodName: "UserChainLinks",
			Handler:    _Query_UserChainLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/profiles/v1beta1/query.proto",
}
