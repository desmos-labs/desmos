// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("desmos/profiles/v1beta1/query.proto", fileDescriptor_5e0074f57a59f38d)
}

var fileDescriptor_5e0074f57a59f38d = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0xbb, 0x3f, 0xf8, 0x55, 0x18, 0xa8, 0xc8, 0x28, 0x48, 0x43, 0x89, 0xa8, 0x07, 0xb5,
	0x69, 0x76, 0x9a, 0x56, 0x4b, 0x2d, 0x52, 0x69, 0xda, 0x83, 0x15, 0x0f, 0xb5, 0xd4, 0x8b, 0x97,
	0x30, 0xbb, 0x9d, 0x6e, 0x87, 0x6e, 0x66, 0xa6, 0x33, 0x93, 0x62, 0x09, 0xb9, 0x78, 0xf6, 0x20,
	0x78, 0xe9, 0x0b, 0xf0, 0x25, 0xf8, 0x0e, 0xbc, 0x08, 0x5e, 0x0a, 0x82, 0x78, 0xf0, 0x20, 0xad,
	0x17, 0xdf, 0x85, 0xec, 0xfc, 0x49, 0x4c, 0x24, 0x9b, 0x4d, 0xbd, 0x65, 0x67, 0xbf, 0xdf, 0x79,
	0x3e, 0xdf, 0xe7, 0x99, 0xd9, 0x80, 0xdb, 0xbb, 0x44, 0x35, 0xb9, 0x42, 0x42, 0xf2, 0x3d, 0x9a,
	0x12, 0x85, 0x8e, 0x6a, 0x11, 0xd1, 0xb8, 0x86, 0x0e, 0x5b, 0x44, 0x1e, 0x87, 0x42, 0x72, 0xcd,
	0xe1, 0x75, 0x2b, 0x0a, 0xbd, 0x28, 0x74, 0xa2, 0xd2, 0xb5, 0x84, 0x27, 0xdc, 0x68, 0x50, 0xf6,
	0xcb, 0xca, 0x4b, 0x33, 0x09, 0xe7, 0x49, 0x4a, 0x10, 0x16, 0x14, 0x61, 0xc6, 0xb8, 0xc6, 0x9a,
	0x72, 0xa6, 0xdc, 0xdb, 0x69, 0xf7, 0xd6, 0x3c, 0x45, 0xad, 0x3d, 0x84, 0x99, 0xab, 0x53, 0xaa,
	0xe4, 0xc2, 0x34, 0xdc, 0xb2, 0x13, 0xd7, 0xf2, 0xc5, 0x92, 0xa4, 0xb6, 0xec, 0x3e, 0x15, 0xaa,
	0x98, 0x65, 0x57, 0xe3, 0xa4, 0x21, 0xc9, 0x61, 0x8b, 0x28, 0xed, 0x2d, 0xb3, 0x23, 0x90, 0xb0,
	0xc4, 0x4d, 0xaf, 0x45, 0xf9, 0xda, 0x78, 0x1f, 0x53, 0xd6, 0x48, 0x29, 0x3b, 0xf0, 0x86, 0x6a,
	0xbe, 0x01, 0x0b, 0xd1, 0x27, 0x9f, 0x8e, 0x79, 0x26, 0x6f, 0xd8, 0x86, 0xdb, 0x07, 0x8f, 0x69,
	0x9f, 0x50, 0x84, 0x15, 0xb1, 0xee, 0xee, 0x5e, 0x02, 0x27, 0x94, 0x99, 0x56, 0x58, 0xed, 0xc2,
	0xe7, 0xcb, 0xe0, 0xff, 0xe7, 0x99, 0x04, 0x9e, 0x04, 0xe0, 0xd2, 0x96, 0xad, 0x0d, 0xe7, 0xc2,
	0x21, 0x43, 0x0e, 0x8d, 0xd6, 0xc9, 0xb6, 0x6d, 0x77, 0x4a, 0xd5, 0x82, 0x6a, 0x25, 0x38, 0x53,
	0xe4, 0xd6, 0xfc, 0xeb, 0x2f, 0x3f, 0xdf, 0xfd, 0x37, 0x0b, 0xef, 0x0e, 0x6d, 0x51, 0x77, 0xa1,
	0xdd, 0x52, 0x44, 0x76, 0xe0, 0xaf, 0x00, 0xcc, 0x6c, 0xb2, 0x98, 0x37, 0x29, 0x4b, 0x36, 0x76,
	0x70, 0xb2, 0x23, 0x31, 0x53, 0x7b, 0x44, 0x3a, 0x00, 0x05, 0xd7, 0xf2, 0x09, 0xf2, 0xbc, 0x3e,
	0x44, 0xfd, 0x5f, 0xb6, 0x70, 0xc9, 0xea, 0x26, 0xd9, 0x23, 0xb8, 0x32, 0x34, 0x99, 0x39, 0x55,
	0xda, 0xf9, 0xbb, 0xc7, 0x0b, 0xb5, 0x25, 0x89, 0x09, 0x3d, 0xca, 0xb2, 0xbe, 0x09, 0xc0, 0xe4,
	0x96, 0x39, 0x48, 0xb0, 0x32, 0xa2, 0xaf, 0x46, 0xe5, 0xf9, 0xe7, 0x8a, 0x89, 0x1d, 0xe9, 0x1d,
	0x43, 0x7a, 0x13, 0xde, 0x18, 0x3e, 0x03, 0xcb, 0xf0, 0x21, 0x00, 0x53, 0xdb, 0x7f, 0xde, 0x1e,
	0xb8, 0x90, 0x5f, 0xa8, 0x4f, 0xec, 0xe1, 0x16, 0xc7, 0xf2, 0x38, 0xc6, 0x15, 0xc3, 0x78, 0x1f,
	0x2e, 0x78, 0xc6, 0xbe, 0x5b, 0xdc, 0x05, 0xed, 0x5f, 0x75, 0x27, 0xe6, 0x24, 0x00, 0x93, 0xf5,
	0x94, 0xc7, 0x07, 0x23, 0xbb, 0x68, 0x55, 0x05, 0xbb, 0xe8, 0xc5, 0x8e, 0x70, 0xd1, 0x10, 0x56,
	0x61, 0x25, 0x9f, 0x30, 0x32, 0x2e, 0x8f, 0xf6, 0x3e, 0x00, 0x60, 0x3d, 0xbb, 0xfd, 0xcf, 0xb2,
	0xdb, 0x0c, 0x51, 0x7e, 0xc5, 0x9e, 0xd2, 0x23, 0xce, 0x17, 0x37, 0x0c, 0xc3, 0xfc, 0x6b, 0xd8,
	0xe6, 0x6b, 0x54, 0x35, 0x9f, 0x17, 0x8f, 0xf9, 0x31, 0x00, 0x53, 0x2f, 0x14, 0x91, 0xdd, 0xfd,
	0x46, 0x0d, 0xbe, 0x4f, 0x5c, 0x70, 0xf0, 0x03, 0x1e, 0xc7, 0xbb, 0x69, 0x78, 0xd7, 0xe1, 0xda,
	0x18, 0xbc, 0xa8, 0x6d, 0xbf, 0xa8, 0x0c, 0x37, 0x49, 0x07, 0xb5, 0x35, 0x96, 0x09, 0xd1, 0x9d,
	0xec, 0xf8, 0x5e, 0x59, 0x13, 0x22, 0xa5, 0xb1, 0x99, 0x8b, 0x6d, 0xf9, 0x83, 0x7c, 0xa8, 0x41,
	0xbd, 0xcf, 0xb2, 0x34, 0xae, 0xcd, 0xc5, 0xa9, 0x99, 0x38, 0x15, 0x78, 0x6f, 0x68, 0x1c, 0x2c,
	0x44, 0x7f, 0xf3, 0xbf, 0x06, 0xe0, 0x6a, 0xd6, 0x9b, 0x81, 0x3d, 0xe1, 0xf2, 0xe8, 0x76, 0x0e,
	0x58, 0x3c, 0xfc, 0xc3, 0x0b, 0x38, 0x1d, 0xff, 0x53, 0xc3, 0xbf, 0x01, 0xeb, 0x85, 0xf9, 0x51,
	0x1b, 0xf7, 0xf6, 0xea, 0xd8, 0x45, 0x33, 0x18, 0xf8, 0x3d, 0x00, 0xd3, 0x03, 0x75, 0xea, 0xc7,
	0xeb, 0x29, 0x25, 0x4c, 0x6f, 0x6e, 0xc0, 0xd5, 0xb1, 0x3a, 0xdc, 0x33, 0xfa, 0x90, 0x8f, 0x2f,
	0xec, 0x77, 0x51, 0x57, 0x4d, 0xd4, 0x65, 0xb8, 0x54, 0x20, 0x6a, 0x6c, 0xcc, 0x0a, 0xb5, 0xed,
	0x8f, 0x06, 0xdd, 0xed, 0xd4, 0x9f, 0x7c, 0x3a, 0x2b, 0x07, 0xa7, 0x67, 0xe5, 0xe0, 0xc7, 0x59,
	0x39, 0x78, 0x7b, 0x5e, 0x9e, 0x38, 0x3d, 0x2f, 0x4f, 0x7c, 0x3b, 0x2f, 0x4f, 0xbc, 0x0c, 0x13,
	0xaa, 0xf7, 0x5b, 0x51, 0x18, 0xf3, 0xa6, 0xdb, 0xbb, 0x9a, 0xe2, 0x48, 0xf9, 0x3a, 0xaf, 0x7a,
	0x95, 0xf4, 0xb1, 0x20, 0x2a, 0x9a, 0x34, 0x7f, 0xcf, 0x8b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x6a, 0x7a, 0x47, 0x93, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Profile queries the profile of a specific user given their DTag or address.
	// If the queried user does not have a profile, the returned response will
	// contain a null profile.
	Profile(ctx context.Context, in *QueryProfileRequest, opts ...grpc.CallOption) (*QueryProfileResponse, error)
	// IncomingDTagTransferRequests queries all the DTag transfers requests that
	// have been made towards the user with the given address
	IncomingDTagTransferRequests(ctx context.Context, in *QueryIncomingDTagTransferRequestsRequest, opts ...grpc.CallOption) (*QueryIncomingDTagTransferRequestsResponse, error)
	// Params queries the profiles module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Relationships queries all relationships for the given user, if provided.
	// Otherwise, it queries all the relationships stored.
	Relationships(ctx context.Context, in *QueryRelationshipsRequest, opts ...grpc.CallOption) (*QueryRelationshipsResponse, error)
	// Blocks queries the blocks for the given user, if provided.
	// Otherwise, it queries all the stored blocks.
	Blocks(ctx context.Context, in *QueryBlocksRequest, opts ...grpc.CallOption) (*QueryBlocksResponse, error)
	// ChainLinks queries the chain links associated to the given user, if
	// provided. Otherwise it queries all the chain links stored.
	ChainLinks(ctx context.Context, in *QueryChainLinksRequest, opts ...grpc.CallOption) (*QueryChainLinksResponse, error)
	// UserChainLink queries the chain link for the given user, chain name and
	// target address
	UserChainLink(ctx context.Context, in *QueryUserChainLinkRequest, opts ...grpc.CallOption) (*QueryUserChainLinkResponse, error)
	// ApplicationLinks queries the applications links associated to the given
	// user, if provided. Otherwise, it queries all the application links stored.
	ApplicationLinks(ctx context.Context, in *QueryApplicationLinksRequest, opts ...grpc.CallOption) (*QueryApplicationLinksResponse, error)
	// UserApplicationLinks queries a single application link for a given user,
	// searching via the application name and username
	UserApplicationLink(ctx context.Context, in *QueryUserApplicationLinkRequest, opts ...grpc.CallOption) (*QueryUserApplicationLinkResponse, error)
	// ApplicationLinkByClientID queries a single application link for a given
	// client id.
	ApplicationLinkByClientID(ctx context.Context, in *QueryApplicationLinkByClientIDRequest, opts ...grpc.CallOption) (*QueryApplicationLinkByClientIDResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Profile(ctx context.Context, in *QueryProfileRequest, opts ...grpc.CallOption) (*QueryProfileResponse, error) {
	out := new(QueryProfileResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncomingDTagTransferRequests(ctx context.Context, in *QueryIncomingDTagTransferRequestsRequest, opts ...grpc.CallOption) (*QueryIncomingDTagTransferRequestsResponse, error) {
	out := new(QueryIncomingDTagTransferRequestsResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/IncomingDTagTransferRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Relationships(ctx context.Context, in *QueryRelationshipsRequest, opts ...grpc.CallOption) (*QueryRelationshipsResponse, error) {
	out := new(QueryRelationshipsResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/Relationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Blocks(ctx context.Context, in *QueryBlocksRequest, opts ...grpc.CallOption) (*QueryBlocksResponse, error) {
	out := new(QueryBlocksResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/Blocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainLinks(ctx context.Context, in *QueryChainLinksRequest, opts ...grpc.CallOption) (*QueryChainLinksResponse, error) {
	out := new(QueryChainLinksResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/ChainLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserChainLink(ctx context.Context, in *QueryUserChainLinkRequest, opts ...grpc.CallOption) (*QueryUserChainLinkResponse, error) {
	out := new(QueryUserChainLinkResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/UserChainLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApplicationLinks(ctx context.Context, in *QueryApplicationLinksRequest, opts ...grpc.CallOption) (*QueryApplicationLinksResponse, error) {
	out := new(QueryApplicationLinksResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/ApplicationLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserApplicationLink(ctx context.Context, in *QueryUserApplicationLinkRequest, opts ...grpc.CallOption) (*QueryUserApplicationLinkResponse, error) {
	out := new(QueryUserApplicationLinkResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/UserApplicationLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApplicationLinkByClientID(ctx context.Context, in *QueryApplicationLinkByClientIDRequest, opts ...grpc.CallOption) (*QueryApplicationLinkByClientIDResponse, error) {
	out := new(QueryApplicationLinkByClientIDResponse)
	err := c.cc.Invoke(ctx, "/desmos.profiles.v1beta1.Query/ApplicationLinkByClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Profile queries the profile of a specific user given their DTag or address.
	// If the queried user does not have a profile, the returned response will
	// contain a null profile.
	Profile(context.Context, *QueryProfileRequest) (*QueryProfileResponse, error)
	// IncomingDTagTransferRequests queries all the DTag transfers requests that
	// have been made towards the user with the given address
	IncomingDTagTransferRequests(context.Context, *QueryIncomingDTagTransferRequestsRequest) (*QueryIncomingDTagTransferRequestsResponse, error)
	// Params queries the profiles module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Relationships queries all relationships for the given user, if provided.
	// Otherwise, it queries all the relationships stored.
	Relationships(context.Context, *QueryRelationshipsRequest) (*QueryRelationshipsResponse, error)
	// Blocks queries the blocks for the given user, if provided.
	// Otherwise, it queries all the stored blocks.
	Blocks(context.Context, *QueryBlocksRequest) (*QueryBlocksResponse, error)
	// ChainLinks queries the chain links associated to the given user, if
	// provided. Otherwise it queries all the chain links stored.
	ChainLinks(context.Context, *QueryChainLinksRequest) (*QueryChainLinksResponse, error)
	// UserChainLink queries the chain link for the given user, chain name and
	// target address
	UserChainLink(context.Context, *QueryUserChainLinkRequest) (*QueryUserChainLinkResponse, error)
	// ApplicationLinks queries the applications links associated to the given
	// user, if provided. Otherwise, it queries all the application links stored.
	ApplicationLinks(context.Context, *QueryApplicationLinksRequest) (*QueryApplicationLinksResponse, error)
	// UserApplicationLinks queries a single application link for a given user,
	// searching via the application name and username
	UserApplicationLink(context.Context, *QueryUserApplicationLinkRequest) (*QueryUserApplicationLinkResponse, error)
	// ApplicationLinkByClientID queries a single application link for a given
	// client id.
	ApplicationLinkByClientID(context.Context, *QueryApplicationLinkByClientIDRequest) (*QueryApplicationLinkByClientIDResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Profile(ctx context.Context, req *QueryProfileRequest) (*QueryProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedQueryServer) IncomingDTagTransferRequests(ctx context.Context, req *QueryIncomingDTagTransferRequestsRequest) (*QueryIncomingDTagTransferRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomingDTagTransferRequests not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Relationships(ctx context.Context, req *QueryRelationshipsRequest) (*QueryRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relationships not implemented")
}
func (*UnimplementedQueryServer) Blocks(ctx context.Context, req *QueryBlocksRequest) (*QueryBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}
func (*UnimplementedQueryServer) ChainLinks(ctx context.Context, req *QueryChainLinksRequest) (*QueryChainLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainLinks not implemented")
}
func (*UnimplementedQueryServer) UserChainLink(ctx context.Context, req *QueryUserChainLinkRequest) (*QueryUserChainLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChainLink not implemented")
}
func (*UnimplementedQueryServer) ApplicationLinks(ctx context.Context, req *QueryApplicationLinksRequest) (*QueryApplicationLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationLinks not implemented")
}
func (*UnimplementedQueryServer) UserApplicationLink(ctx context.Context, req *QueryUserApplicationLinkRequest) (*QueryUserApplicationLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplicationLink not implemented")
}
func (*UnimplementedQueryServer) ApplicationLinkByClientID(ctx context.Context, req *QueryApplicationLinkByClientIDRequest) (*QueryApplicationLinkByClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationLinkByClientID not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Profile(ctx, req.(*QueryProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncomingDTagTransferRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncomingDTagTransferRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncomingDTagTransferRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/IncomingDTagTransferRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncomingDTagTransferRequests(ctx, req.(*QueryIncomingDTagTransferRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Relationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Relationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/Relationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Relationships(ctx, req.(*QueryRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Blocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Blocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/Blocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Blocks(ctx, req.(*QueryBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/ChainLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainLinks(ctx, req.(*QueryChainLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserChainLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserChainLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserChainLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/UserChainLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserChainLink(ctx, req.(*QueryUserChainLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApplicationLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApplicationLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApplicationLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/ApplicationLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApplicationLinks(ctx, req.(*QueryApplicationLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserApplicationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserApplicationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserApplicationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/UserApplicationLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserApplicationLink(ctx, req.(*QueryUserApplicationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApplicationLinkByClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApplicationLinkByClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApplicationLinkByClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.profiles.v1beta1.Query/ApplicationLinkByClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApplicationLinkByClientID(ctx, req.(*QueryApplicationLinkByClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.profiles.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _Query_Profile_Handler,
		},
		{
			MethodName: "IncomingDTagTransferRequests",
			Handler:    _Query_IncomingDTagTransferRequests_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Relationships",
			Handler:    _Query_Relationships_Handler,
		},
		{
			MethodName: "Blocks",
			Handler:    _Query_Blocks_Handler,
		},
		{
			MethodName: "ChainLinks",
			Handler:    _Query_ChainLinks_Handler,
		},
		{
			MethodName: "UserChainLink",
			Handler:    _Query_UserChainLink_Handler,
		},
		{
			MethodName: "ApplicationLinks",
			Handler:    _Query_ApplicationLinks_Handler,
		},
		{
			MethodName: "UserApplicationLink",
			Handler:    _Query_UserApplicationLink_Handler,
		},
		{
			MethodName: "ApplicationLinkByClientID",
			Handler:    _Query_ApplicationLinkByClientID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/profiles/v1beta1/query.proto",
}
