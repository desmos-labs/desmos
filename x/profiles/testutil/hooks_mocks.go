// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/profiles/types/hooks.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/desmos-labs/desmos/v6/x/profiles/types"
	gomock "github.com/golang/mock/gomock"
)

// MockProfilesHooks is a mock of ProfilesHooks interface.
type MockProfilesHooks struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesHooksMockRecorder
}

// MockProfilesHooksMockRecorder is the mock recorder for MockProfilesHooks.
type MockProfilesHooksMockRecorder struct {
	mock *MockProfilesHooks
}

// NewMockProfilesHooks creates a new mock instance.
func NewMockProfilesHooks(ctrl *gomock.Controller) *MockProfilesHooks {
	mock := &MockProfilesHooks{ctrl: ctrl}
	mock.recorder = &MockProfilesHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilesHooks) EXPECT() *MockProfilesHooksMockRecorder {
	return m.recorder
}

// AfterApplicationLinkDeleted mocks base method.
func (m *MockProfilesHooks) AfterApplicationLinkDeleted(ctx types.Context, link types0.ApplicationLink) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterApplicationLinkDeleted", ctx, link)
}

// AfterApplicationLinkDeleted indicates an expected call of AfterApplicationLinkDeleted.
func (mr *MockProfilesHooksMockRecorder) AfterApplicationLinkDeleted(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterApplicationLinkDeleted", reflect.TypeOf((*MockProfilesHooks)(nil).AfterApplicationLinkDeleted), ctx, link)
}

// AfterApplicationLinkSaved mocks base method.
func (m *MockProfilesHooks) AfterApplicationLinkSaved(ctx types.Context, link types0.ApplicationLink) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterApplicationLinkSaved", ctx, link)
}

// AfterApplicationLinkSaved indicates an expected call of AfterApplicationLinkSaved.
func (mr *MockProfilesHooksMockRecorder) AfterApplicationLinkSaved(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterApplicationLinkSaved", reflect.TypeOf((*MockProfilesHooks)(nil).AfterApplicationLinkSaved), ctx, link)
}

// AfterChainLinkDeleted mocks base method.
func (m *MockProfilesHooks) AfterChainLinkDeleted(ctx types.Context, link types0.ChainLink) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterChainLinkDeleted", ctx, link)
}

// AfterChainLinkDeleted indicates an expected call of AfterChainLinkDeleted.
func (mr *MockProfilesHooksMockRecorder) AfterChainLinkDeleted(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterChainLinkDeleted", reflect.TypeOf((*MockProfilesHooks)(nil).AfterChainLinkDeleted), ctx, link)
}

// AfterChainLinkSaved mocks base method.
func (m *MockProfilesHooks) AfterChainLinkSaved(ctx types.Context, link types0.ChainLink) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterChainLinkSaved", ctx, link)
}

// AfterChainLinkSaved indicates an expected call of AfterChainLinkSaved.
func (mr *MockProfilesHooksMockRecorder) AfterChainLinkSaved(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterChainLinkSaved", reflect.TypeOf((*MockProfilesHooks)(nil).AfterChainLinkSaved), ctx, link)
}

// AfterDTagTransferRequestAccepted mocks base method.
func (m *MockProfilesHooks) AfterDTagTransferRequestAccepted(ctx types.Context, request types0.DTagTransferRequest, newDTag string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterDTagTransferRequestAccepted", ctx, request, newDTag)
}

// AfterDTagTransferRequestAccepted indicates an expected call of AfterDTagTransferRequestAccepted.
func (mr *MockProfilesHooksMockRecorder) AfterDTagTransferRequestAccepted(ctx, request, newDTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDTagTransferRequestAccepted", reflect.TypeOf((*MockProfilesHooks)(nil).AfterDTagTransferRequestAccepted), ctx, request, newDTag)
}

// AfterDTagTransferRequestCreated mocks base method.
func (m *MockProfilesHooks) AfterDTagTransferRequestCreated(ctx types.Context, request types0.DTagTransferRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterDTagTransferRequestCreated", ctx, request)
}

// AfterDTagTransferRequestCreated indicates an expected call of AfterDTagTransferRequestCreated.
func (mr *MockProfilesHooksMockRecorder) AfterDTagTransferRequestCreated(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDTagTransferRequestCreated", reflect.TypeOf((*MockProfilesHooks)(nil).AfterDTagTransferRequestCreated), ctx, request)
}

// AfterDTagTransferRequestDeleted mocks base method.
func (m *MockProfilesHooks) AfterDTagTransferRequestDeleted(ctx types.Context, sender, recipient string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterDTagTransferRequestDeleted", ctx, sender, recipient)
}

// AfterDTagTransferRequestDeleted indicates an expected call of AfterDTagTransferRequestDeleted.
func (mr *MockProfilesHooksMockRecorder) AfterDTagTransferRequestDeleted(ctx, sender, recipient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDTagTransferRequestDeleted", reflect.TypeOf((*MockProfilesHooks)(nil).AfterDTagTransferRequestDeleted), ctx, sender, recipient)
}

// AfterProfileDeleted mocks base method.
func (m *MockProfilesHooks) AfterProfileDeleted(ctx types.Context, profile *types0.Profile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterProfileDeleted", ctx, profile)
}

// AfterProfileDeleted indicates an expected call of AfterProfileDeleted.
func (mr *MockProfilesHooksMockRecorder) AfterProfileDeleted(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterProfileDeleted", reflect.TypeOf((*MockProfilesHooks)(nil).AfterProfileDeleted), ctx, profile)
}

// AfterProfileSaved mocks base method.
func (m *MockProfilesHooks) AfterProfileSaved(ctx types.Context, profile *types0.Profile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterProfileSaved", ctx, profile)
}

// AfterProfileSaved indicates an expected call of AfterProfileSaved.
func (mr *MockProfilesHooksMockRecorder) AfterProfileSaved(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterProfileSaved", reflect.TypeOf((*MockProfilesHooks)(nil).AfterProfileSaved), ctx, profile)
}
