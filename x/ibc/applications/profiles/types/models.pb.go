// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/ibc/applications/profiles/v1/models.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ApplicationLinkState defines if an application link is in the following
// states: STARTED, ERRORED, SUCCESSFUL, TIMED_OUT
type ApplicationLinkState int32

const (
	// Default State
	APPLICATION_LINK_STATE_UNINITIALIZED ApplicationLinkState = 0
	// A connection has just been started
	APPLICATION_LINK_STATE_STARTED ApplicationLinkState = 1
	// A connection has errored during the verification
	APPLICATION_LINK_STATE_ERROR ApplicationLinkState = 2
	// A connection has been verified successfully
	APPLICATION_LINK_STATE_SUCCESS ApplicationLinkState = 3
	// A connection has timed out during the verification
	APPLICATION_LINK_STATE_TIMEOUT ApplicationLinkState = 4
)

var ApplicationLinkState_name = map[int32]string{
	0: "APPLICATION_LINK_STATE_UNINITIALIZED_UNSPECIFIED",
	1: "APPLICATION_LINK_STATE_STARTED",
	2: "APPLICATION_LINK_STATE_ERROR",
	3: "APPLICATION_LINK_STATE_SUCCESS",
	4: "APPLICATION_LINK_STATE_TIMED_OUT",
}

var ApplicationLinkState_value = map[string]int32{
	"APPLICATION_LINK_STATE_UNINITIALIZED_UNSPECIFIED": 0,
	"APPLICATION_LINK_STATE_STARTED":                   1,
	"APPLICATION_LINK_STATE_ERROR":                     2,
	"APPLICATION_LINK_STATE_SUCCESS":                   3,
	"APPLICATION_LINK_STATE_TIMED_OUT":                 4,
}

func (x ApplicationLinkState) String() string {
	return proto.EnumName(ApplicationLinkState_name, int32(x))
}

func (ApplicationLinkState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{0}
}

// ApplicationData contains the data of a generic centralized application
type ApplicationData struct {
	// The application name (eg. Twitter, GitHub, etc)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Username on the application (eg. Twitter tag, GitHub profile, etc)
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *ApplicationData) Reset()         { *m = ApplicationData{} }
func (m *ApplicationData) String() string { return proto.CompactTextString(m) }
func (*ApplicationData) ProtoMessage()    {}
func (*ApplicationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{0}
}
func (m *ApplicationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationData.Merge(m, src)
}
func (m *ApplicationData) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationData) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationData.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationData proto.InternalMessageInfo

func (m *ApplicationData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationData) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// VerificationData contains the data of a single verification
type VerificationData struct {
	// The application that should be verified
	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty" yaml:"application"`
	// The hex encoded call data that should be used to verify the application
	CallData string `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty" yaml:"call_data"`
}

func (m *VerificationData) Reset()         { *m = VerificationData{} }
func (m *VerificationData) String() string { return proto.CompactTextString(m) }
func (*VerificationData) ProtoMessage()    {}
func (*VerificationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{1}
}
func (m *VerificationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationData.Merge(m, src)
}
func (m *VerificationData) XXX_Size() int {
	return m.Size()
}
func (m *VerificationData) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationData.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationData proto.InternalMessageInfo

func (m *VerificationData) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *VerificationData) GetCallData() string {
	if m != nil {
		return m.CallData
	}
	return ""
}

// ApplicationLink contains the data of a link to a centralized application
type ApplicationLink struct {
	// User that has created the connection
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Application to which the user has connected
	Application *ApplicationData `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	// Data used to verify the connection
	Verification *VerificationData `protobuf:"bytes,3,opt,name=verification,proto3" json:"verification,omitempty"`
	// State of the connection
	State ApplicationLinkState `protobuf:"varint,4,opt,name=state,proto3,enum=desmos.ibc.applications.profiles.v1.ApplicationLinkState" json:"state,omitempty"`
	// OracleRequest represents the request that has been made to the oracle
	OracleRequest *OracleRequest `protobuf:"bytes,5,opt,name=oracle_request,json=oracleRequest,proto3" json:"oracle_request,omitempty"`
	// Data coming from the result of the verification.
	// Only available when the state is STATE_SUCCESS
	Result *ApplicationLinkResult `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	// Creation time of the connection
	CreationTime time.Time `protobuf:"bytes,7,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time"`
}

func (m *ApplicationLink) Reset()         { *m = ApplicationLink{} }
func (m *ApplicationLink) String() string { return proto.CompactTextString(m) }
func (*ApplicationLink) ProtoMessage()    {}
func (*ApplicationLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{2}
}
func (m *ApplicationLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLink.Merge(m, src)
}
func (m *ApplicationLink) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLink.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLink proto.InternalMessageInfo

func (m *ApplicationLink) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ApplicationLink) GetApplication() *ApplicationData {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *ApplicationLink) GetVerification() *VerificationData {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (m *ApplicationLink) GetState() ApplicationLinkState {
	if m != nil {
		return m.State
	}
	return APPLICATION_LINK_STATE_UNINITIALIZED
}

func (m *ApplicationLink) GetOracleRequest() *OracleRequest {
	if m != nil {
		return m.OracleRequest
	}
	return nil
}

func (m *ApplicationLink) GetResult() *ApplicationLinkResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ApplicationLink) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

// OracleRequest represents a generic oracle request
type OracleRequest struct {
	// ID is the ID of the request
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// OracleScriptID is ID of an oracle script
	OracleScriptID int64 `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	// ClientID represents the ID of the client that has called the oracle script
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *OracleRequest) Reset()         { *m = OracleRequest{} }
func (m *OracleRequest) String() string { return proto.CompactTextString(m) }
func (*OracleRequest) ProtoMessage()    {}
func (*OracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{3}
}
func (m *OracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRequest.Merge(m, src)
}
func (m *OracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *OracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRequest proto.InternalMessageInfo

func (m *OracleRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OracleRequest) GetOracleScriptID() int64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *OracleRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// Result represents a verification result
type ApplicationLinkResult struct {
	// sum is the oneof that specifies whether this represents a success or
	// failure result
	//
	// Types that are valid to be assigned to Sum:
	//	*ApplicationLinkResult_Success_
	//	*ApplicationLinkResult_Failed_
	Sum isApplicationLinkResult_Sum `protobuf_oneof:"sum"`
}

func (m *ApplicationLinkResult) Reset()         { *m = ApplicationLinkResult{} }
func (m *ApplicationLinkResult) String() string { return proto.CompactTextString(m) }
func (*ApplicationLinkResult) ProtoMessage()    {}
func (*ApplicationLinkResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{4}
}
func (m *ApplicationLinkResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationLinkResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationLinkResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationLinkResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLinkResult.Merge(m, src)
}
func (m *ApplicationLinkResult) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationLinkResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLinkResult.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLinkResult proto.InternalMessageInfo

type isApplicationLinkResult_Sum interface {
	isApplicationLinkResult_Sum()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApplicationLinkResult_Success_ struct {
	Success *ApplicationLinkResult_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof" json:"success,omitempty"`
}
type ApplicationLinkResult_Failed_ struct {
	Failed *ApplicationLinkResult_Failed `protobuf:"bytes,2,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}

func (*ApplicationLinkResult_Success_) isApplicationLinkResult_Sum() {}
func (*ApplicationLinkResult_Failed_) isApplicationLinkResult_Sum()  {}

func (m *ApplicationLinkResult) GetSum() isApplicationLinkResult_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ApplicationLinkResult) GetSuccess() *ApplicationLinkResult_Success {
	if x, ok := m.GetSum().(*ApplicationLinkResult_Success_); ok {
		return x.Success
	}
	return nil
}

func (m *ApplicationLinkResult) GetFailed() *ApplicationLinkResult_Failed {
	if x, ok := m.GetSum().(*ApplicationLinkResult_Failed_); ok {
		return x.Failed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApplicationLinkResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApplicationLinkResult_Success_)(nil),
		(*ApplicationLinkResult_Failed_)(nil),
	}
}

// Single is the signature data for a single signer
type ApplicationLinkResult_Success struct {
	// Value that has be signed by the profile
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Signature that has been produced by signing the value
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ApplicationLinkResult_Success) Reset()         { *m = ApplicationLinkResult_Success{} }
func (m *ApplicationLinkResult_Success) String() string { return proto.CompactTextString(m) }
func (*ApplicationLinkResult_Success) ProtoMessage()    {}
func (*ApplicationLinkResult_Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{4, 0}
}
func (m *ApplicationLinkResult_Success) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationLinkResult_Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationLinkResult_Success.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationLinkResult_Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLinkResult_Success.Merge(m, src)
}
func (m *ApplicationLinkResult_Success) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationLinkResult_Success) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLinkResult_Success.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLinkResult_Success proto.InternalMessageInfo

func (m *ApplicationLinkResult_Success) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ApplicationLinkResult_Success) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// Multi is the signature data for a multisig public key
type ApplicationLinkResult_Failed struct {
	// Error that is associated with the failure
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ApplicationLinkResult_Failed) Reset()         { *m = ApplicationLinkResult_Failed{} }
func (m *ApplicationLinkResult_Failed) String() string { return proto.CompactTextString(m) }
func (*ApplicationLinkResult_Failed) ProtoMessage()    {}
func (*ApplicationLinkResult_Failed) Descriptor() ([]byte, []int) {
	return fileDescriptor_0611fef640455089, []int{4, 1}
}
func (m *ApplicationLinkResult_Failed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationLinkResult_Failed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationLinkResult_Failed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationLinkResult_Failed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLinkResult_Failed.Merge(m, src)
}
func (m *ApplicationLinkResult_Failed) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationLinkResult_Failed) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLinkResult_Failed.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLinkResult_Failed proto.InternalMessageInfo

func (m *ApplicationLinkResult_Failed) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("desmos.ibc.applications.profiles.v1.ApplicationLinkState", ApplicationLinkState_name, ApplicationLinkState_value)
	proto.RegisterType((*ApplicationData)(nil), "desmos.ibc.applications.profiles.v1.ApplicationData")
	proto.RegisterType((*VerificationData)(nil), "desmos.ibc.applications.profiles.v1.VerificationData")
	proto.RegisterType((*ApplicationLink)(nil), "desmos.ibc.applications.profiles.v1.ApplicationLink")
	proto.RegisterType((*OracleRequest)(nil), "desmos.ibc.applications.profiles.v1.OracleRequest")
	proto.RegisterType((*ApplicationLinkResult)(nil), "desmos.ibc.applications.profiles.v1.ApplicationLinkResult")
	proto.RegisterType((*ApplicationLinkResult_Success)(nil), "desmos.ibc.applications.profiles.v1.ApplicationLinkResult.Success")
	proto.RegisterType((*ApplicationLinkResult_Failed)(nil), "desmos.ibc.applications.profiles.v1.ApplicationLinkResult.Failed")
}

func init() {
	proto.RegisterFile("desmos/ibc/applications/profiles/v1/models.proto", fileDescriptor_0611fef640455089)
}

var fileDescriptor_0611fef640455089 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6b, 0xe3, 0x46,
	0x14, 0xb6, 0x6c, 0xc7, 0x49, 0x26, 0x9b, 0xd4, 0x0c, 0xe9, 0x62, 0xd4, 0x45, 0x36, 0xee, 0x1e,
	0x42, 0xa1, 0xd2, 0x3a, 0x6d, 0xa1, 0x0d, 0x85, 0x62, 0xd9, 0x4e, 0x23, 0x9a, 0xda, 0x61, 0x2c,
	0x2f, 0x64, 0x0b, 0x2b, 0xc6, 0xd2, 0xc4, 0x1d, 0x2a, 0x79, 0x5c, 0x8d, 0x64, 0xba, 0x3f, 0xa0,
	0xb0, 0xe4, 0xb4, 0xe7, 0x42, 0xa0, 0xd0, 0x53, 0xff, 0xc9, 0x1e, 0x7a, 0xd8, 0x63, 0x4f, 0x6e,
	0x71, 0x2e, 0x3d, 0xef, 0x2f, 0x28, 0x9a, 0x91, 0x76, 0xed, 0x65, 0xe3, 0xba, 0xd9, 0x8b, 0x79,
	0x6f, 0xde, 0xf7, 0xbe, 0xf7, 0xbd, 0xe7, 0x37, 0x23, 0xf0, 0xc0, 0x23, 0x3c, 0x60, 0xdc, 0xa0,
	0x43, 0xd7, 0xc0, 0x93, 0x89, 0x4f, 0x5d, 0x1c, 0x51, 0x36, 0xe6, 0xc6, 0x24, 0x64, 0x17, 0xd4,
	0x27, 0xdc, 0x98, 0x36, 0x8c, 0x80, 0x79, 0xc4, 0xe7, 0xfa, 0x24, 0x64, 0x11, 0x83, 0x1f, 0xca,
	0x0c, 0x9d, 0x0e, 0x5d, 0x7d, 0x31, 0x43, 0xcf, 0x32, 0xf4, 0x69, 0x43, 0xdd, 0x1f, 0xb1, 0x11,
	0x13, 0x78, 0x23, 0xb1, 0x64, 0xaa, 0xaa, 0xb9, 0x4c, 0x14, 0x1b, 0x62, 0x4e, 0x8c, 0x69, 0x63,
	0x48, 0x22, 0xdc, 0x30, 0x5c, 0x46, 0xc7, 0x69, 0xbc, 0x9a, 0xa8, 0x70, 0x59, 0x48, 0x0c, 0xd7,
	0xa7, 0x64, 0x1c, 0x25, 0xb5, 0xa5, 0x95, 0x01, 0x46, 0x8c, 0x8d, 0x7c, 0x62, 0x08, 0x6f, 0x18,
	0x5f, 0x18, 0x11, 0x0d, 0x08, 0x8f, 0x70, 0x30, 0x91, 0x80, 0xfa, 0xd7, 0xe0, 0xbd, 0xe6, 0x6b,
	0x4d, 0x6d, 0x1c, 0x61, 0x08, 0x41, 0x71, 0x8c, 0x03, 0x52, 0x51, 0x6a, 0xca, 0xc1, 0x36, 0x12,
	0x36, 0x54, 0xc1, 0x56, 0xcc, 0x49, 0x28, 0xce, 0xf3, 0xe2, 0xfc, 0x95, 0x7f, 0x54, 0xfc, 0xe7,
	0xd7, 0xaa, 0x52, 0xff, 0x59, 0x01, 0xe5, 0x87, 0x24, 0xa4, 0x17, 0x8b, 0x54, 0x9f, 0x83, 0x9d,
	0x85, 0x8e, 0x25, 0xa3, 0x79, 0xf7, 0xe5, 0xac, 0x0a, 0x9f, 0xe0, 0xc0, 0x3f, 0xaa, 0x2f, 0x04,
	0xeb, 0x68, 0x11, 0x0a, 0x1b, 0x60, 0xdb, 0xc5, 0xbe, 0xef, 0x78, 0x38, 0xc2, 0xb2, 0xa2, 0xb9,
	0xff, 0x72, 0x56, 0x2d, 0xcb, 0xbc, 0x57, 0xa1, 0x3a, 0xda, 0x4a, 0xec, 0xa4, 0x58, 0xaa, 0xe3,
	0xf7, 0xe2, 0x52, 0x47, 0xa7, 0x74, 0xfc, 0x43, 0xd2, 0x51, 0xa2, 0x36, 0xeb, 0x28, 0xb1, 0xe1,
	0xc3, 0x65, 0x69, 0x49, 0x89, 0x9d, 0xc3, 0x4f, 0xf5, 0x35, 0xfe, 0x2b, 0xfd, 0x8d, 0x81, 0x2d,
	0x0b, 0x3f, 0x07, 0x77, 0xa6, 0x0b, 0x63, 0xa8, 0x14, 0x04, 0xf1, 0x67, 0x6b, 0x11, 0xbf, 0x39,
	0x3f, 0xb4, 0x44, 0x05, 0x7b, 0x60, 0x83, 0x47, 0x38, 0x22, 0x95, 0x62, 0x4d, 0x39, 0xd8, 0x3b,
	0xfc, 0xe2, 0xff, 0x8a, 0x4d, 0x66, 0xd1, 0x4f, 0x08, 0x90, 0xe4, 0x81, 0xe7, 0x60, 0x8f, 0x85,
	0xd8, 0xf5, 0x89, 0x13, 0x92, 0x1f, 0x63, 0xc2, 0xa3, 0xca, 0x86, 0x50, 0x7b, 0xb8, 0x16, 0x73,
	0x4f, 0xa4, 0x22, 0x99, 0x89, 0x76, 0xd9, 0xa2, 0x0b, 0x11, 0x28, 0x85, 0x84, 0xc7, 0x7e, 0x54,
	0x29, 0x09, 0xca, 0xa3, 0xdb, 0x88, 0x45, 0x82, 0x01, 0xa5, 0x4c, 0xd0, 0x02, 0xbb, 0x6e, 0x48,
	0x44, 0xd4, 0x49, 0xf6, 0xb8, 0xb2, 0x29, 0xa8, 0x55, 0x5d, 0x2e, 0xb9, 0x9e, 0x2d, 0xb9, 0x6e,
	0x67, 0x4b, 0x6e, 0x6e, 0x3d, 0x9f, 0x55, 0x73, 0xcf, 0xfe, 0xaa, 0x2a, 0xe8, 0x4e, 0x96, 0x9a,
	0x04, 0xd3, 0x5d, 0x79, 0xaa, 0x80, 0xdd, 0xa5, 0x2e, 0xe0, 0x5d, 0x90, 0xa7, 0x9e, 0xd8, 0x93,
	0x82, 0x59, 0x9a, 0xcf, 0xaa, 0x79, 0xab, 0x8d, 0xf2, 0xd4, 0x83, 0x5f, 0x82, 0x72, 0x3a, 0x29,
	0xee, 0x86, 0x74, 0x12, 0x39, 0xd4, 0x13, 0x2b, 0x53, 0x30, 0xe1, 0x7c, 0x56, 0xdd, 0x93, 0x24,
	0x7d, 0x11, 0xb2, 0xda, 0x28, 0x9d, 0x6a, 0xea, 0x7b, 0xf0, 0x03, 0xb0, 0x2d, 0x6f, 0x65, 0x92,
	0x56, 0x90, 0xd7, 0x47, 0x1e, 0x58, 0x5e, 0x2a, 0xe5, 0x8f, 0x3c, 0x78, 0xff, 0xad, 0xdd, 0xc3,
	0xc7, 0x60, 0x93, 0xc7, 0xae, 0x4b, 0x38, 0x17, 0xba, 0x76, 0x0e, 0xcd, 0xdb, 0x8f, 0x52, 0xef,
	0x4b, 0xa6, 0x93, 0x1c, 0xca, 0x48, 0xe1, 0x77, 0xa0, 0x74, 0x81, 0xa9, 0x4f, 0xbc, 0xf4, 0x0e,
	0x34, 0xdf, 0x81, 0xfe, 0x58, 0x10, 0x9d, 0xe4, 0x50, 0x4a, 0xa9, 0xb6, 0xc0, 0x66, 0x5a, 0x12,
	0xee, 0x83, 0x8d, 0x29, 0xf6, 0xe3, 0xec, 0x5d, 0x91, 0x0e, 0xbc, 0x07, 0xb6, 0x39, 0x1d, 0x8d,
	0x71, 0x14, 0x87, 0xd9, 0xcb, 0xf2, 0xfa, 0x40, 0xce, 0x46, 0xbd, 0x0f, 0x4a, 0x92, 0x38, 0xe1,
	0x20, 0x61, 0xc8, 0xb2, 0x9b, 0x2c, 0x1d, 0x89, 0x92, 0xbf, 0xe6, 0x06, 0x28, 0xf0, 0x38, 0xf8,
	0xe8, 0x97, 0x02, 0xd8, 0x7f, 0xdb, 0xe6, 0xc3, 0xc7, 0xe0, 0x41, 0xf3, 0xec, 0xec, 0xd4, 0x6a,
	0x35, 0x6d, 0xab, 0xd7, 0x75, 0x4e, 0xad, 0xee, 0x37, 0x4e, 0xdf, 0x6e, 0xda, 0x1d, 0x67, 0xd0,
	0xb5, 0xba, 0x96, 0x6d, 0x35, 0x4f, 0xad, 0x47, 0x9d, 0xb6, 0x33, 0xe8, 0xf6, 0xcf, 0x3a, 0x2d,
	0xeb, 0xd8, 0xea, 0xb4, 0xcb, 0x39, 0xf5, 0xe0, 0xf2, 0xaa, 0x76, 0x7f, 0x9d, 0x3c, 0x78, 0x0c,
	0xb4, 0x1b, 0x70, 0x7d, 0xbb, 0x89, 0xec, 0x4e, 0xbb, 0xac, 0xa8, 0xf5, 0xcb, 0xab, 0xda, 0x7f,
	0xa0, 0xa0, 0x09, 0xee, 0xdd, 0x80, 0xe8, 0x20, 0xd4, 0x43, 0xe5, 0xbc, 0x5a, 0xbb, 0xbc, 0xaa,
	0xad, 0xc4, 0xac, 0xd2, 0x32, 0x68, 0xb5, 0x3a, 0xfd, 0x7e, 0xb9, 0xb0, 0x5a, 0x8b, 0x44, 0xc1,
	0x13, 0x50, 0xbb, 0x01, 0x61, 0x5b, 0xdf, 0x76, 0xda, 0x4e, 0x6f, 0x60, 0x97, 0x8b, 0x2b, 0x99,
	0x12, 0x5c, 0x6f, 0x60, 0xab, 0xc5, 0xa7, 0xbf, 0x69, 0x39, 0xf3, 0xfc, 0xf9, 0x5c, 0x53, 0x5e,
	0xcc, 0x35, 0xe5, 0xef, 0xb9, 0xa6, 0x3c, 0xbb, 0xd6, 0x72, 0x2f, 0xae, 0xb5, 0xdc, 0x9f, 0xd7,
	0x5a, 0xee, 0xd1, 0x57, 0x23, 0x1a, 0x7d, 0x1f, 0x0f, 0x75, 0x97, 0x05, 0x86, 0xdc, 0xc2, 0x8f,
	0x7d, 0x3c, 0xe4, 0xa9, 0x6d, 0xfc, 0xb4, 0xe2, 0xab, 0x1b, 0x3d, 0x99, 0x10, 0x3e, 0x2c, 0x89,
	0x37, 0xe0, 0x93, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x97, 0x64, 0x95, 0x3a, 0xa6, 0x07, 0x00,
	0x00,
}

func (this *ApplicationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationData)
	if !ok {
		that2, ok := that.(ApplicationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *VerificationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerificationData)
	if !ok {
		that2, ok := that.(VerificationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Application != that1.Application {
		return false
	}
	if this.CallData != that1.CallData {
		return false
	}
	return true
}
func (this *ApplicationLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLink)
	if !ok {
		that2, ok := that.(ApplicationLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	if !this.Verification.Equal(that1.Verification) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.OracleRequest.Equal(that1.OracleRequest) {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	return true
}
func (this *OracleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleRequest)
	if !ok {
		that2, ok := that.(OracleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.OracleScriptID != that1.OracleScriptID {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	return true
}
func (this *ApplicationLinkResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLinkResult)
	if !ok {
		that2, ok := that.(ApplicationLinkResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Sum == nil {
		if this.Sum != nil {
			return false
		}
	} else if this.Sum == nil {
		return false
	} else if !this.Sum.Equal(that1.Sum) {
		return false
	}
	return true
}
func (this *ApplicationLinkResult_Success_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLinkResult_Success_)
	if !ok {
		that2, ok := that.(ApplicationLinkResult_Success_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Success.Equal(that1.Success) {
		return false
	}
	return true
}
func (this *ApplicationLinkResult_Failed_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLinkResult_Failed_)
	if !ok {
		that2, ok := that.(ApplicationLinkResult_Failed_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *ApplicationLinkResult_Success) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLinkResult_Success)
	if !ok {
		that2, ok := that.(ApplicationLinkResult_Success)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	return true
}
func (this *ApplicationLinkResult_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLinkResult_Failed)
	if !ok {
		that2, ok := that.(ApplicationLinkResult_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (m *ApplicationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerificationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintModels(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintModels(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OracleRequest != nil {
		{
			size, err := m.OracleRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Verification != nil {
		{
			size, err := m.Verification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintModels(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintModels(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationLinkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationLinkResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLinkResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationLinkResult_Success_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLinkResult_Success_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Success != nil {
		{
			size, err := m.Success.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationLinkResult_Failed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLinkResult_Failed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApplicationLinkResult_Success) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationLinkResult_Success) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLinkResult_Success) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationLinkResult_Failed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationLinkResult_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLinkResult_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *VerificationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *ApplicationLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Verification != nil {
		l = m.Verification.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovModels(uint64(m.State))
	}
	if m.OracleRequest != nil {
		l = m.OracleRequest.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *OracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovModels(uint64(m.OracleScriptID))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *ApplicationLinkResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ApplicationLinkResult_Success_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *ApplicationLinkResult_Failed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *ApplicationLinkResult_Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *ApplicationLinkResult_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplicationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &ApplicationData{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verification == nil {
				m.Verification = &VerificationData{}
			}
			if err := m.Verification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ApplicationLinkState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleRequest == nil {
				m.OracleRequest = &OracleRequest{}
			}
			if err := m.OracleRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ApplicationLinkResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationLinkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationLinkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationLinkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationLinkResult_Success{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ApplicationLinkResult_Success_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationLinkResult_Failed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ApplicationLinkResult_Failed_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationLinkResult_Success) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationLinkResult_Failed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
