// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/relationships/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRelationshipsRequest is the request type for the
// Query/Relationships RPC method.
type QueryRelationshipsRequest struct {
	// subspace to query the relationships for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty"`
	// optional address of the user for which to query the relationships
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// optional address of the counterparty of the relationships (used only if the
	// user is provided)
	Counterparty string `protobuf:"bytes,3,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRelationshipsRequest) Reset()         { *m = QueryRelationshipsRequest{} }
func (m *QueryRelationshipsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRelationshipsRequest) ProtoMessage()    {}
func (*QueryRelationshipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10005dbd2b21ca8c, []int{0}
}
func (m *QueryRelationshipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelationshipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelationshipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelationshipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelationshipsRequest.Merge(m, src)
}
func (m *QueryRelationshipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelationshipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelationshipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelationshipsRequest proto.InternalMessageInfo

// QueryRelationshipsResponse is the response type for the
// Query/Relationships RPC method.
type QueryRelationshipsResponse struct {
	Relationships []Relationship      `protobuf:"bytes,1,rep,name=relationships,proto3" json:"relationships"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRelationshipsResponse) Reset()         { *m = QueryRelationshipsResponse{} }
func (m *QueryRelationshipsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRelationshipsResponse) ProtoMessage()    {}
func (*QueryRelationshipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10005dbd2b21ca8c, []int{1}
}
func (m *QueryRelationshipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelationshipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelationshipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelationshipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelationshipsResponse.Merge(m, src)
}
func (m *QueryRelationshipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelationshipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelationshipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelationshipsResponse proto.InternalMessageInfo

func (m *QueryRelationshipsResponse) GetRelationships() []Relationship {
	if m != nil {
		return m.Relationships
	}
	return nil
}

func (m *QueryRelationshipsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlocksRequest is the request type for the Query/Blocks RPC
// endpoint
type QueryBlocksRequest struct {
	// subspace to query the blocks for
	SubspaceId uint64 `protobuf:"varint,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty"`
	// optional address of the blocker to query the blocks for
	Blocker string `protobuf:"bytes,2,opt,name=blocker,proto3" json:"blocker,omitempty"`
	// optional address of the blocked user to query the block for (used only if
	// the blocker is provided)
	Blocked string `protobuf:"bytes,3,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlocksRequest) Reset()         { *m = QueryBlocksRequest{} }
func (m *QueryBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlocksRequest) ProtoMessage()    {}
func (*QueryBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10005dbd2b21ca8c, []int{2}
}
func (m *QueryBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlocksRequest.Merge(m, src)
}
func (m *QueryBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlocksRequest proto.InternalMessageInfo

// QueryBlocksResponse is the response type for the Query/Blocks RPC
// method.
type QueryBlocksResponse struct {
	Blocks     []UserBlock         `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlocksResponse) Reset()         { *m = QueryBlocksResponse{} }
func (m *QueryBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlocksResponse) ProtoMessage()    {}
func (*QueryBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10005dbd2b21ca8c, []int{3}
}
func (m *QueryBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlocksResponse.Merge(m, src)
}
func (m *QueryBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlocksResponse proto.InternalMessageInfo

func (m *QueryBlocksResponse) GetBlocks() []UserBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *QueryBlocksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRelationshipsRequest)(nil), "desmos.relationships.v1.QueryRelationshipsRequest")
	proto.RegisterType((*QueryRelationshipsResponse)(nil), "desmos.relationships.v1.QueryRelationshipsResponse")
	proto.RegisterType((*QueryBlocksRequest)(nil), "desmos.relationships.v1.QueryBlocksRequest")
	proto.RegisterType((*QueryBlocksResponse)(nil), "desmos.relationships.v1.QueryBlocksResponse")
}

func init() {
	proto.RegisterFile("desmos/relationships/v1/query.proto", fileDescriptor_10005dbd2b21ca8c)
}

var fileDescriptor_10005dbd2b21ca8c = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x18, 0xf5, 0xa5, 0x21, 0xc0, 0x85, 0x2e, 0x07, 0x12, 0x6e, 0x84, 0x9c, 0x60, 0xa0, 0x8d, 0xf8,
	0x71, 0xa7, 0xb8, 0x12, 0x03, 0x13, 0xca, 0x00, 0x62, 0x6b, 0x2d, 0xb1, 0xb0, 0x54, 0x67, 0xfb,
	0x70, 0x2d, 0x1c, 0x9f, 0xeb, 0xb3, 0x23, 0xb2, 0x32, 0x31, 0x30, 0x20, 0xf1, 0x0f, 0x64, 0xe4,
	0x4f, 0x40, 0x62, 0x62, 0x41, 0x1d, 0x2b, 0xb1, 0x30, 0x21, 0x94, 0x30, 0xf0, 0x67, 0x20, 0xdf,
	0x9d, 0x69, 0x8c, 0x30, 0x14, 0x89, 0x6e, 0xfe, 0xfc, 0xbd, 0xef, 0x7d, 0xef, 0x3d, 0xdf, 0x19,
	0x5e, 0x0b, 0x98, 0x98, 0x70, 0x41, 0x32, 0x16, 0xd3, 0x3c, 0xe2, 0x89, 0xd8, 0x8f, 0x52, 0x41,
	0xa6, 0x23, 0x72, 0x50, 0xb0, 0x6c, 0x86, 0xd3, 0x8c, 0xe7, 0x1c, 0x5d, 0x56, 0x20, 0x5c, 0x03,
	0xe1, 0xe9, 0xa8, 0x77, 0x29, 0xe4, 0x21, 0x97, 0x18, 0x52, 0x3e, 0x29, 0x78, 0xef, 0x4a, 0xc8,
	0x79, 0x18, 0x33, 0x42, 0xd3, 0x88, 0xd0, 0x24, 0xe1, 0xb9, 0x1a, 0xd2, 0xdd, 0x0d, 0xdd, 0x95,
	0x95, 0x57, 0x3c, 0x25, 0x34, 0x99, 0x55, 0x2d, 0x9f, 0x97, 0x7b, 0xf6, 0x14, 0xa3, 0x2a, 0x74,
	0xeb, 0xa6, 0xaa, 0x88, 0x47, 0x05, 0x53, 0xda, 0xc8, 0x74, 0xe4, 0xb1, 0x9c, 0x8e, 0x48, 0x4a,
	0xc3, 0x28, 0x91, 0x2b, 0x34, 0xf6, 0x7a, 0x93, 0xa7, 0x09, 0x0f, 0x58, 0xac, 0x19, 0xed, 0x8f,
	0x00, 0x6e, 0xec, 0x96, 0x44, 0xee, 0x2a, 0xcc, 0x65, 0x07, 0x05, 0x13, 0x39, 0xea, 0xc3, 0xae,
	0x28, 0x3c, 0x91, 0x52, 0x9f, 0xed, 0x45, 0x81, 0x09, 0x06, 0x60, 0xd8, 0x76, 0x61, 0xf5, 0xea,
	0x51, 0x80, 0x10, 0x6c, 0x17, 0x82, 0x65, 0x66, 0x6b, 0x00, 0x86, 0xe7, 0x5d, 0xf9, 0x8c, 0x6c,
	0x78, 0xc1, 0xe7, 0x45, 0x92, 0xb3, 0x2c, 0xa5, 0x59, 0x3e, 0x33, 0xd7, 0x64, 0xaf, 0xf6, 0x0e,
	0x3d, 0x80, 0xf0, 0x58, 0xb0, 0xd9, 0x1e, 0x80, 0x61, 0xd7, 0xd9, 0xc4, 0xda, 0x6b, 0xe9, 0x0e,
	0xab, 0xe4, 0xb5, 0x3b, 0xbc, 0x43, 0x43, 0xa6, 0x45, 0xb9, 0x2b, 0x93, 0xf7, 0xce, 0xbd, 0x9c,
	0xf7, 0x8d, 0xef, 0xf3, 0xbe, 0x61, 0xbf, 0x03, 0xb0, 0xf7, 0x3b, 0x23, 0x22, 0xe5, 0x89, 0x60,
	0x68, 0x17, 0xae, 0xd7, 0x82, 0x30, 0xc1, 0x60, 0x6d, 0xd8, 0x75, 0x6e, 0xe0, 0x86, 0x8f, 0x8a,
	0x57, 0x69, 0xc6, 0xed, 0xc3, 0x2f, 0x7d, 0xc3, 0xad, 0x33, 0xa0, 0x87, 0x35, 0x0f, 0x2d, 0xe9,
	0x61, 0xeb, 0xaf, 0x1e, 0x94, 0x9e, 0x55, 0x13, 0xf6, 0x7b, 0x00, 0x91, 0x94, 0x3e, 0x8e, 0xb9,
	0xff, 0xec, 0xe4, 0xe1, 0x9b, 0xf0, 0xac, 0x57, 0x4e, 0xfc, 0xcc, 0xbf, 0x2a, 0x8f, 0x3b, 0x81,
	0x4e, 0xbf, 0x2a, 0x4f, 0x21, 0xf8, 0x39, 0x80, 0x17, 0x6b, 0xea, 0x75, 0xe2, 0xf7, 0x61, 0x47,
	0x2e, 0xad, 0xa2, 0xb6, 0x1b, 0xa3, 0x7e, 0x2c, 0x58, 0x26, 0x87, 0x75, 0xce, 0x7a, 0xee, 0xbf,
	0x05, 0xec, 0x7c, 0x68, 0xc1, 0x33, 0x52, 0x22, 0x7a, 0x0b, 0xe0, 0x7a, 0xed, 0x80, 0x20, 0xa7,
	0x51, 0x56, 0xe3, 0xb5, 0xe8, 0x6d, 0xff, 0xd3, 0x8c, 0x12, 0x64, 0xe3, 0x17, 0x9f, 0xbe, 0xbd,
	0x69, 0x0d, 0xd1, 0x26, 0x69, 0xba, 0x98, 0xf5, 0xe3, 0xf5, 0x0a, 0xc0, 0x8e, 0x8a, 0x14, 0xdd,
	0xfa, 0xf3, 0xbe, 0xda, 0xb1, 0xe9, 0xdd, 0x3e, 0x19, 0x58, 0xab, 0xda, 0x92, 0xaa, 0xae, 0xa2,
	0x7e, 0xa3, 0x2a, 0xf5, 0x31, 0xc6, 0x3b, 0x87, 0x0b, 0x0b, 0x1c, 0x2d, 0x2c, 0xf0, 0x75, 0x61,
	0x81, 0xd7, 0x4b, 0xcb, 0x38, 0x5a, 0x5a, 0xc6, 0xe7, 0xa5, 0x65, 0x3c, 0xb9, 0x1b, 0x46, 0xf9,
	0x7e, 0xe1, 0x61, 0x9f, 0x4f, 0x34, 0xc9, 0x9d, 0x98, 0x7a, 0xa2, 0x22, 0x9c, 0x3a, 0xe4, 0xf9,
	0x2f, 0xac, 0xf9, 0x2c, 0x65, 0xc2, 0xeb, 0xc8, 0x3f, 0xd0, 0xf6, 0x8f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x88, 0x7d, 0xfc, 0xef, 0x7d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Relationships queries all relationships present inside a specific subspace
	Relationships(ctx context.Context, in *QueryRelationshipsRequest, opts ...grpc.CallOption) (*QueryRelationshipsResponse, error)
	// Blocks queries the blocks for the given user, if provided.
	// Otherwise, it queries all the stored blocks.
	Blocks(ctx context.Context, in *QueryBlocksRequest, opts ...grpc.CallOption) (*QueryBlocksResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Relationships(ctx context.Context, in *QueryRelationshipsRequest, opts ...grpc.CallOption) (*QueryRelationshipsResponse, error) {
	out := new(QueryRelationshipsResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1.Query/Relationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Blocks(ctx context.Context, in *QueryBlocksRequest, opts ...grpc.CallOption) (*QueryBlocksResponse, error) {
	out := new(QueryBlocksResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1.Query/Blocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Relationships queries all relationships present inside a specific subspace
	Relationships(context.Context, *QueryRelationshipsRequest) (*QueryRelationshipsResponse, error)
	// Blocks queries the blocks for the given user, if provided.
	// Otherwise, it queries all the stored blocks.
	Blocks(context.Context, *QueryBlocksRequest) (*QueryBlocksResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Relationships(ctx context.Context, req *QueryRelationshipsRequest) (*QueryRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relationships not implemented")
}
func (*UnimplementedQueryServer) Blocks(ctx context.Context, req *QueryBlocksRequest) (*QueryBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Relationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Relationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1.Query/Relationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Relationships(ctx, req.(*QueryRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Blocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Blocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1.Query/Blocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Blocks(ctx, req.(*QueryBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.relationships.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Relationships",
			Handler:    _Query_Relationships_Handler,
		},
		{
			MethodName: "Blocks",
			Handler:    _Query_Blocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/relationships/v1/query.proto",
}

func (m *QueryRelationshipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelationshipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelationshipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelationshipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelationshipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelationshipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Relationships) > 0 {
		for iNdEx := len(m.Relationships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relationships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0x12
	}
	if m.SubspaceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubspaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRelationshipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRelationshipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relationships) > 0 {
		for _, e := range m.Relationships {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubspaceId != 0 {
		n += 1 + sovQuery(uint64(m.SubspaceId))
	}
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRelationshipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelationshipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelationshipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelationshipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelationshipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelationshipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relationships = append(m.Relationships, Relationship{})
			if err := m.Relationships[len(m.Relationships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			m.SubspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, UserBlock{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
