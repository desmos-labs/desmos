// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/relationships/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRelationship represents a message to create a relationship
// between two users on a specific subspace.
type MsgCreateRelationship struct {
	// User creating the relationship
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// Counterparty of the relationship (i.e. user to be followed)
	Counterparty string `protobuf:"bytes,2,opt,name=counterparty,proto3" json:"counterparty,omitempty" yaml:"counterparty"`
	// Subspace id inside which the relationship will be valid
	SubspaceID uint64 `protobuf:"varint,3,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
}

func (m *MsgCreateRelationship) Reset()         { *m = MsgCreateRelationship{} }
func (m *MsgCreateRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationship) ProtoMessage()    {}
func (*MsgCreateRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{0}
}
func (m *MsgCreateRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationship.Merge(m, src)
}
func (m *MsgCreateRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationship proto.InternalMessageInfo

func (m *MsgCreateRelationship) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreateRelationship) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *MsgCreateRelationship) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgCreateRelationshipResponse defines the Msg/CreateRelationship response
// type.
type MsgCreateRelationshipResponse struct {
}

func (m *MsgCreateRelationshipResponse) Reset()         { *m = MsgCreateRelationshipResponse{} }
func (m *MsgCreateRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationshipResponse) ProtoMessage()    {}
func (*MsgCreateRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{1}
}
func (m *MsgCreateRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationshipResponse.Merge(m, src)
}
func (m *MsgCreateRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationshipResponse proto.InternalMessageInfo

// MsgDeleteRelationship represents a message to delete the relationship
// between two users.
type MsgDeleteRelationship struct {
	// User that created the relationship
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// Counterparty of the relationship that should be deleted
	Counterparty string `protobuf:"bytes,2,opt,name=counterparty,proto3" json:"counterparty,omitempty" yaml:"counterparty"`
	// Id of the subspace inside which the relationship to delete exists
	SubspaceID uint64 `protobuf:"varint,3,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
}

func (m *MsgDeleteRelationship) Reset()         { *m = MsgDeleteRelationship{} }
func (m *MsgDeleteRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelationship) ProtoMessage()    {}
func (*MsgDeleteRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{2}
}
func (m *MsgDeleteRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelationship.Merge(m, src)
}
func (m *MsgDeleteRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelationship proto.InternalMessageInfo

func (m *MsgDeleteRelationship) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDeleteRelationship) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *MsgDeleteRelationship) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgDeleteRelationshipResponse defines the Msg/DeleteRelationship response
// type.
type MsgDeleteRelationshipResponse struct {
}

func (m *MsgDeleteRelationshipResponse) Reset()         { *m = MsgDeleteRelationshipResponse{} }
func (m *MsgDeleteRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelationshipResponse) ProtoMessage()    {}
func (*MsgDeleteRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{3}
}
func (m *MsgDeleteRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelationshipResponse.Merge(m, src)
}
func (m *MsgDeleteRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelationshipResponse proto.InternalMessageInfo

// MsgBlockUser represents a message to block another user specifying an
// optional reason.
type MsgBlockUser struct {
	// Address of the user blocking the other user
	Blocker string `protobuf:"bytes,1,opt,name=blocker,proto3" json:"blocker,omitempty" yaml:"blocker"`
	// Address of the user that should be blocked
	Blocked string `protobuf:"bytes,2,opt,name=blocked,proto3" json:"blocked,omitempty" yaml:"blocked"`
	// (optional) Reason why the user has been blocked
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" yaml:"reason"`
	// Id of the subspace inside which the user should be blocked
	SubspaceID uint64 `protobuf:"varint,4,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
}

func (m *MsgBlockUser) Reset()         { *m = MsgBlockUser{} }
func (m *MsgBlockUser) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUser) ProtoMessage()    {}
func (*MsgBlockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{4}
}
func (m *MsgBlockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUser.Merge(m, src)
}
func (m *MsgBlockUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUser proto.InternalMessageInfo

func (m *MsgBlockUser) GetBlocker() string {
	if m != nil {
		return m.Blocker
	}
	return ""
}

func (m *MsgBlockUser) GetBlocked() string {
	if m != nil {
		return m.Blocked
	}
	return ""
}

func (m *MsgBlockUser) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgBlockUser) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgBlockUserResponse defines the Msg/BlockUser response type.
type MsgBlockUserResponse struct {
}

func (m *MsgBlockUserResponse) Reset()         { *m = MsgBlockUserResponse{} }
func (m *MsgBlockUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUserResponse) ProtoMessage()    {}
func (*MsgBlockUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{5}
}
func (m *MsgBlockUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUserResponse.Merge(m, src)
}
func (m *MsgBlockUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUserResponse proto.InternalMessageInfo

// MsgUnblockUser represents a message to unblock a previously blocked user.
type MsgUnblockUser struct {
	// Address of the user that blocked another user
	Blocker string `protobuf:"bytes,1,opt,name=blocker,proto3" json:"blocker,omitempty" yaml:"blocker"`
	// Address of the user that should be unblocked
	Blocked string `protobuf:"bytes,2,opt,name=blocked,proto3" json:"blocked,omitempty" yaml:"blocked"`
	// Id of the subspace inside which the user should be unblocked
	SubspaceID uint64 `protobuf:"varint,4,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty" yaml:"subspace_id"`
}

func (m *MsgUnblockUser) Reset()         { *m = MsgUnblockUser{} }
func (m *MsgUnblockUser) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockUser) ProtoMessage()    {}
func (*MsgUnblockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{6}
}
func (m *MsgUnblockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockUser.Merge(m, src)
}
func (m *MsgUnblockUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockUser proto.InternalMessageInfo

func (m *MsgUnblockUser) GetBlocker() string {
	if m != nil {
		return m.Blocker
	}
	return ""
}

func (m *MsgUnblockUser) GetBlocked() string {
	if m != nil {
		return m.Blocked
	}
	return ""
}

func (m *MsgUnblockUser) GetSubspaceID() uint64 {
	if m != nil {
		return m.SubspaceID
	}
	return 0
}

// MsgUnblockUserResponse defines the Msg/UnblockUser response type.
type MsgUnblockUserResponse struct {
}

func (m *MsgUnblockUserResponse) Reset()         { *m = MsgUnblockUserResponse{} }
func (m *MsgUnblockUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockUserResponse) ProtoMessage()    {}
func (*MsgUnblockUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a11e032a59b620, []int{7}
}
func (m *MsgUnblockUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockUserResponse.Merge(m, src)
}
func (m *MsgUnblockUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockUserResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateRelationship)(nil), "desmos.relationships.v1.MsgCreateRelationship")
	proto.RegisterType((*MsgCreateRelationshipResponse)(nil), "desmos.relationships.v1.MsgCreateRelationshipResponse")
	proto.RegisterType((*MsgDeleteRelationship)(nil), "desmos.relationships.v1.MsgDeleteRelationship")
	proto.RegisterType((*MsgDeleteRelationshipResponse)(nil), "desmos.relationships.v1.MsgDeleteRelationshipResponse")
	proto.RegisterType((*MsgBlockUser)(nil), "desmos.relationships.v1.MsgBlockUser")
	proto.RegisterType((*MsgBlockUserResponse)(nil), "desmos.relationships.v1.MsgBlockUserResponse")
	proto.RegisterType((*MsgUnblockUser)(nil), "desmos.relationships.v1.MsgUnblockUser")
	proto.RegisterType((*MsgUnblockUserResponse)(nil), "desmos.relationships.v1.MsgUnblockUserResponse")
}

func init() {
	proto.RegisterFile("desmos/relationships/v1/msgs.proto", fileDescriptor_96a11e032a59b620)
}

var fileDescriptor_96a11e032a59b620 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xbd, 0x6e, 0xd3, 0x50,
	0x14, 0xc7, 0xe3, 0xa4, 0x04, 0xe5, 0xb6, 0x54, 0xaa, 0x9b, 0xb6, 0xc1, 0x02, 0xbb, 0xb2, 0x0a,
	0xb4, 0x11, 0xb1, 0x55, 0x90, 0x32, 0x74, 0x6b, 0x08, 0x43, 0x87, 0x48, 0x28, 0x51, 0x17, 0x96,
	0xca, 0x8e, 0xaf, 0x6e, 0x2d, 0x62, 0x5f, 0xcb, 0xc7, 0x89, 0x88, 0xc4, 0x80, 0x18, 0x61, 0xe1,
	0x21, 0x78, 0x80, 0x08, 0xf1, 0x10, 0x8c, 0x15, 0x62, 0x60, 0x8a, 0x50, 0x32, 0x64, 0xcf, 0x13,
	0xa0, 0xd8, 0xd7, 0x1f, 0xf9, 0xa4, 0x20, 0x06, 0x86, 0x2e, 0xd1, 0xbd, 0xe7, 0xfc, 0xef, 0xff,
	0x9c, 0xfb, 0x73, 0x7c, 0x8c, 0x64, 0x03, 0x83, 0x45, 0x41, 0x75, 0x71, 0x4b, 0xf3, 0x4c, 0x6a,
	0xc3, 0xa5, 0xe9, 0x80, 0xda, 0x39, 0x56, 0x2d, 0x20, 0xa0, 0x38, 0x2e, 0xf5, 0x28, 0xbf, 0x17,
	0x68, 0x94, 0x29, 0x8d, 0xd2, 0x39, 0x16, 0xb6, 0x34, 0xcb, 0xb4, 0xa9, 0xea, 0xff, 0x06, 0x5a,
	0x21, 0x4f, 0x28, 0xa1, 0xfe, 0x52, 0x9d, 0xac, 0x58, 0x74, 0xaf, 0x49, 0xfd, 0x2a, 0x16, 0x10,
	0xe6, 0xcd, 0x12, 0x77, 0x83, 0xc4, 0x45, 0x70, 0x22, 0xd8, 0x04, 0x29, 0xf9, 0x53, 0x1a, 0xed,
	0xd4, 0x80, 0x3c, 0x73, 0xb1, 0xe6, 0xe1, 0x7a, 0xa2, 0x34, 0x7f, 0x8a, 0xb2, 0x60, 0x12, 0x1b,
	0xbb, 0x05, 0x6e, 0x9f, 0x3b, 0xcc, 0x55, 0x8e, 0xc6, 0x7d, 0xe9, 0x4e, 0x57, 0xb3, 0x5a, 0x27,
	0x72, 0x10, 0x97, 0xbf, 0x7d, 0x29, 0xe5, 0x99, 0xd9, 0xa9, 0x61, 0xb8, 0x18, 0xa0, 0xe1, 0xb9,
	0xa6, 0x4d, 0xea, 0xec, 0x20, 0xdf, 0x40, 0x1b, 0x4d, 0xda, 0xb6, 0x3d, 0xec, 0x3a, 0x9a, 0xeb,
	0x75, 0x0b, 0x69, 0xdf, 0x48, 0x1d, 0xf7, 0xa5, 0xed, 0xc0, 0x28, 0x99, 0x5d, 0x6e, 0x37, 0x65,
	0xc2, 0x3f, 0x47, 0xeb, 0xd0, 0xd6, 0xc1, 0xd1, 0x9a, 0xf8, 0xc2, 0x34, 0x0a, 0x99, 0x7d, 0xee,
	0x70, 0xad, 0x72, 0x30, 0xe8, 0x4b, 0xa8, 0xc1, 0xc2, 0x67, 0xd5, 0x71, 0x5f, 0xe2, 0x59, 0xab,
	0xb1, 0x54, 0xae, 0xa3, 0x70, 0x77, 0x66, 0x9c, 0x3c, 0x7e, 0x37, 0xea, 0x15, 0x59, 0xa3, 0xef,
	0x47, 0xbd, 0xe2, 0x3d, 0xf6, 0x88, 0x16, 0xc2, 0x90, 0x25, 0x74, 0x7f, 0x61, 0xa2, 0x8e, 0xc1,
	0xa1, 0x36, 0xe0, 0x90, 0x63, 0x15, 0xb7, 0xf0, 0x0d, 0x47, 0xc6, 0x71, 0x1e, 0x06, 0xe3, 0x38,
	0x9f, 0x88, 0x38, 0x7e, 0x4e, 0xa3, 0x8d, 0x1a, 0x90, 0x4a, 0x8b, 0x36, 0x5f, 0x9d, 0x03, 0x76,
	0xf9, 0x2a, 0xba, 0xad, 0x4f, 0x36, 0x11, 0xbf, 0xe2, 0xb8, 0x2f, 0x6d, 0x06, 0x4d, 0xb1, 0xc4,
	0xf2, 0x1b, 0x87, 0x47, 0x63, 0x17, 0x83, 0xc1, 0x9b, 0x73, 0x31, 0x7e, 0xeb, 0x62, 0xf0, 0x47,
	0x28, 0xeb, 0x62, 0x0d, 0xa8, 0xed, 0xd3, 0xca, 0x55, 0xb6, 0xe2, 0x47, 0x19, 0xc4, 0xe5, 0x3a,
	0x13, 0xcc, 0xd2, 0x5d, 0xfb, 0x4b, 0xba, 0x07, 0x13, 0xba, 0xe1, 0x2d, 0x26, 0x78, 0xb7, 0x63,
	0xbc, 0x11, 0x23, 0x79, 0x17, 0xe5, 0x93, 0xfb, 0x08, 0xe6, 0x87, 0x34, 0xda, 0xac, 0x01, 0x39,
	0xb7, 0xf5, 0xff, 0x12, 0xe7, 0x3f, 0x62, 0xf4, 0x70, 0x96, 0xd1, 0x4e, 0xcc, 0x28, 0x71, 0x75,
	0xb9, 0x80, 0x76, 0xa7, 0x23, 0x21, 0xa7, 0x27, 0xdf, 0x33, 0x28, 0x53, 0x03, 0xc2, 0xbf, 0x41,
	0xfc, 0x82, 0x41, 0xa8, 0x28, 0x4b, 0x26, 0xb3, 0xb2, 0x70, 0x24, 0x08, 0xe5, 0x3f, 0xd3, 0x87,
	0x5d, 0x4c, 0xaa, 0x2f, 0x18, 0x1f, 0x2b, 0xab, 0xcf, 0xeb, 0x57, 0x57, 0x5f, 0xfe, 0xe2, 0xf1,
	0x1a, 0xca, 0xc5, 0x2f, 0xdd, 0x83, 0x55, 0x26, 0x91, 0x4c, 0x28, 0x5d, 0x4b, 0x16, 0x95, 0x20,
	0x68, 0x3d, 0xf9, 0x57, 0x7c, 0xb4, 0xea, 0x74, 0x42, 0x28, 0xa8, 0xd7, 0x14, 0x86, 0x85, 0x84,
	0x5b, 0x6f, 0x47, 0xbd, 0x22, 0x57, 0x79, 0xf1, 0x75, 0x20, 0x72, 0x57, 0x03, 0x91, 0xfb, 0x39,
	0x10, 0xb9, 0x8f, 0x43, 0x31, 0x75, 0x35, 0x14, 0x53, 0x3f, 0x86, 0x62, 0xea, 0x65, 0x99, 0x98,
	0xde, 0x65, 0x5b, 0x57, 0x9a, 0xd4, 0x52, 0x03, 0xef, 0x52, 0x4b, 0xd3, 0x81, 0xad, 0xd5, 0x4e,
	0x59, 0x7d, 0x3d, 0xf3, 0xad, 0xf6, 0xba, 0x0e, 0x06, 0x3d, 0xeb, 0x7f, 0x34, 0x9f, 0xfe, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xe4, 0x0e, 0x52, 0xcb, 0xd0, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateRelationship defines a method for creating a new relationship
	CreateRelationship(ctx context.Context, in *MsgCreateRelationship, opts ...grpc.CallOption) (*MsgCreateRelationshipResponse, error)
	// DeleteRelationship defines a method for deleting a relationship
	DeleteRelationship(ctx context.Context, in *MsgDeleteRelationship, opts ...grpc.CallOption) (*MsgDeleteRelationshipResponse, error)
	// BlockUser defines a method for blocking a user
	BlockUser(ctx context.Context, in *MsgBlockUser, opts ...grpc.CallOption) (*MsgBlockUserResponse, error)
	// UnblockUser defines a method for unblocking a user
	UnblockUser(ctx context.Context, in *MsgUnblockUser, opts ...grpc.CallOption) (*MsgUnblockUserResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateRelationship(ctx context.Context, in *MsgCreateRelationship, opts ...grpc.CallOption) (*MsgCreateRelationshipResponse, error) {
	out := new(MsgCreateRelationshipResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1.Msg/CreateRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteRelationship(ctx context.Context, in *MsgDeleteRelationship, opts ...grpc.CallOption) (*MsgDeleteRelationshipResponse, error) {
	out := new(MsgDeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1.Msg/DeleteRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockUser(ctx context.Context, in *MsgBlockUser, opts ...grpc.CallOption) (*MsgBlockUserResponse, error) {
	out := new(MsgBlockUserResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1.Msg/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnblockUser(ctx context.Context, in *MsgUnblockUser, opts ...grpc.CallOption) (*MsgUnblockUserResponse, error) {
	out := new(MsgUnblockUserResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1.Msg/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateRelationship defines a method for creating a new relationship
	CreateRelationship(context.Context, *MsgCreateRelationship) (*MsgCreateRelationshipResponse, error)
	// DeleteRelationship defines a method for deleting a relationship
	DeleteRelationship(context.Context, *MsgDeleteRelationship) (*MsgDeleteRelationshipResponse, error)
	// BlockUser defines a method for blocking a user
	BlockUser(context.Context, *MsgBlockUser) (*MsgBlockUserResponse, error)
	// UnblockUser defines a method for unblocking a user
	UnblockUser(context.Context, *MsgUnblockUser) (*MsgUnblockUserResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateRelationship(ctx context.Context, req *MsgCreateRelationship) (*MsgCreateRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelationship not implemented")
}
func (*UnimplementedMsgServer) DeleteRelationship(ctx context.Context, req *MsgDeleteRelationship) (*MsgDeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (*UnimplementedMsgServer) BlockUser(ctx context.Context, req *MsgBlockUser) (*MsgBlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (*UnimplementedMsgServer) UnblockUser(ctx context.Context, req *MsgUnblockUser) (*MsgUnblockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1.Msg/CreateRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRelationship(ctx, req.(*MsgCreateRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1.Msg/DeleteRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteRelationship(ctx, req.(*MsgDeleteRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1.Msg/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockUser(ctx, req.(*MsgBlockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnblockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1.Msg/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnblockUser(ctx, req.(*MsgUnblockUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.relationships.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelationship",
			Handler:    _Msg_CreateRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _Msg_DeleteRelationship_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Msg_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Msg_UnblockUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/relationships/v1/msgs.proto",
}

func (m *MsgCreateRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBlockUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnblockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubspaceID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SubspaceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnblockUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgCreateRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgDeleteRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBlockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgBlockUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnblockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.SubspaceID != 0 {
		n += 1 + sovMsgs(uint64(m.SubspaceID))
	}
	return n
}

func (m *MsgUnblockUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			m.SubspaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubspaceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
