// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/fees/v1/min_fee.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MinFee contains the minimum amount of coins that should be paid as a fee for
// each message of the specific type sent
type MinFee struct {
	MessageType string                                   `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty" yaml:"message_type"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *MinFee) Reset()         { *m = MinFee{} }
func (m *MinFee) String() string { return proto.CompactTextString(m) }
func (*MinFee) ProtoMessage()    {}
func (*MinFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8693026f592aa5, []int{0}
}
func (m *MinFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinFee.Merge(m, src)
}
func (m *MinFee) XXX_Size() int {
	return m.Size()
}
func (m *MinFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MinFee.DiscardUnknown(m)
}

var xxx_messageInfo_MinFee proto.InternalMessageInfo

func (m *MinFee) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *MinFee) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*MinFee)(nil), "desmos.fees.v1.MinFee")
}

func init() { proto.RegisterFile("desmos/fees/v1/min_fee.proto", fileDescriptor_8b8693026f592aa5) }

var fileDescriptor_8b8693026f592aa5 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x90, 0x2a, 0x91, 0x02, 0x43, 0x40, 0xa2, 0x54, 0xc8, 0xa9, 0x32, 0x65, 0x89,
	0xad, 0xd0, 0xad, 0x1b, 0x41, 0x82, 0x89, 0xa5, 0x62, 0x62, 0xa9, 0x9c, 0xf4, 0x35, 0x44, 0xd4,
	0x71, 0x84, 0xdd, 0x88, 0xdc, 0x82, 0x73, 0x70, 0x04, 0x4e, 0xd0, 0xb1, 0x23, 0x53, 0x40, 0xc9,
	0x0d, 0x7a, 0x02, 0x94, 0xd8, 0x43, 0x27, 0x3f, 0xeb, 0xb7, 0xbf, 0xef, 0xe9, 0xb7, 0x6f, 0x96,
	0x20, 0xb9, 0x90, 0x74, 0x05, 0x20, 0x69, 0x19, 0x52, 0x9e, 0xe5, 0x8b, 0x15, 0x00, 0x29, 0xde,
	0x85, 0x12, 0xce, 0xb9, 0x4e, 0x49, 0x97, 0x92, 0x32, 0x1c, 0x5f, 0xa6, 0x22, 0x15, 0x7d, 0x44,
	0xbb, 0x49, 0xbf, 0x1a, 0xe3, 0x44, 0xf4, 0x8c, 0x98, 0x49, 0xa0, 0x65, 0x18, 0x83, 0x62, 0x21,
	0x4d, 0x44, 0x96, 0xeb, 0xdc, 0xfb, 0x46, 0xf6, 0xe0, 0x29, 0xcb, 0x1f, 0x00, 0x9c, 0x99, 0x7d,
	0xca, 0x41, 0x4a, 0x96, 0xc2, 0x42, 0x55, 0x05, 0x8c, 0xd0, 0x04, 0xf9, 0x27, 0xd1, 0xd5, 0xbe,
	0x76, 0x2f, 0x2a, 0xc6, 0xd7, 0x33, 0xef, 0x30, 0xf5, 0xe6, 0x43, 0x73, 0x7d, 0xae, 0x0a, 0x70,
	0x94, 0x3d, 0x60, 0x5c, 0x6c, 0x72, 0x35, 0x3a, 0x9a, 0x1c, 0xfb, 0xc3, 0xdb, 0x6b, 0xa2, 0xbd,
	0xa4, 0xf3, 0x12, 0xe3, 0x25, 0xf7, 0x22, 0xcb, 0xa3, 0xbb, 0x6d, 0xed, 0x5a, 0xfb, 0xda, 0x3d,
	0xd3, 0x50, 0xfd, 0xcd, 0xfb, 0xfa, 0x75, 0xfd, 0x34, 0x53, 0xaf, 0x9b, 0x98, 0x24, 0x82, 0x53,
	0xb3, 0xb5, 0x3e, 0x02, 0xb9, 0x7c, 0xa3, 0x9d, 0x54, 0xf6, 0x04, 0x39, 0x37, 0xae, 0xe8, 0x71,
	0xdb, 0x60, 0xb4, 0x6b, 0x30, 0xfa, 0x6b, 0x30, 0xfa, 0x6c, 0xb1, 0xb5, 0x6b, 0xb1, 0xf5, 0xd3,
	0x62, 0xeb, 0x25, 0x38, 0x60, 0xe9, 0x9e, 0x82, 0x35, 0x8b, 0xa5, 0x99, 0x69, 0x39, 0xa5, 0x1f,
	0xba, 0xd6, 0x1e, 0x1b, 0x0f, 0xfa, 0x32, 0xa6, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x20, 0xb5,
	0x59, 0x5f, 0x72, 0x01, 0x00, 0x00,
}

func (m *MinFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMinFee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintMinFee(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MinFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovMinFee(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMinFee(uint64(l))
		}
	}
	return n
}

func sovMinFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinFee(x uint64) (n int) {
	return sovMinFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MinFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinFee = fmt.Errorf("proto: unexpected end of group")
)
