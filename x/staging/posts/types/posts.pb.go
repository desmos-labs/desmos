// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/posts/v1beta1/posts.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CommentsState contains all the possible comments states
type CommentsState int32

const (
	// COMMENTS_STATE_UNSPECIFIED
	CommentsStateUnspecified CommentsState = 0
	// COMMENT_STATE_ALLOWED tells that's possible to comment a post
	CommentsStateAllowed CommentsState = 1
	// COMMENT_STATE_BLOCKED tells that's not possible to comment a post
	CommentsStateBlocked CommentsState = 2
)

var CommentsState_name = map[int32]string{
	0: "COMMENTS_STATE_UNSPECIFIED",
	1: "COMMENTS_STATE_ALLOWED",
	2: "COMMENTS_STATE_BLOCKED",
}

var CommentsState_value = map[string]int32{
	"COMMENTS_STATE_UNSPECIFIED": 0,
	"COMMENTS_STATE_ALLOWED":     1,
	"COMMENTS_STATE_BLOCKED":     2,
}

func (x CommentsState) String() string {
	return proto.EnumName(CommentsState_name, int32(x))
}

func (CommentsState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46085d0cf4c5bade, []int{0}
}

// Post contains all the data of a Desmos post
type Post struct {
	PostID               string        `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id" yaml:"id"`
	ParentID             string        `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id" yaml:"parent_id"`
	Message              string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty" yaml:"message"`
	Created              time.Time     `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created" yaml:"created"`
	LastEdited           time.Time     `protobuf:"bytes,5,opt,name=last_edited,json=lastEdited,proto3,stdtime" json:"last_edited" yaml:"created"`
	CommentsState        CommentsState `protobuf:"varint,6,opt,name=comments_state,json=commentsState,proto3,enum=desmos.posts.v1beta1.CommentsState" json:"comments_state" yaml:"comments_state"`
	Subspace             string        `protobuf:"bytes,7,opt,name=subspace,proto3" json:"subspace,omitempty" yaml:"subspace"`
	AdditionalAttributes []Attribute   `protobuf:"bytes,8,rep,name=additional_attributes,json=additionalAttributes,proto3" json:"additional_attributes,omitempty" yaml:"additional_attributes,omitempty"`
	Creator              string        `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	Attachments          Attachments   `protobuf:"bytes,10,rep,name=attachments,proto3,castrepeated=Attachments" json:"attachments" yaml:"attachments,omitempty"`
	PollData             *PollData     `protobuf:"bytes,11,opt,name=poll_data,json=pollData,proto3" json:"poll_data,omitempty" yaml:"poll_data,omitempty"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_46085d0cf4c5bade, []int{0}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetPostID() string {
	if m != nil {
		return m.PostID
	}
	return ""
}

func (m *Post) GetParentID() string {
	if m != nil {
		return m.ParentID
	}
	return ""
}

func (m *Post) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Post) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *Post) GetLastEdited() time.Time {
	if m != nil {
		return m.LastEdited
	}
	return time.Time{}
}

func (m *Post) GetCommentsState() CommentsState {
	if m != nil {
		return m.CommentsState
	}
	return CommentsStateUnspecified
}

func (m *Post) GetSubspace() string {
	if m != nil {
		return m.Subspace
	}
	return ""
}

func (m *Post) GetAdditionalAttributes() []Attribute {
	if m != nil {
		return m.AdditionalAttributes
	}
	return nil
}

func (m *Post) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Post) GetAttachments() Attachments {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Post) GetPollData() *PollData {
	if m != nil {
		return m.PollData
	}
	return nil
}

// Attachment contains the information representing any type of file provided
// with a post. This file can be an image or a multimedia file (vocals, video,
// documents, etc.).
type Attachment struct {
	URI      string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri" yaml:"uri"`
	MimeType string   `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type" yaml:"mime_type"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" yaml:"tags,omitempty"`
}

func (m *Attachment) Reset()         { *m = Attachment{} }
func (m *Attachment) String() string { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()    {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_46085d0cf4c5bade, []int{1}
}
func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(m, src)
}
func (m *Attachment) XXX_Size() int {
	return m.Size()
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *Attachment) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *Attachment) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Attribute represents a Posts' optional data entry and allows for
// custom Amino and JSON serialization and deserialization.
type Attribute struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_46085d0cf4c5bade, []int{2}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("desmos.posts.v1beta1.CommentsState", CommentsState_name, CommentsState_value)
	proto.RegisterType((*Post)(nil), "desmos.posts.v1beta1.Post")
	proto.RegisterType((*Attachment)(nil), "desmos.posts.v1beta1.Attachment")
	proto.RegisterType((*Attribute)(nil), "desmos.posts.v1beta1.Attribute")
}

func init() { proto.RegisterFile("desmos/posts/v1beta1/posts.proto", fileDescriptor_46085d0cf4c5bade) }

var fileDescriptor_46085d0cf4c5bade = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x31, 0x6f, 0xdb, 0x46,
	0x14, 0xc7, 0xc5, 0xc8, 0xb1, 0xa4, 0x13, 0xe2, 0x0a, 0x57, 0xa5, 0x60, 0x09, 0x83, 0x47, 0xb0,
	0x40, 0x21, 0xb4, 0x31, 0x89, 0xd8, 0x9d, 0xd2, 0x76, 0x30, 0x2d, 0x15, 0x50, 0x6b, 0xc7, 0x2a,
	0x2d, 0x23, 0x40, 0x3b, 0x08, 0x27, 0xf1, 0xc2, 0x10, 0x21, 0x75, 0x84, 0xee, 0x14, 0x57, 0xdf,
	0xa0, 0xc8, 0x94, 0xb1, 0x4b, 0x80, 0x00, 0x1d, 0x0a, 0xf4, 0x4b, 0x14, 0xdd, 0x82, 0x4e, 0x19,
	0x3b, 0x31, 0x85, 0xbc, 0x14, 0x1e, 0xf9, 0x09, 0x8a, 0x23, 0x8f, 0xa2, 0x6c, 0x28, 0xe8, 0x90,
	0xed, 0xf8, 0xee, 0xf7, 0xff, 0xbf, 0x77, 0xef, 0xee, 0x11, 0x18, 0x1e, 0x61, 0x11, 0x65, 0x76,
	0x4c, 0x19, 0x67, 0xf6, 0xb3, 0xfb, 0x63, 0xc2, 0xf1, 0xfd, 0xfc, 0xcb, 0x8a, 0x67, 0x94, 0x53,
	0xd8, 0xce, 0x09, 0x2b, 0x8f, 0x49, 0x42, 0x6b, 0xfb, 0xd4, 0xa7, 0x19, 0x60, 0x8b, 0x55, 0xce,
	0x6a, 0xc8, 0xa7, 0xd4, 0x0f, 0x89, 0x9d, 0x7d, 0x8d, 0xe7, 0x8f, 0x6d, 0x1e, 0x44, 0x84, 0x71,
	0x1c, 0xc5, 0x12, 0x78, 0x57, 0xba, 0x30, 0x94, 0xe9, 0xcc, 0xbf, 0x6a, 0x60, 0x6b, 0x40, 0x19,
	0x87, 0x5f, 0x82, 0x9a, 0xa0, 0x46, 0x81, 0xa7, 0x2a, 0x86, 0xd2, 0x69, 0x38, 0xe6, 0x32, 0x41,
	0xdb, 0x62, 0xab, 0xdf, 0xbd, 0x4a, 0x50, 0xb1, 0x99, 0x26, 0xa8, 0xb1, 0xc0, 0x51, 0xf8, 0xc0,
	0x0c, 0x3c, 0xd3, 0xdd, 0x16, 0xd1, 0xbe, 0x07, 0xbf, 0x05, 0x8d, 0x18, 0xcf, 0xc8, 0x34, 0x93,
	0xdf, 0xca, 0xe4, 0x7b, 0xcb, 0x04, 0xd5, 0x07, 0x59, 0x30, 0x33, 0x28, 0x81, 0x34, 0x41, 0xad,
	0xdc, 0x62, 0x15, 0x32, 0xdd, 0x7a, 0xbe, 0xee, 0x7b, 0xf0, 0x1e, 0xa8, 0x45, 0x84, 0x31, 0xec,
	0x13, 0xb5, 0x9a, 0x39, 0xc1, 0x34, 0x41, 0x3b, 0xb9, 0x40, 0x6e, 0x98, 0x6e, 0x81, 0xc0, 0x01,
	0xa8, 0x4d, 0x66, 0x04, 0x73, 0xe2, 0xa9, 0x5b, 0x86, 0xd2, 0x69, 0xee, 0x6b, 0x56, 0xde, 0x14,
	0xab, 0x68, 0x8a, 0x35, 0x2c, 0x9a, 0xe2, 0x68, 0xaf, 0x13, 0x54, 0x29, 0xdd, 0xa4, 0xd0, 0x7c,
	0xf1, 0x16, 0x29, 0x6e, 0x61, 0x03, 0x1f, 0x81, 0x66, 0x88, 0x19, 0x1f, 0x11, 0x2f, 0x10, 0xae,
	0xb7, 0xdf, 0xcb, 0x15, 0x08, 0xab, 0x5e, 0xe6, 0x04, 0x2f, 0xc0, 0xce, 0x84, 0x46, 0x11, 0x99,
	0x72, 0x36, 0x62, 0x1c, 0x73, 0xa2, 0x6e, 0x1b, 0x4a, 0x67, 0x67, 0xff, 0x13, 0x6b, 0xd3, 0x95,
	0x5b, 0x47, 0x92, 0x3d, 0x13, 0xa8, 0xf3, 0xf9, 0x55, 0x82, 0x6e, 0xc8, 0xd3, 0x04, 0xdd, 0x95,
	0x29, 0xaf, 0xc5, 0x4d, 0xf7, 0xce, 0x64, 0x5d, 0x0b, 0x6d, 0x50, 0x67, 0xf3, 0x31, 0x8b, 0xf1,
	0x84, 0xa8, 0xb5, 0xac, 0xa5, 0x1f, 0xa6, 0x09, 0xfa, 0x20, 0xd7, 0x16, 0x3b, 0xa6, 0xbb, 0x82,
	0xe0, 0x6f, 0x0a, 0xb8, 0x8b, 0x3d, 0x2f, 0xe0, 0x01, 0x9d, 0xe2, 0x70, 0x84, 0x39, 0x9f, 0x05,
	0xe3, 0x39, 0x27, 0x4c, 0xad, 0x1b, 0xd5, 0x4e, 0x73, 0x1f, 0x6d, 0xae, 0xf8, 0xb0, 0xe0, 0x9c,
	0xef, 0x45, 0x4b, 0xae, 0x12, 0x84, 0x36, 0xba, 0xdc, 0xa3, 0x51, 0xc0, 0x49, 0x14, 0xf3, 0x45,
	0x9a, 0xa0, 0x4f, 0xf3, 0x32, 0xfe, 0x07, 0x34, 0xdd, 0x76, 0x49, 0xac, 0xf2, 0x30, 0xf1, 0x58,
	0xb2, 0x7e, 0xd3, 0x99, 0xda, 0xb8, 0xf9, 0x58, 0xe4, 0x86, 0xe9, 0x16, 0x08, 0xbc, 0x00, 0x4d,
	0xcc, 0x39, 0x9e, 0x3c, 0xc9, 0x9a, 0xa3, 0x82, 0xec, 0x30, 0xc6, 0x3b, 0x0f, 0x23, 0x41, 0xe7,
	0x40, 0x5e, 0xf0, 0xae, 0x2c, 0xb5, 0xb4, 0x58, 0x2b, 0xf0, 0xf7, 0xb7, 0xa8, 0x59, 0x6a, 0x98,
	0xbb, 0x9e, 0x09, 0xfe, 0x08, 0x1a, 0x62, 0xe8, 0x46, 0x1e, 0xe6, 0x58, 0x6d, 0x66, 0x2f, 0x4a,
	0xdf, 0x9c, 0x76, 0x40, 0xc3, 0xb0, 0x8b, 0x39, 0x76, 0xf4, 0x34, 0x41, 0x9a, 0x1c, 0x93, 0x42,
	0xba, 0xde, 0x8f, 0x7a, 0x2c, 0xc9, 0x07, 0xf5, 0x5f, 0x5e, 0x21, 0xe5, 0xdf, 0x57, 0x48, 0x31,
	0xff, 0x54, 0x00, 0x28, 0x6b, 0x80, 0x16, 0xa8, 0xce, 0x67, 0x81, 0x1c, 0xe7, 0xdd, 0x65, 0x82,
	0xaa, 0xe7, 0x6e, 0xff, 0x2a, 0x41, 0x22, 0x9a, 0x26, 0x08, 0xe4, 0xee, 0xf3, 0x59, 0x60, 0xba,
	0x22, 0x24, 0xa6, 0x38, 0x0a, 0x22, 0x32, 0xe2, 0x8b, 0x98, 0xac, 0x4f, 0xf1, 0x49, 0x10, 0x91,
	0xe1, 0x22, 0x26, 0x62, 0x8a, 0x57, 0x40, 0x39, 0xc5, 0xab, 0x90, 0xe9, 0xd6, 0x23, 0x89, 0xc2,
	0x3d, 0xb0, 0xc5, 0xb1, 0xcf, 0xd4, 0xaa, 0x51, 0xed, 0x34, 0x9c, 0x8f, 0xcb, 0xb7, 0x2a, 0xa2,
	0xeb, 0xe7, 0xc8, 0xb0, 0xb5, 0x33, 0x7c, 0x0d, 0x1a, 0xab, 0xfb, 0x85, 0x2d, 0x50, 0x7d, 0x4a,
	0x16, 0xf9, 0x09, 0x5c, 0xb1, 0x84, 0x6d, 0x70, 0xfb, 0x19, 0x0e, 0xe7, 0xb2, 0x3e, 0x37, 0xff,
	0x28, 0xe5, 0x9f, 0xfd, 0xa1, 0x80, 0x3b, 0xd7, 0x26, 0x07, 0x7e, 0x05, 0xb4, 0xa3, 0xd3, 0x93,
	0x93, 0xde, 0xc3, 0xe1, 0xd9, 0xe8, 0x6c, 0x78, 0x38, 0xec, 0x8d, 0xce, 0x1f, 0x9e, 0x0d, 0x7a,
	0x47, 0xfd, 0x6f, 0xfa, 0xbd, 0x6e, 0xab, 0xa2, 0xed, 0x3e, 0x7f, 0x69, 0xa8, 0xd7, 0x24, 0xe7,
	0x53, 0x16, 0x93, 0x49, 0xf0, 0x38, 0x20, 0x1e, 0xfc, 0x02, 0x7c, 0x74, 0x43, 0x7d, 0x78, 0x7c,
	0x7c, 0xfa, 0xa8, 0xd7, 0x6d, 0x29, 0x9a, 0xfa, 0xfc, 0xa5, 0xd1, 0xbe, 0xa6, 0x3c, 0x0c, 0x43,
	0x7a, 0xb1, 0x51, 0xe5, 0x1c, 0x9f, 0x1e, 0x7d, 0xd7, 0xeb, 0xb6, 0x6e, 0x6d, 0x50, 0x39, 0x21,
	0x9d, 0x3c, 0x25, 0x9e, 0xb6, 0xf5, 0xf3, 0xaf, 0x7a, 0xc5, 0x39, 0x79, 0xbd, 0xd4, 0x95, 0x37,
	0x4b, 0x5d, 0xf9, 0x67, 0xa9, 0x2b, 0x2f, 0x2e, 0xf5, 0xca, 0x9b, 0x4b, 0xbd, 0xf2, 0xf7, 0xa5,
	0x5e, 0xf9, 0xe1, 0xc0, 0x0f, 0xf8, 0x93, 0xf9, 0xd8, 0x9a, 0xd0, 0xc8, 0xce, 0x1f, 0xcf, 0x5e,
	0x88, 0xc7, 0x4c, 0xae, 0xed, 0x9f, 0x6c, 0xc6, 0xb1, 0x1f, 0x4c, 0x7d, 0xf9, 0xbb, 0x17, 0x57,
	0xc2, 0xc6, 0xdb, 0xd9, 0x1f, 0xeb, 0xe0, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xc2, 0xa7,
	0x09, 0x7a, 0x06, 0x00, 0x00,
}

func (this *Post) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Post)
	if !ok {
		that2, ok := that.(Post)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PostID != that1.PostID {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Created.Equal(that1.Created) {
		return false
	}
	if !this.LastEdited.Equal(that1.LastEdited) {
		return false
	}
	if this.CommentsState != that1.CommentsState {
		return false
	}
	if this.Subspace != that1.Subspace {
		return false
	}
	if len(this.AdditionalAttributes) != len(that1.AdditionalAttributes) {
		return false
	}
	for i := range this.AdditionalAttributes {
		if !this.AdditionalAttributes[i].Equal(&that1.AdditionalAttributes[i]) {
			return false
		}
	}
	if this.Creator != that1.Creator {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(&that1.Attachments[i]) {
			return false
		}
	}
	if !this.PollData.Equal(that1.PollData) {
		return false
	}
	return true
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.URI != that1.URI {
		return false
	}
	if this.MimeType != that1.MimeType {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *Attribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attribute)
	if !ok {
		that2, ok := that.(Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PollData != nil {
		{
			size, err := m.PollData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPosts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPosts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AdditionalAttributes) > 0 {
		for iNdEx := len(m.AdditionalAttributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalAttributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPosts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CommentsState != 0 {
		i = encodeVarintPosts(dAtA, i, uint64(m.CommentsState))
		i--
		dAtA[i] = 0x30
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastEdited, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastEdited):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPosts(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPosts(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentID) > 0 {
		i -= len(m.ParentID)
		copy(dAtA[i:], m.ParentID)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.ParentID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PostID) > 0 {
		i -= len(m.PostID)
		copy(dAtA[i:], m.PostID)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.PostID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attachment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attachment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintPosts(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPosts(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPosts(dAtA []byte, offset int, v uint64) int {
	offset -= sovPosts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PostID)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovPosts(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastEdited)
	n += 1 + l + sovPosts(uint64(l))
	if m.CommentsState != 0 {
		n += 1 + sovPosts(uint64(m.CommentsState))
	}
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	if len(m.AdditionalAttributes) > 0 {
		for _, e := range m.AdditionalAttributes {
			l = e.Size()
			n += 1 + l + sovPosts(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovPosts(uint64(l))
		}
	}
	if m.PollData != nil {
		l = m.PollData.Size()
		n += 1 + l + sovPosts(uint64(l))
	}
	return n
}

func (m *Attachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovPosts(uint64(l))
		}
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPosts(uint64(l))
	}
	return n
}

func sovPosts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPosts(x uint64) (n int) {
	return sovPosts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPosts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEdited", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastEdited, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsState", wireType)
			}
			m.CommentsState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentsState |= CommentsState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalAttributes = append(m.AdditionalAttributes, Attribute{})
			if err := m.AdditionalAttributes[len(m.AdditionalAttributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PollData == nil {
				m.PollData = &PollData{}
			}
			if err := m.PollData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPosts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPosts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPosts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPosts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPosts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPosts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPosts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPosts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPosts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPosts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPosts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPosts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPosts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPosts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPosts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPosts = fmt.Errorf("proto: unexpected end of group")
)
