// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/relationships/v1beta1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRelationship represents a message to create a relationship
// between two users on a specific subspace.
type MsgCreateRelationship struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty" yaml:"receiver"`
	Subspace string `protobuf:"bytes,3,opt,name=subspace,proto3" json:"subspace,omitempty" yaml:"subspace"`
}

func (m *MsgCreateRelationship) Reset()         { *m = MsgCreateRelationship{} }
func (m *MsgCreateRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationship) ProtoMessage()    {}
func (*MsgCreateRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{0}
}
func (m *MsgCreateRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationship.Merge(m, src)
}
func (m *MsgCreateRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationship proto.InternalMessageInfo

// CreateRelationshipResponse defines the Msg/CreateRelationship response type.
type CreateRelationshipResponse struct {
}

func (m *CreateRelationshipResponse) Reset()         { *m = CreateRelationshipResponse{} }
func (m *CreateRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRelationshipResponse) ProtoMessage()    {}
func (*CreateRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{1}
}
func (m *CreateRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRelationshipResponse.Merge(m, src)
}
func (m *CreateRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRelationshipResponse proto.InternalMessageInfo

// MsgDeleteRelationship represents a message to delete the relationship
// between two users.
type MsgDeleteRelationship struct {
	User         string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
	Counterparty string `protobuf:"bytes,2,opt,name=counterparty,proto3" json:"counterparty,omitempty" yaml:"counterparty"`
	Subspace     string `protobuf:"bytes,3,opt,name=subspace,proto3" json:"subspace,omitempty" yaml:"subspace"`
}

func (m *MsgDeleteRelationship) Reset()         { *m = MsgDeleteRelationship{} }
func (m *MsgDeleteRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelationship) ProtoMessage()    {}
func (*MsgDeleteRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{2}
}
func (m *MsgDeleteRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelationship.Merge(m, src)
}
func (m *MsgDeleteRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelationship proto.InternalMessageInfo

func (m *MsgDeleteRelationship) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgDeleteRelationship) GetCounterparty() string {
	if m != nil {
		return m.Counterparty
	}
	return ""
}

func (m *MsgDeleteRelationship) GetSubspace() string {
	if m != nil {
		return m.Subspace
	}
	return ""
}

// DeleteRelationshipResponse defines the Msg/DeleteRelationship response type.
type DeleteRelationshipResponse struct {
}

func (m *DeleteRelationshipResponse) Reset()         { *m = DeleteRelationshipResponse{} }
func (m *DeleteRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipResponse) ProtoMessage()    {}
func (*DeleteRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{3}
}
func (m *DeleteRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipResponse.Merge(m, src)
}
func (m *DeleteRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipResponse proto.InternalMessageInfo

// MsgBlockUser represents a message to block another user specifying an
// optional reason.
type MsgBlockUser struct {
	Blocker  string `protobuf:"bytes,1,opt,name=blocker,proto3" json:"blocker,omitempty" yaml:"blocker"`
	Blocked  string `protobuf:"bytes,2,opt,name=blocked,proto3" json:"blocked,omitempty" yaml:"blocked"`
	Reason   string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" yaml:"reason"`
	Subspace string `protobuf:"bytes,4,opt,name=subspace,proto3" json:"subspace,omitempty" yaml:"subspace"`
}

func (m *MsgBlockUser) Reset()         { *m = MsgBlockUser{} }
func (m *MsgBlockUser) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUser) ProtoMessage()    {}
func (*MsgBlockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{4}
}
func (m *MsgBlockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUser.Merge(m, src)
}
func (m *MsgBlockUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUser proto.InternalMessageInfo

func (m *MsgBlockUser) GetBlocker() string {
	if m != nil {
		return m.Blocker
	}
	return ""
}

func (m *MsgBlockUser) GetBlocked() string {
	if m != nil {
		return m.Blocked
	}
	return ""
}

func (m *MsgBlockUser) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgBlockUser) GetSubspace() string {
	if m != nil {
		return m.Subspace
	}
	return ""
}

// BlockUserResponse defines the Msg/BlockUser response type.
type BlockUserResponse struct {
}

func (m *BlockUserResponse) Reset()         { *m = BlockUserResponse{} }
func (m *BlockUserResponse) String() string { return proto.CompactTextString(m) }
func (*BlockUserResponse) ProtoMessage()    {}
func (*BlockUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{5}
}
func (m *BlockUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUserResponse.Merge(m, src)
}
func (m *BlockUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUserResponse proto.InternalMessageInfo

// MsgUnblockUser represents a message to unblock a previously blocked user.
type MsgUnblockUser struct {
	Blocker  string `protobuf:"bytes,1,opt,name=blocker,proto3" json:"blocker,omitempty" yaml:"blocker"`
	Blocked  string `protobuf:"bytes,2,opt,name=blocked,proto3" json:"blocked,omitempty" yaml:"blocked"`
	Subspace string `protobuf:"bytes,4,opt,name=subspace,proto3" json:"subspace,omitempty" yaml:"subspace"`
}

func (m *MsgUnblockUser) Reset()         { *m = MsgUnblockUser{} }
func (m *MsgUnblockUser) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockUser) ProtoMessage()    {}
func (*MsgUnblockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{6}
}
func (m *MsgUnblockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockUser.Merge(m, src)
}
func (m *MsgUnblockUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockUser proto.InternalMessageInfo

func (m *MsgUnblockUser) GetBlocker() string {
	if m != nil {
		return m.Blocker
	}
	return ""
}

func (m *MsgUnblockUser) GetBlocked() string {
	if m != nil {
		return m.Blocked
	}
	return ""
}

func (m *MsgUnblockUser) GetSubspace() string {
	if m != nil {
		return m.Subspace
	}
	return ""
}

// UnblockUserResponse defines the Msg/UnblockUser response type.
type UnblockUserResponse struct {
}

func (m *UnblockUserResponse) Reset()         { *m = UnblockUserResponse{} }
func (m *UnblockUserResponse) String() string { return proto.CompactTextString(m) }
func (*UnblockUserResponse) ProtoMessage()    {}
func (*UnblockUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_452d94af952e9e01, []int{7}
}
func (m *UnblockUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnblockUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnblockUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnblockUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnblockUserResponse.Merge(m, src)
}
func (m *UnblockUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnblockUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnblockUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnblockUserResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateRelationship)(nil), "desmos.relationships.v1beta1.MsgCreateRelationship")
	proto.RegisterType((*CreateRelationshipResponse)(nil), "desmos.relationships.v1beta1.CreateRelationshipResponse")
	proto.RegisterType((*MsgDeleteRelationship)(nil), "desmos.relationships.v1beta1.MsgDeleteRelationship")
	proto.RegisterType((*DeleteRelationshipResponse)(nil), "desmos.relationships.v1beta1.DeleteRelationshipResponse")
	proto.RegisterType((*MsgBlockUser)(nil), "desmos.relationships.v1beta1.MsgBlockUser")
	proto.RegisterType((*BlockUserResponse)(nil), "desmos.relationships.v1beta1.BlockUserResponse")
	proto.RegisterType((*MsgUnblockUser)(nil), "desmos.relationships.v1beta1.MsgUnblockUser")
	proto.RegisterType((*UnblockUserResponse)(nil), "desmos.relationships.v1beta1.UnblockUserResponse")
}

func init() {
	proto.RegisterFile("desmos/relationships/v1beta1/msgs.proto", fileDescriptor_452d94af952e9e01)
}

var fileDescriptor_452d94af952e9e01 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x6d, 0x52, 0x95, 0xf6, 0x5a, 0x5a, 0xd5, 0xa1, 0x22, 0xb2, 0x2a, 0x1b, 0x1d, 0x03,
	0x3f, 0x04, 0xb6, 0x42, 0x17, 0xd4, 0x6e, 0x81, 0x35, 0x8b, 0xa5, 0x2c, 0x6c, 0xfe, 0xf1, 0x74,
	0xb1, 0x70, 0x7c, 0x96, 0x9f, 0x53, 0x91, 0x99, 0x85, 0x91, 0x7f, 0x00, 0xa9, 0x33, 0x03, 0x7f,
	0x06, 0x62, 0xec, 0xc8, 0x64, 0xa1, 0x64, 0x41, 0x62, 0xf3, 0x5f, 0x80, 0xec, 0x73, 0x5c, 0x27,
	0x4e, 0x13, 0xba, 0x74, 0xb3, 0xef, 0x7d, 0x9e, 0xef, 0xfb, 0xd1, 0xbd, 0x33, 0x79, 0xea, 0x01,
	0x8e, 0x38, 0x9a, 0x31, 0x04, 0x76, 0xe2, 0xf3, 0x10, 0x87, 0x7e, 0x84, 0xe6, 0x45, 0xd7, 0x81,
	0xc4, 0xee, 0x9a, 0x23, 0x64, 0x68, 0x44, 0x31, 0x4f, 0xb8, 0x72, 0x22, 0x40, 0x63, 0x01, 0x34,
	0x4a, 0x50, 0x7d, 0xc8, 0x38, 0xe3, 0x05, 0x68, 0xe6, 0x4f, 0xa2, 0x87, 0x7e, 0x97, 0xc9, 0x71,
	0x1f, 0xd9, 0xdb, 0x18, 0xec, 0x04, 0xac, 0x5a, 0xa3, 0xf2, 0x9c, 0x6c, 0x23, 0x84, 0x1e, 0xc4,
	0x1d, 0xf9, 0xb1, 0xfc, 0x6c, 0xb7, 0x77, 0x94, 0xa5, 0xfa, 0x83, 0x89, 0x3d, 0x0a, 0xce, 0xa8,
	0x58, 0xa7, 0x56, 0x09, 0x28, 0x26, 0xd9, 0x89, 0xc1, 0x05, 0xff, 0x02, 0xe2, 0xce, 0xbd, 0x02,
	0x6e, 0x67, 0xa9, 0x7e, 0x28, 0xe0, 0x79, 0x85, 0x5a, 0x15, 0x94, 0x37, 0xe0, 0xd8, 0xc1, 0xc8,
	0x76, 0xa1, 0xd3, 0x5a, 0x6e, 0x98, 0x57, 0xa8, 0x55, 0x41, 0x67, 0x3b, 0x9f, 0x2f, 0x75, 0xe9,
	0xcf, 0xa5, 0x2e, 0xd1, 0x13, 0xa2, 0x36, 0xc3, 0x5a, 0x80, 0x11, 0x0f, 0x11, 0xe8, 0x37, 0xa1,
	0xf3, 0x0e, 0x02, 0x58, 0xd2, 0x79, 0x42, 0xb6, 0xc6, 0x58, 0xc9, 0x1c, 0x66, 0xa9, 0xbe, 0x27,
	0xb6, 0xcb, 0x57, 0xa9, 0x55, 0x14, 0x95, 0x73, 0xb2, 0xef, 0xf2, 0x71, 0x98, 0x40, 0x1c, 0xd9,
	0x71, 0x32, 0x29, 0x65, 0x1e, 0x65, 0xa9, 0xde, 0x16, 0x70, 0xbd, 0x4a, 0xad, 0x05, 0xf8, 0xd6,
	0x52, 0xb9, 0x4a, 0x33, 0x68, 0xa5, 0xf2, 0x43, 0x26, 0xfb, 0x7d, 0x64, 0xbd, 0x80, 0xbb, 0x1f,
	0x06, 0x79, 0xb8, 0x97, 0xe4, 0xbe, 0x93, 0xbf, 0x54, 0x12, 0x4a, 0x96, 0xea, 0x07, 0xe2, 0xf3,
	0x65, 0x81, 0x5a, 0x73, 0xe4, 0x9a, 0xf6, 0x4a, 0x8b, 0x06, 0xed, 0x55, 0xb4, 0x97, 0x1f, 0x76,
	0x0c, 0x36, 0xf2, 0xb0, 0x4c, 0x5e, 0x3b, 0x6c, 0xb1, 0x4e, 0xad, 0x12, 0x58, 0xd0, 0xdc, 0xfa,
	0x1f, 0xcd, 0x36, 0x39, 0xaa, 0x24, 0x2a, 0xbb, 0xaf, 0x32, 0x39, 0xe8, 0x23, 0x1b, 0x84, 0xce,
	0x9d, 0xf8, 0xdd, 0x3a, 0xf4, 0x31, 0x69, 0xd7, 0xb2, 0xcd, 0x63, 0xbf, 0xfe, 0xdb, 0x22, 0xad,
	0x3e, 0x32, 0xe5, 0x93, 0x4c, 0x94, 0x15, 0x77, 0xe6, 0xd4, 0x58, 0x77, 0x05, 0x8d, 0x95, 0x17,
	0x4d, 0x7d, 0xb3, 0xbe, 0xe9, 0xe6, 0x69, 0x2f, 0x52, 0xac, 0x18, 0xf5, 0xcd, 0x29, 0x9a, 0x4d,
	0x9b, 0x52, 0xdc, 0x3c, 0xa8, 0xca, 0x90, 0xec, 0x5e, 0x0f, 0xe9, 0x8b, 0x8d, 0x7b, 0x57, 0xac,
	0x6a, 0xae, 0x67, 0x1b, 0x43, 0xa3, 0x84, 0x64, 0x6f, 0x61, 0x60, 0x36, 0xee, 0x55, 0xa3, 0xd5,
	0xee, 0x7a, 0x7a, 0xc5, 0x69, 0xf7, 0x06, 0x3f, 0xa7, 0x9a, 0x7c, 0x35, 0xd5, 0xe4, 0xdf, 0x53,
	0x4d, 0xfe, 0x32, 0xd3, 0xa4, 0xab, 0x99, 0x26, 0xfd, 0x9a, 0x69, 0xd2, 0xfb, 0x73, 0xe6, 0x27,
	0xc3, 0xb1, 0x63, 0xb8, 0x7c, 0x64, 0x8a, 0xcf, 0xbe, 0x0a, 0x6c, 0x07, 0xcb, 0x67, 0xf3, 0xa3,
	0x89, 0x89, 0xcd, 0xfc, 0x90, 0x2d, 0xfd, 0xb4, 0x93, 0x49, 0x04, 0xe8, 0x6c, 0x17, 0xbf, 0xde,
	0xd3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x46, 0xca, 0xbc, 0xd9, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateRelationship defines a method for creating a new relationship
	CreateRelationship(ctx context.Context, in *MsgCreateRelationship, opts ...grpc.CallOption) (*CreateRelationshipResponse, error)
	// DeleteRelationship defines a method for deleting a relationship
	DeleteRelationship(ctx context.Context, in *MsgDeleteRelationship, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error)
	// BlockUser defines a method for blocking a user
	BlockUser(ctx context.Context, in *MsgBlockUser, opts ...grpc.CallOption) (*BlockUserResponse, error)
	// UnblockUser defines a method for unblocking a user
	UnblockUser(ctx context.Context, in *MsgUnblockUser, opts ...grpc.CallOption) (*UnblockUserResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateRelationship(ctx context.Context, in *MsgCreateRelationship, opts ...grpc.CallOption) (*CreateRelationshipResponse, error) {
	out := new(CreateRelationshipResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1beta1.Msg/CreateRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteRelationship(ctx context.Context, in *MsgDeleteRelationship, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	out := new(DeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1beta1.Msg/DeleteRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockUser(ctx context.Context, in *MsgBlockUser, opts ...grpc.CallOption) (*BlockUserResponse, error) {
	out := new(BlockUserResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1beta1.Msg/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnblockUser(ctx context.Context, in *MsgUnblockUser, opts ...grpc.CallOption) (*UnblockUserResponse, error) {
	out := new(UnblockUserResponse)
	err := c.cc.Invoke(ctx, "/desmos.relationships.v1beta1.Msg/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateRelationship defines a method for creating a new relationship
	CreateRelationship(context.Context, *MsgCreateRelationship) (*CreateRelationshipResponse, error)
	// DeleteRelationship defines a method for deleting a relationship
	DeleteRelationship(context.Context, *MsgDeleteRelationship) (*DeleteRelationshipResponse, error)
	// BlockUser defines a method for blocking a user
	BlockUser(context.Context, *MsgBlockUser) (*BlockUserResponse, error)
	// UnblockUser defines a method for unblocking a user
	UnblockUser(context.Context, *MsgUnblockUser) (*UnblockUserResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateRelationship(ctx context.Context, req *MsgCreateRelationship) (*CreateRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelationship not implemented")
}
func (*UnimplementedMsgServer) DeleteRelationship(ctx context.Context, req *MsgDeleteRelationship) (*DeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (*UnimplementedMsgServer) BlockUser(ctx context.Context, req *MsgBlockUser) (*BlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (*UnimplementedMsgServer) UnblockUser(ctx context.Context, req *MsgUnblockUser) (*UnblockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1beta1.Msg/CreateRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRelationship(ctx, req.(*MsgCreateRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1beta1.Msg/DeleteRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteRelationship(ctx, req.(*MsgDeleteRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1beta1.Msg/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockUser(ctx, req.(*MsgBlockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnblockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.relationships.v1beta1.Msg/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnblockUser(ctx, req.(*MsgUnblockUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.relationships.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelationship",
			Handler:    _Msg_CreateRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _Msg_DeleteRelationship_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Msg_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Msg_UnblockUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/relationships/v1beta1/msgs.proto",
}

func (m *MsgCreateRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnblockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subspace) > 0 {
		i -= len(m.Subspace)
		copy(dAtA[i:], m.Subspace)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Subspace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Blocked) > 0 {
		i -= len(m.Blocked)
		copy(dAtA[i:], m.Blocked)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocker) > 0 {
		i -= len(m.Blocker)
		copy(dAtA[i:], m.Blocker)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Blocker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnblockUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnblockUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnblockUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *CreateRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *DeleteRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBlockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *BlockUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnblockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocker)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Blocked)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Subspace)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *UnblockUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnblockUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnblockUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnblockUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
