// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QuerySubspace is the request type for the Query/Subspace RPC method
type QuerySubspaceRequest struct {
	SubspaceId string `protobuf:"bytes,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id,omitempty"`
}

func (m *QuerySubspaceRequest) Reset()         { *m = QuerySubspaceRequest{} }
func (m *QuerySubspaceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubspaceRequest) ProtoMessage()    {}
func (*QuerySubspaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_507408a9c338149a, []int{0}
}
func (m *QuerySubspaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubspaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubspaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubspaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubspaceRequest.Merge(m, src)
}
func (m *QuerySubspaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubspaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubspaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubspaceRequest proto.InternalMessageInfo

// QuerySubspaceResponse is the response type for the Query/Subspace method
type QuerySubspaceResponse struct {
	Subspace           Subspace `protobuf:"bytes,1,opt,name=subspace,proto3" json:"subspace"`
	Admins             Users    `protobuf:"bytes,2,opt,name=admins,proto3" json:"admins"`
	BlockedToPostUsers Users    `protobuf:"bytes,3,opt,name=blocked_to_post_users,json=blockedToPostUsers,proto3" json:"blocked_to_post_users"`
}

func (m *QuerySubspaceResponse) Reset()         { *m = QuerySubspaceResponse{} }
func (m *QuerySubspaceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubspaceResponse) ProtoMessage()    {}
func (*QuerySubspaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_507408a9c338149a, []int{1}
}
func (m *QuerySubspaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubspaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubspaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubspaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubspaceResponse.Merge(m, src)
}
func (m *QuerySubspaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubspaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubspaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubspaceResponse proto.InternalMessageInfo

func (m *QuerySubspaceResponse) GetSubspace() Subspace {
	if m != nil {
		return m.Subspace
	}
	return Subspace{}
}

func (m *QuerySubspaceResponse) GetAdmins() Users {
	if m != nil {
		return m.Admins
	}
	return Users{}
}

func (m *QuerySubspaceResponse) GetBlockedToPostUsers() Users {
	if m != nil {
		return m.BlockedToPostUsers
	}
	return Users{}
}

func init() {
	proto.RegisterType((*QuerySubspaceRequest)(nil), "desmos.subspaces.v1beta1.QuerySubspaceRequest")
	proto.RegisterType((*QuerySubspaceResponse)(nil), "desmos.subspaces.v1beta1.QuerySubspaceResponse")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v1beta1/query.proto", fileDescriptor_507408a9c338149a)
}

var fileDescriptor_507408a9c338149a = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6b, 0xdb, 0x40,
	0x14, 0xc7, 0x75, 0x6e, 0x6b, 0xdc, 0xf3, 0x76, 0xd8, 0x20, 0x4c, 0x91, 0x8a, 0x68, 0x71, 0x3b,
	0x54, 0x87, 0xdd, 0xa1, 0x50, 0xe8, 0x50, 0xd3, 0xa5, 0x5b, 0xed, 0xb6, 0x50, 0xba, 0x88, 0x93,
	0x75, 0xa8, 0xa2, 0x92, 0x9e, 0xec, 0x77, 0x2a, 0x35, 0xa5, 0x4b, 0xa7, 0x8e, 0x81, 0xac, 0x19,
	0x3c, 0xe5, 0xb3, 0x78, 0x34, 0x64, 0xc9, 0x14, 0x82, 0x9d, 0x21, 0x9f, 0x20, 0x73, 0xb0, 0x7c,
	0x32, 0x26, 0x44, 0x90, 0x6c, 0xe2, 0xee, 0xf7, 0xff, 0xbd, 0xa7, 0xf7, 0x8e, 0x3e, 0x0b, 0x24,
	0x26, 0x80, 0x1c, 0x73, 0x1f, 0x33, 0x31, 0x96, 0xc8, 0x7f, 0xf5, 0x7c, 0xa9, 0x44, 0x8f, 0x4f,
	0x72, 0x39, 0x9d, 0xb9, 0xd9, 0x14, 0x14, 0x30, 0x73, 0x4b, 0xb9, 0x3b, 0xca, 0xd5, 0x54, 0xa7,
	0x15, 0x42, 0x08, 0x05, 0xc4, 0x37, 0x5f, 0x5b, 0xbe, 0xf3, 0x24, 0x04, 0x08, 0x63, 0xc9, 0x45,
	0x16, 0x71, 0x91, 0xa6, 0xa0, 0x84, 0x8a, 0x20, 0x45, 0x7d, 0xdb, 0xad, 0xac, 0x59, 0x9e, 0x68,
	0xf0, 0x79, 0x25, 0x98, 0x40, 0x20, 0x63, 0xed, 0x73, 0xde, 0xd3, 0xd6, 0x70, 0xd3, 0xec, 0x67,
	0x8d, 0x8d, 0xe4, 0x24, 0x97, 0xa8, 0x98, 0x4d, 0x9b, 0x65, 0xd2, 0x8b, 0x02, 0x93, 0x3c, 0x25,
	0x2f, 0x1e, 0x8f, 0x68, 0x79, 0xf4, 0x31, 0x78, 0xdb, 0xf8, 0x3f, 0xb7, 0x8d, 0xcb, 0xb9, 0x6d,
	0x38, 0x57, 0x84, 0xb6, 0x6f, 0x38, 0x30, 0x83, 0x14, 0x25, 0xfb, 0x40, 0x1b, 0x65, 0xa2, 0x30,
	0x34, 0xfb, 0x8e, 0x5b, 0x35, 0x0d, 0xb7, 0x4c, 0x0f, 0x1e, 0x2e, 0xce, 0x6c, 0x63, 0xb4, 0x4b,
	0xb2, 0x77, 0xb4, 0x2e, 0x82, 0x24, 0x4a, 0xd1, 0xac, 0x15, 0x0e, 0xbb, 0xda, 0xf1, 0x15, 0xe5,
	0x14, 0xb5, 0x40, 0x87, 0xd8, 0x37, 0xda, 0xf6, 0x63, 0x18, 0xff, 0x94, 0x81, 0xa7, 0xc0, 0xcb,
	0x00, 0x95, 0x97, 0x6f, 0x30, 0xf3, 0xc1, 0x7d, 0x6c, 0x4c, 0x3b, 0xbe, 0xc0, 0x27, 0x40, 0x55,
	0xdc, 0xf4, 0x8f, 0x09, 0x7d, 0x54, 0xfc, 0x38, 0x3b, 0x22, 0xb4, 0x51, 0xf6, 0xcf, 0xdc, 0x6a,
	0xe3, 0x6d, 0xa3, 0xee, 0xf0, 0x3b, 0xf3, 0xdb, 0xb1, 0x3a, 0xfc, 0xdf, 0xc9, 0xc5, 0x61, 0xed,
	0x25, 0xeb, 0xf2, 0xca, 0x1d, 0xff, 0xd9, 0x5b, 0xde, 0xdf, 0xc1, 0x70, 0xb1, 0xb2, 0xc8, 0x72,
	0x65, 0x91, 0xf3, 0x95, 0x45, 0x0e, 0xd6, 0x96, 0xb1, 0x5c, 0x5b, 0xc6, 0xe9, 0xda, 0x32, 0xbe,
	0xbf, 0x09, 0x23, 0xf5, 0x23, 0xf7, 0xdd, 0x31, 0x24, 0x5a, 0xf6, 0x2a, 0x16, 0x3e, 0x96, 0xe2,
	0xdf, 0x1c, 0x95, 0x08, 0xa3, 0x34, 0xdc, 0x2b, 0xa1, 0x66, 0x99, 0x44, 0xbf, 0x5e, 0x3c, 0x9f,
	0xd7, 0xd7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x9e, 0xe3, 0x7e, 0x04, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Subspace queries all the information about the subspace with the given id
	Subspace(ctx context.Context, in *QuerySubspaceRequest, opts ...grpc.CallOption) (*QuerySubspaceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Subspace(ctx context.Context, in *QuerySubspaceRequest, opts ...grpc.CallOption) (*QuerySubspaceResponse, error) {
	out := new(QuerySubspaceResponse)
	err := c.cc.Invoke(ctx, "/desmos.subspaces.v1beta1.Query/Subspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Subspace queries all the information about the subspace with the given id
	Subspace(context.Context, *QuerySubspaceRequest) (*QuerySubspaceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Subspace(ctx context.Context, req *QuerySubspaceRequest) (*QuerySubspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subspace not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Subspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.subspaces.v1beta1.Query/Subspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subspace(ctx, req.(*QuerySubspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.subspaces.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subspace",
			Handler:    _Query_Subspace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/subspaces/v1beta1/query.proto",
}

func (m *QuerySubspaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubspaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubspaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubspaceId) > 0 {
		i -= len(m.SubspaceId)
		copy(dAtA[i:], m.SubspaceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubspaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubspaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubspaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubspaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockedToPostUsers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Admins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Subspace.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySubspaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubspaceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubspaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Subspace.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Admins.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BlockedToPostUsers.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySubspaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubspaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubspaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubspaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubspaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubspaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubspaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subspace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subspace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedToPostUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockedToPostUsers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
