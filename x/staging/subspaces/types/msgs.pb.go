// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v1beta1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateSubspace represents the message used to create a subspace
type MsgCreateSubspace struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"subspace_id" yaml:"subspace_id"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
}

func (m *MsgCreateSubspace) Reset()         { *m = MsgCreateSubspace{} }
func (m *MsgCreateSubspace) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubspace) ProtoMessage()    {}
func (*MsgCreateSubspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{0}
}
func (m *MsgCreateSubspace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubspace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubspace.Merge(m, src)
}
func (m *MsgCreateSubspace) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubspace) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubspace.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubspace proto.InternalMessageInfo

// MsgCreateSubspaceResponse defines the Msg/CreateSubspace response type
type MsgCreateSubspaceResponse struct {
}

func (m *MsgCreateSubspaceResponse) Reset()         { *m = MsgCreateSubspaceResponse{} }
func (m *MsgCreateSubspaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubspaceResponse) ProtoMessage()    {}
func (*MsgCreateSubspaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{1}
}
func (m *MsgCreateSubspaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubspaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubspaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubspaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubspaceResponse.Merge(m, src)
}
func (m *MsgCreateSubspaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubspaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubspaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubspaceResponse proto.InternalMessageInfo

// MsgAddSubspaceAdmin represents the message used to add an admin to a specific subspace
type MsgAddAdmin struct {
	SubspaceId string `protobuf:"bytes,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id" yaml:"subspace_id"`
	NewAdmin   string `protobuf:"bytes,2,opt,name=new_admin,json=newAdmin,proto3" json:"new_admin,omitempty" yaml:"new_admin"`
	Creator    string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
}

func (m *MsgAddAdmin) Reset()         { *m = MsgAddAdmin{} }
func (m *MsgAddAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgAddAdmin) ProtoMessage()    {}
func (*MsgAddAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{2}
}
func (m *MsgAddAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAdmin.Merge(m, src)
}
func (m *MsgAddAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAdmin proto.InternalMessageInfo

// MsgAddAdminResponse defines the Msg/AddAdmin response type
type MsgAddAdminResponse struct {
}

func (m *MsgAddAdminResponse) Reset()         { *m = MsgAddAdminResponse{} }
func (m *MsgAddAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAdminResponse) ProtoMessage()    {}
func (*MsgAddAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{3}
}
func (m *MsgAddAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAdminResponse.Merge(m, src)
}
func (m *MsgAddAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAdminResponse proto.InternalMessageInfo

// MsgRemoveSubspaceAdmin represents the message used to remove an admin from a specific subspace
type MsgRemoveAdmin struct {
	SubspaceId string `protobuf:"bytes,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id" yaml:"subspace_id"`
	Admin      string `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	Creator    string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
}

func (m *MsgRemoveAdmin) Reset()         { *m = MsgRemoveAdmin{} }
func (m *MsgRemoveAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAdmin) ProtoMessage()    {}
func (*MsgRemoveAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{4}
}
func (m *MsgRemoveAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAdmin.Merge(m, src)
}
func (m *MsgRemoveAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAdmin proto.InternalMessageInfo

// MsgRemoveAdminResponse defines the Msg/RemoveUser response type
type MsgRemoveAdminResponse struct {
}

func (m *MsgRemoveAdminResponse) Reset()         { *m = MsgRemoveAdminResponse{} }
func (m *MsgRemoveAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAdminResponse) ProtoMessage()    {}
func (*MsgRemoveAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{5}
}
func (m *MsgRemoveAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAdminResponse.Merge(m, src)
}
func (m *MsgRemoveAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAdminResponse proto.InternalMessageInfo

// MsgAllowUserPosts represents the message used to allow a user to post inside a specific subspace
type MsgAllowUserPosts struct {
	User       string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
	SubspaceId string `protobuf:"bytes,2,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id" yaml:"subspace_id"`
	Admin      string `protobuf:"bytes,3,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
}

func (m *MsgAllowUserPosts) Reset()         { *m = MsgAllowUserPosts{} }
func (m *MsgAllowUserPosts) String() string { return proto.CompactTextString(m) }
func (*MsgAllowUserPosts) ProtoMessage()    {}
func (*MsgAllowUserPosts) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{6}
}
func (m *MsgAllowUserPosts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllowUserPosts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllowUserPosts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllowUserPosts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllowUserPosts.Merge(m, src)
}
func (m *MsgAllowUserPosts) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllowUserPosts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllowUserPosts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllowUserPosts proto.InternalMessageInfo

// MsgAllowUserPostsResponse defines the Msg/MsgAllowUserPosts response type
type MsgAllowUserPostsResponse struct {
}

func (m *MsgAllowUserPostsResponse) Reset()         { *m = MsgAllowUserPostsResponse{} }
func (m *MsgAllowUserPostsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAllowUserPostsResponse) ProtoMessage()    {}
func (*MsgAllowUserPostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{7}
}
func (m *MsgAllowUserPostsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllowUserPostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllowUserPostsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllowUserPostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllowUserPostsResponse.Merge(m, src)
}
func (m *MsgAllowUserPostsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllowUserPostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllowUserPostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllowUserPostsResponse proto.InternalMessageInfo

// MsgBlockUserPosts represents the message used to block a user to post inside a specific subspace
type MsgBlockUserPosts struct {
	User       string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
	SubspaceId string `protobuf:"bytes,2,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id" yaml:"subspace_id"`
	Admin      string `protobuf:"bytes,3,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
}

func (m *MsgBlockUserPosts) Reset()         { *m = MsgBlockUserPosts{} }
func (m *MsgBlockUserPosts) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUserPosts) ProtoMessage()    {}
func (*MsgBlockUserPosts) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{8}
}
func (m *MsgBlockUserPosts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUserPosts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUserPosts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUserPosts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUserPosts.Merge(m, src)
}
func (m *MsgBlockUserPosts) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUserPosts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUserPosts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUserPosts proto.InternalMessageInfo

// MsgBlockUserPostsResponse defines the Msg/MsgBlockUserPosts response type
type MsgBlockUserPostsResponse struct {
}

func (m *MsgBlockUserPostsResponse) Reset()         { *m = MsgBlockUserPostsResponse{} }
func (m *MsgBlockUserPostsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBlockUserPostsResponse) ProtoMessage()    {}
func (*MsgBlockUserPostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba19b97e9f94db77, []int{9}
}
func (m *MsgBlockUserPostsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockUserPostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockUserPostsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockUserPostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockUserPostsResponse.Merge(m, src)
}
func (m *MsgBlockUserPostsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockUserPostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockUserPostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockUserPostsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateSubspace)(nil), "desmos.subspaces.v1beta1.MsgCreateSubspace")
	proto.RegisterType((*MsgCreateSubspaceResponse)(nil), "desmos.subspaces.v1beta1.MsgCreateSubspaceResponse")
	proto.RegisterType((*MsgAddAdmin)(nil), "desmos.subspaces.v1beta1.MsgAddAdmin")
	proto.RegisterType((*MsgAddAdminResponse)(nil), "desmos.subspaces.v1beta1.MsgAddAdminResponse")
	proto.RegisterType((*MsgRemoveAdmin)(nil), "desmos.subspaces.v1beta1.MsgRemoveAdmin")
	proto.RegisterType((*MsgRemoveAdminResponse)(nil), "desmos.subspaces.v1beta1.MsgRemoveAdminResponse")
	proto.RegisterType((*MsgAllowUserPosts)(nil), "desmos.subspaces.v1beta1.MsgAllowUserPosts")
	proto.RegisterType((*MsgAllowUserPostsResponse)(nil), "desmos.subspaces.v1beta1.MsgAllowUserPostsResponse")
	proto.RegisterType((*MsgBlockUserPosts)(nil), "desmos.subspaces.v1beta1.MsgBlockUserPosts")
	proto.RegisterType((*MsgBlockUserPostsResponse)(nil), "desmos.subspaces.v1beta1.MsgBlockUserPostsResponse")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v1beta1/msgs.proto", fileDescriptor_ba19b97e9f94db77)
}

var fileDescriptor_ba19b97e9f94db77 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x95, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xe3, 0xa4, 0x40, 0x7b, 0x41, 0x21, 0x5c, 0x0b, 0x0a, 0x41, 0xb2, 0x91, 0xab, 0xa2,
	0x4a, 0x50, 0x9b, 0x50, 0x21, 0xa4, 0x6e, 0x09, 0x12, 0x12, 0x43, 0x24, 0x30, 0x62, 0x61, 0xa9,
	0x9c, 0xdc, 0xe9, 0x6a, 0x61, 0xfb, 0x82, 0x9f, 0xd3, 0xd0, 0x95, 0x89, 0x91, 0x8f, 0xd0, 0xcf,
	0xc0, 0xc4, 0x84, 0x18, 0x19, 0x3b, 0x32, 0x59, 0x28, 0x59, 0x10, 0xa3, 0x3f, 0x01, 0x72, 0xce,
	0xb6, 0x6c, 0xa7, 0xb8, 0x0d, 0xb0, 0x74, 0x73, 0xee, 0xfd, 0xdf, 0xfb, 0xbf, 0x9f, 0xf5, 0xbf,
	0x18, 0x6d, 0x12, 0x0a, 0x0e, 0x07, 0x1d, 0xc6, 0x03, 0x18, 0x99, 0x43, 0x0a, 0xfa, 0x61, 0x67,
	0x40, 0x7d, 0xb3, 0xa3, 0x3b, 0xc0, 0x40, 0x1b, 0x79, 0xdc, 0xe7, 0xb8, 0x25, 0x44, 0x5a, 0x2a,
	0xd2, 0x62, 0x51, 0x7b, 0x83, 0x71, 0xc6, 0xe7, 0x22, 0x3d, 0x7a, 0x12, 0x7a, 0xf5, 0xbd, 0x84,
	0xae, 0xf7, 0x81, 0x3d, 0xf1, 0xa8, 0xe9, 0xd3, 0x97, 0x71, 0x13, 0x7e, 0x84, 0xaa, 0x16, 0x69,
	0x49, 0x77, 0xa4, 0xed, 0xb5, 0xde, 0xd6, 0xaf, 0x40, 0xa9, 0x27, 0xe3, 0xf6, 0x2d, 0x12, 0x06,
	0x0a, 0x3e, 0x32, 0x1d, 0x7b, 0x4f, 0xcd, 0x1c, 0xaa, 0x46, 0xd5, 0x22, 0xf8, 0x3e, 0xba, 0x32,
	0x8c, 0x06, 0x71, 0xaf, 0x55, 0x9d, 0xf7, 0xe2, 0x30, 0x50, 0x1a, 0x42, 0x1c, 0x17, 0x54, 0x23,
	0x91, 0xec, 0xad, 0x7e, 0x38, 0x56, 0x2a, 0x3f, 0x8f, 0x95, 0x8a, 0x7a, 0x1b, 0xdd, 0x5a, 0xd8,
	0xc1, 0xa0, 0x30, 0xe2, 0x2e, 0x50, 0xf5, 0xab, 0x84, 0xea, 0x7d, 0x60, 0x5d, 0x42, 0xba, 0xc4,
	0xb1, 0x5c, 0xfc, 0x14, 0x65, 0xb7, 0x59, 0x6e, 0x49, 0x94, 0xfc, 0x7a, 0x46, 0x70, 0x07, 0xad,
	0xb9, 0x74, 0xb2, 0x6f, 0x46, 0x43, 0xe3, 0x75, 0x37, 0xc2, 0x40, 0x69, 0x8a, 0xb6, 0xb4, 0xa4,
	0x1a, 0xab, 0x2e, 0x9d, 0x08, 0xeb, 0x0c, 0x5f, 0x6d, 0x19, 0xbe, 0x1b, 0x68, 0x3d, 0x43, 0x90,
	0x92, 0x7d, 0x96, 0x50, 0xa3, 0x0f, 0xcc, 0xa0, 0x0e, 0x3f, 0xa4, 0xff, 0x17, 0xee, 0x2e, 0xba,
	0x94, 0x05, 0x6b, 0x86, 0x81, 0x72, 0x55, 0xb4, 0xc4, 0x50, 0xa2, 0xfc, 0xd7, 0x44, 0x2d, 0x74,
	0x33, 0xbf, 0x79, 0x0a, 0xf5, 0x49, 0x04, 0xaa, 0x6b, 0xdb, 0x7c, 0xf2, 0x0a, 0xa8, 0xf7, 0x9c,
	0x83, 0x0f, 0x78, 0x13, 0xad, 0x8c, 0x81, 0x7a, 0x31, 0xd0, 0xb5, 0x30, 0x50, 0xea, 0xc2, 0x24,
	0x3a, 0x55, 0x8d, 0x79, 0xb1, 0x08, 0x5f, 0xfd, 0x67, 0xf8, 0x5a, 0x29, 0xfc, 0x42, 0x00, 0xf3,
	0x3b, 0x17, 0x89, 0x7a, 0x36, 0x1f, 0xbe, 0xb9, 0x60, 0x44, 0xf9, 0x9d, 0x13, 0xa2, 0x87, 0x5f,
	0x56, 0x50, 0xad, 0x0f, 0x0c, 0x7b, 0xa8, 0x51, 0xb8, 0xf8, 0xf7, 0xb4, 0x3f, 0xfd, 0x7f, 0x68,
	0x0b, 0x37, 0xb4, 0xbd, 0xbb, 0x84, 0x38, 0xf1, 0xc6, 0x07, 0xa8, 0xd9, 0x25, 0x24, 0x39, 0x16,
	0xa9, 0xdf, 0x2a, 0x1d, 0x94, 0xdc, 0x9b, 0xf6, 0xce, 0xb9, 0x64, 0xa9, 0xd3, 0x5b, 0xb4, 0x2e,
	0x02, 0x9a, 0x37, 0xdb, 0x2e, 0x9d, 0x92, 0x89, 0x74, 0xfb, 0xc1, 0x79, 0x95, 0xa9, 0xa5, 0x87,
	0x1a, 0x85, 0xe0, 0x97, 0xbf, 0xd0, 0xbc, 0xf8, 0x8c, 0x17, 0x7a, 0x7a, 0x3c, 0x23, 0xcf, 0x42,
	0x34, 0xcb, 0x3d, 0xf3, 0xe2, 0x33, 0x3c, 0x4f, 0x0f, 0x50, 0xef, 0xc5, 0xb7, 0xa9, 0x2c, 0x9d,
	0x4c, 0x65, 0xe9, 0xc7, 0x54, 0x96, 0x3e, 0xce, 0xe4, 0xca, 0xc9, 0x4c, 0xae, 0x7c, 0x9f, 0xc9,
	0x95, 0xd7, 0x8f, 0x99, 0xe5, 0x1f, 0x8c, 0x07, 0xda, 0x90, 0x3b, 0xba, 0x18, 0xbc, 0x63, 0x9b,
	0x03, 0x88, 0x9f, 0xf5, 0x77, 0x3a, 0xf8, 0x26, 0xb3, 0x5c, 0x96, 0xf9, 0x8a, 0xf9, 0x47, 0x23,
	0x0a, 0x83, 0xcb, 0xf3, 0xef, 0xd1, 0xee, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xb8, 0x2b,
	0x3c, 0xe6, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateSubspace defines the method to create a subspace
	CreateSubspace(ctx context.Context, in *MsgCreateSubspace, opts ...grpc.CallOption) (*MsgCreateSubspaceResponse, error)
	// AddSubspaceAdmin defines the method to add a new admin to the subspace
	AddSubspaceAdmin(ctx context.Context, in *MsgAddAdmin, opts ...grpc.CallOption) (*MsgAddAdminResponse, error)
	// RemoveSubspaceAdmin defines the method to remove an admin from a specific subspace
	RemoveSubspaceAdmin(ctx context.Context, in *MsgRemoveAdmin, opts ...grpc.CallOption) (*MsgRemoveAdminResponse, error)
	// AllowUserPosts defines the method to let user posts inside a specific subspace
	AllowUserPosts(ctx context.Context, in *MsgAllowUserPosts, opts ...grpc.CallOption) (*MsgAllowUserPostsResponse, error)
	// BlockUserPosts defines the method to block user posts inside a specific subspace
	BlockUserPosts(ctx context.Context, in *MsgBlockUserPosts, opts ...grpc.CallOption) (*MsgBlockUserPostsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateSubspace(ctx context.Context, in *MsgCreateSubspace, opts ...grpc.CallOption) (*MsgCreateSubspaceResponse, error) {
	out := new(MsgCreateSubspaceResponse)
	err := c.cc.Invoke(ctx, "/desmos.subspaces.v1beta1.Msg/CreateSubspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddSubspaceAdmin(ctx context.Context, in *MsgAddAdmin, opts ...grpc.CallOption) (*MsgAddAdminResponse, error) {
	out := new(MsgAddAdminResponse)
	err := c.cc.Invoke(ctx, "/desmos.subspaces.v1beta1.Msg/AddSubspaceAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveSubspaceAdmin(ctx context.Context, in *MsgRemoveAdmin, opts ...grpc.CallOption) (*MsgRemoveAdminResponse, error) {
	out := new(MsgRemoveAdminResponse)
	err := c.cc.Invoke(ctx, "/desmos.subspaces.v1beta1.Msg/RemoveSubspaceAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllowUserPosts(ctx context.Context, in *MsgAllowUserPosts, opts ...grpc.CallOption) (*MsgAllowUserPostsResponse, error) {
	out := new(MsgAllowUserPostsResponse)
	err := c.cc.Invoke(ctx, "/desmos.subspaces.v1beta1.Msg/AllowUserPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockUserPosts(ctx context.Context, in *MsgBlockUserPosts, opts ...grpc.CallOption) (*MsgBlockUserPostsResponse, error) {
	out := new(MsgBlockUserPostsResponse)
	err := c.cc.Invoke(ctx, "/desmos.subspaces.v1beta1.Msg/BlockUserPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateSubspace defines the method to create a subspace
	CreateSubspace(context.Context, *MsgCreateSubspace) (*MsgCreateSubspaceResponse, error)
	// AddSubspaceAdmin defines the method to add a new admin to the subspace
	AddSubspaceAdmin(context.Context, *MsgAddAdmin) (*MsgAddAdminResponse, error)
	// RemoveSubspaceAdmin defines the method to remove an admin from a specific subspace
	RemoveSubspaceAdmin(context.Context, *MsgRemoveAdmin) (*MsgRemoveAdminResponse, error)
	// AllowUserPosts defines the method to let user posts inside a specific subspace
	AllowUserPosts(context.Context, *MsgAllowUserPosts) (*MsgAllowUserPostsResponse, error)
	// BlockUserPosts defines the method to block user posts inside a specific subspace
	BlockUserPosts(context.Context, *MsgBlockUserPosts) (*MsgBlockUserPostsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateSubspace(ctx context.Context, req *MsgCreateSubspace) (*MsgCreateSubspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubspace not implemented")
}
func (*UnimplementedMsgServer) AddSubspaceAdmin(ctx context.Context, req *MsgAddAdmin) (*MsgAddAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubspaceAdmin not implemented")
}
func (*UnimplementedMsgServer) RemoveSubspaceAdmin(ctx context.Context, req *MsgRemoveAdmin) (*MsgRemoveAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubspaceAdmin not implemented")
}
func (*UnimplementedMsgServer) AllowUserPosts(ctx context.Context, req *MsgAllowUserPosts) (*MsgAllowUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowUserPosts not implemented")
}
func (*UnimplementedMsgServer) BlockUserPosts(ctx context.Context, req *MsgBlockUserPosts) (*MsgBlockUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserPosts not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateSubspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.subspaces.v1beta1.Msg/CreateSubspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubspace(ctx, req.(*MsgCreateSubspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddSubspaceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddSubspaceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.subspaces.v1beta1.Msg/AddSubspaceAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddSubspaceAdmin(ctx, req.(*MsgAddAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveSubspaceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveSubspaceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.subspaces.v1beta1.Msg/RemoveSubspaceAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveSubspaceAdmin(ctx, req.(*MsgRemoveAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllowUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllowUserPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllowUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.subspaces.v1beta1.Msg/AllowUserPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllowUserPosts(ctx, req.(*MsgAllowUserPosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockUserPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desmos.subspaces.v1beta1.Msg/BlockUserPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockUserPosts(ctx, req.(*MsgBlockUserPosts))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desmos.subspaces.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubspace",
			Handler:    _Msg_CreateSubspace_Handler,
		},
		{
			MethodName: "AddSubspaceAdmin",
			Handler:    _Msg_AddSubspaceAdmin_Handler,
		},
		{
			MethodName: "RemoveSubspaceAdmin",
			Handler:    _Msg_RemoveSubspaceAdmin_Handler,
		},
		{
			MethodName: "AllowUserPosts",
			Handler:    _Msg_AllowUserPosts_Handler,
		},
		{
			MethodName: "BlockUserPosts",
			Handler:    _Msg_BlockUserPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desmos/subspaces/v1beta1/msgs.proto",
}

func (m *MsgCreateSubspace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubspaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubspaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubspaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewAdmin) > 0 {
		i -= len(m.NewAdmin)
		copy(dAtA[i:], m.NewAdmin)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.NewAdmin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubspaceId) > 0 {
		i -= len(m.SubspaceId)
		copy(dAtA[i:], m.SubspaceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.SubspaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubspaceId) > 0 {
		i -= len(m.SubspaceId)
		copy(dAtA[i:], m.SubspaceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.SubspaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAllowUserPosts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllowUserPosts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllowUserPosts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubspaceId) > 0 {
		i -= len(m.SubspaceId)
		copy(dAtA[i:], m.SubspaceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.SubspaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAllowUserPostsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllowUserPostsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllowUserPostsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBlockUserPosts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUserPosts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUserPosts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubspaceId) > 0 {
		i -= len(m.SubspaceId)
		copy(dAtA[i:], m.SubspaceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.SubspaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBlockUserPostsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockUserPostsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockUserPostsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateSubspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCreateSubspaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubspaceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.NewAdmin)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgAddAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubspaceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgRemoveAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAllowUserPosts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.SubspaceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgAllowUserPostsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBlockUserPosts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.SubspaceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgBlockUserPostsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateSubspace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubspace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubspace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubspaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubspaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubspaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubspaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubspaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllowUserPosts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllowUserPosts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllowUserPosts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubspaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllowUserPostsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllowUserPostsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllowUserPostsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUserPosts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUserPosts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUserPosts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubspaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockUserPostsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockUserPostsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockUserPostsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
