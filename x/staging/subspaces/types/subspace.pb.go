// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v1beta1/subspace.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Subspace contains all the data of a Desmos subspace
type Subspace struct {
	ID           string    `protobuf:"bytes,1,opt,name=id,proto3" json:"subspace_id" yaml:"subspace_id"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Creator      string    `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	CreationTime time.Time `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
}

func (m *Subspace) Reset()         { *m = Subspace{} }
func (m *Subspace) String() string { return proto.CompactTextString(m) }
func (*Subspace) ProtoMessage()    {}
func (*Subspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_e657cf67bd23372d, []int{0}
}
func (m *Subspace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subspace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subspace.Merge(m, src)
}
func (m *Subspace) XXX_Size() int {
	return m.Size()
}
func (m *Subspace) XXX_DiscardUnknown() {
	xxx_messageInfo_Subspace.DiscardUnknown(m)
}

var xxx_messageInfo_Subspace proto.InternalMessageInfo

func (m *Subspace) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Subspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subspace) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Subspace) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Subspace)(nil), "desmos.subspaces.v1beta1.Subspace")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v1beta1/subspace.proto", fileDescriptor_e657cf67bd23372d)
}

var fileDescriptor_e657cf67bd23372d = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x3f, 0x4f, 0xe3, 0x30,
	0x18, 0xc6, 0xe3, 0x5c, 0x75, 0xd7, 0x4b, 0xef, 0x40, 0x8a, 0x3a, 0x44, 0x1d, 0xe2, 0x2a, 0x0c,
	0x54, 0x02, 0x62, 0x15, 0x06, 0xa4, 0xb2, 0x55, 0x2c, 0x8c, 0x04, 0x26, 0x96, 0xca, 0x69, 0x4c,
	0xb0, 0xd4, 0xd4, 0x51, 0xec, 0x22, 0xfa, 0x2d, 0x3a, 0x76, 0xec, 0xc7, 0xe9, 0xd8, 0x91, 0xc9,
	0xa0, 0x74, 0x41, 0x1d, 0xf3, 0x09, 0x50, 0xec, 0xa4, 0x2a, 0xdb, 0xe3, 0xc7, 0xbf, 0xf7, 0xcf,
	0xa3, 0xd7, 0x3a, 0x8d, 0x08, 0x4f, 0x18, 0x47, 0x7c, 0x16, 0xf2, 0x14, 0x8f, 0x09, 0x47, 0xaf,
	0xfd, 0x90, 0x08, 0xdc, 0xdf, 0x3b, 0x7e, 0x9a, 0x31, 0xc1, 0x6c, 0x47, 0x83, 0xfe, 0x1e, 0xf4,
	0x2b, 0xb0, 0xd3, 0x8e, 0x59, 0xcc, 0x14, 0x84, 0x4a, 0xa5, 0xf9, 0x0e, 0x8c, 0x19, 0x8b, 0x27,
	0x04, 0xa9, 0x57, 0x38, 0x7b, 0x46, 0x82, 0x26, 0x84, 0x0b, 0x9c, 0xa4, 0x1a, 0xf0, 0x96, 0xa6,
	0xd5, 0x7c, 0xa8, 0x9a, 0xd9, 0x37, 0x96, 0x49, 0x23, 0x07, 0x74, 0x41, 0xef, 0xef, 0xf0, 0x2c,
	0x97, 0xd0, 0xbc, 0xbb, 0xdd, 0x49, 0xd8, 0xaa, 0x87, 0x8d, 0x68, 0x54, 0x48, 0x68, 0xcf, 0x71,
	0x32, 0x19, 0x78, 0x07, 0xa6, 0x17, 0x98, 0x34, 0xb2, 0x4f, 0xac, 0xc6, 0x14, 0x27, 0xc4, 0x31,
	0x55, 0xf9, 0x71, 0x21, 0x61, 0x4b, 0x93, 0xa5, 0xeb, 0x05, 0xea, 0xd3, 0x3e, 0xb7, 0xfe, 0x8c,
	0x33, 0x82, 0x05, 0xcb, 0x9c, 0x5f, 0x8a, 0xb3, 0x0b, 0x09, 0x8f, 0x34, 0x57, 0x7d, 0x78, 0x41,
	0x8d, 0xd8, 0x99, 0xf5, 0x5f, 0x49, 0xca, 0xa6, 0xa3, 0x72, 0x71, 0xa7, 0xd1, 0x05, 0xbd, 0xd6,
	0x65, 0xc7, 0xd7, 0xa9, 0xfc, 0x3a, 0x95, 0xff, 0x58, 0xa7, 0x1a, 0xf6, 0xd7, 0x12, 0x1a, 0x3b,
	0x09, 0x7f, 0x16, 0x16, 0x12, 0xb6, 0x0f, 0x86, 0xd4, 0xb6, 0xb7, 0xf8, 0x80, 0x20, 0xf8, 0x57,
	0x7b, 0x65, 0x97, 0x41, 0x73, 0xb9, 0x82, 0xe0, 0x6b, 0x05, 0xc1, 0xf0, 0x7e, 0x9d, 0xbb, 0x60,
	0x93, 0xbb, 0xe0, 0x33, 0x77, 0xc1, 0x62, 0xeb, 0x1a, 0x9b, 0xad, 0x6b, 0xbc, 0x6f, 0x5d, 0xe3,
	0xe9, 0x3a, 0xa6, 0xe2, 0x65, 0x16, 0xfa, 0x63, 0x96, 0x20, 0x7d, 0x90, 0x8b, 0x09, 0x0e, 0x79,
	0xa5, 0xd1, 0x1b, 0xe2, 0x02, 0xc7, 0x74, 0x1a, 0x1f, 0xdc, 0x53, 0xcc, 0x53, 0xc2, 0xc3, 0xdf,
	0x6a, 0xe3, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x0d, 0x49, 0xaa, 0xf0, 0x01, 0x00,
	0x00,
}

func (this *Subspace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subspace)
	if !ok {
		that2, ok := that.(Subspace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	return true
}
func (m *Subspace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSubspace(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubspace(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubspace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Subspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovSubspace(uint64(l))
	return n
}

func sovSubspace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubspace(x uint64) (n int) {
	return sovSubspace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subspace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubspace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subspace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subspace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubspace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubspace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubspace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubspace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubspace
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubspace
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubspace
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubspace        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubspace          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubspace = fmt.Errorf("proto: unexpected end of group")
)
