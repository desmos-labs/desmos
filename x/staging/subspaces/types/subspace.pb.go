// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v1beta1/subspace.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SubspaceType contains all the possible subspace types
type SubspaceType int32

const (
	// SUBSPACE_TYPE_UNSPECIFIED identifies an unspecified type of subspace (used in errors)
	Unspecified SubspaceType = 0
	// SUBSPACE_TYPE_OPEN identifies that users can interact inside the subspace without the need to being registered in it
	Open SubspaceType = 1
	// SUBSPACE_TYPE_CLOSE identifies that users can't interact inside the subspace without being registered in it
	Close SubspaceType = 2
)

var SubspaceType_name = map[int32]string{
	0: "SUBSPACE_TYPE_UNSPECIFIED",
	1: "SUBSPACE_TYPE_OPEN",
	2: "SUBSPACE_TYPE_CLOSE",
}

var SubspaceType_value = map[string]int32{
	"SUBSPACE_TYPE_UNSPECIFIED": 0,
	"SUBSPACE_TYPE_OPEN":        1,
	"SUBSPACE_TYPE_CLOSE":       2,
}

func (x SubspaceType) String() string {
	return proto.EnumName(SubspaceType_name, int32(x))
}

func (SubspaceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e657cf67bd23372d, []int{0}
}

// Subspace contains all the data of a Desmos subspace
type Subspace struct {
	// unique SHA-256 string that identifies the subspace
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"subspace_id" yaml:"subspace_id"`
	// human readable name of the subspace
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// the address of the user that owns the subspace
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// the address of the subspace creator
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	// the creation time of the subspace
	CreationTime time.Time `protobuf:"bytes,5,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
	// the type of the subspace that indicates if it need registration or not
	Type SubspaceType `protobuf:"varint,6,opt,name=type,proto3,enum=desmos.subspaces.v1beta1.SubspaceType" json:"type" yaml:"type"`
	// a list of all the subspace admins
	Admins []string `protobuf:"bytes,7,rep,name=admins,proto3" json:"admins,omitempty" yaml:"admins"`
	// a list of all the subspace banned users
	BannedUsers []string `protobuf:"bytes,8,rep,name=banned_users,json=bannedUsers,proto3" json:"banned_users,omitempty" yaml:"banned_users"`
	// a list of all the subspace registered users
	RegisteredUsers []string `protobuf:"bytes,9,rep,name=registered_users,json=registeredUsers,proto3" json:"registered_users,omitempty" yaml:"registered_users"`
}

func (m *Subspace) Reset()         { *m = Subspace{} }
func (m *Subspace) String() string { return proto.CompactTextString(m) }
func (*Subspace) ProtoMessage()    {}
func (*Subspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_e657cf67bd23372d, []int{0}
}
func (m *Subspace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subspace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subspace.Merge(m, src)
}
func (m *Subspace) XXX_Size() int {
	return m.Size()
}
func (m *Subspace) XXX_DiscardUnknown() {
	xxx_messageInfo_Subspace.DiscardUnknown(m)
}

var xxx_messageInfo_Subspace proto.InternalMessageInfo

func (m *Subspace) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Subspace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subspace) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Subspace) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Subspace) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *Subspace) GetType() SubspaceType {
	if m != nil {
		return m.Type
	}
	return Unspecified
}

func (m *Subspace) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Subspace) GetBannedUsers() []string {
	if m != nil {
		return m.BannedUsers
	}
	return nil
}

func (m *Subspace) GetRegisteredUsers() []string {
	if m != nil {
		return m.RegisteredUsers
	}
	return nil
}

func init() {
	proto.RegisterEnum("desmos.subspaces.v1beta1.SubspaceType", SubspaceType_name, SubspaceType_value)
	proto.RegisterType((*Subspace)(nil), "desmos.subspaces.v1beta1.Subspace")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v1beta1/subspace.proto", fileDescriptor_e657cf67bd23372d)
}

var fileDescriptor_e657cf67bd23372d = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0xe3, 0x10, 0x20, 0x99, 0x04, 0xc8, 0x37, 0x20, 0xe1, 0xcf, 0x95, 0x3c, 0x96, 0x2b,
	0xd1, 0xf4, 0x9f, 0x2d, 0xe8, 0xa2, 0x12, 0x5d, 0x35, 0x21, 0x48, 0x48, 0x15, 0xa4, 0x36, 0x59,
	0xb4, 0x9b, 0xc8, 0x8e, 0x07, 0xd7, 0x52, 0xec, 0xb1, 0x3c, 0x4e, 0x5b, 0xde, 0xa0, 0xca, 0x8a,
	0x65, 0x37, 0x48, 0x48, 0x7d, 0x95, 0x2e, 0x58, 0xb2, 0xec, 0x6a, 0x5a, 0x85, 0x4d, 0xc5, 0xd2,
	0x4f, 0x50, 0x79, 0x26, 0x86, 0x50, 0xa9, 0xbb, 0xb9, 0xe7, 0xfe, 0xce, 0x1d, 0x9d, 0xb9, 0x36,
	0x78, 0xe4, 0x61, 0x1a, 0x12, 0x6a, 0xd2, 0xb1, 0x4b, 0x63, 0x67, 0x88, 0xa9, 0xf9, 0x71, 0xdb,
	0xc5, 0xa9, 0xb3, 0x7d, 0xab, 0x18, 0x71, 0x42, 0x52, 0x02, 0x65, 0x01, 0x1a, 0xb7, 0xa0, 0x31,
	0x03, 0x95, 0x0d, 0x9f, 0xf8, 0x84, 0x43, 0x66, 0x7e, 0x12, 0xbc, 0x82, 0x7c, 0x42, 0xfc, 0x11,
	0x36, 0x79, 0xe5, 0x8e, 0x4f, 0xcc, 0x34, 0x08, 0x31, 0x4d, 0x9d, 0x30, 0x16, 0x80, 0xfe, 0xbd,
	0x02, 0xaa, 0xf6, 0x6c, 0x18, 0x7c, 0x05, 0xca, 0x81, 0x27, 0x4b, 0x9a, 0xd4, 0xaa, 0xb5, 0x9f,
	0x4e, 0x19, 0x2a, 0x1f, 0xec, 0xdd, 0x30, 0x54, 0x2f, 0x2e, 0x1b, 0x04, 0x5e, 0xc6, 0x10, 0x3c,
	0x75, 0xc2, 0xd1, 0xae, 0x3e, 0x27, 0xea, 0x56, 0x39, 0xf0, 0xe0, 0x43, 0x50, 0x89, 0x9c, 0x10,
	0xcb, 0x65, 0x6e, 0x5f, 0xcb, 0x18, 0xaa, 0x0b, 0x32, 0x57, 0x75, 0x8b, 0x37, 0xe1, 0x16, 0x58,
	0x24, 0x9f, 0x22, 0x9c, 0xc8, 0x0b, 0x9c, 0x6a, 0x66, 0x0c, 0x35, 0x04, 0xc5, 0x65, 0xdd, 0x12,
	0x6d, 0xf8, 0x0c, 0x2c, 0x0f, 0x13, 0xec, 0xa4, 0x24, 0x91, 0x2b, 0x9c, 0x84, 0x19, 0x43, 0xab,
	0x82, 0x9c, 0x35, 0x74, 0xab, 0x40, 0x60, 0x02, 0x56, 0xf8, 0x31, 0x20, 0xd1, 0x20, 0x0f, 0x28,
	0x2f, 0x6a, 0x52, 0xab, 0xbe, 0xa3, 0x18, 0x22, 0xbd, 0x51, 0xa4, 0x37, 0x8e, 0x8b, 0xf4, 0xed,
	0xed, 0x4b, 0x86, 0x4a, 0x37, 0x0c, 0xdd, 0x37, 0x66, 0x0c, 0x6d, 0xcc, 0x5d, 0x52, 0xc8, 0xfa,
	0xd9, 0x4f, 0x24, 0x59, 0x8d, 0x42, 0xcb, 0xa7, 0x40, 0x1b, 0x54, 0xd2, 0xd3, 0x18, 0xcb, 0x4b,
	0x9a, 0xd4, 0x5a, 0xdd, 0xd9, 0x32, 0xfe, 0xb5, 0x18, 0xa3, 0x78, 0xdd, 0xe3, 0xd3, 0x18, 0xb7,
	0x37, 0x6f, 0x18, 0xe2, 0xbe, 0xbb, 0xe7, 0xc9, 0x2b, 0xdd, 0xe2, 0x22, 0x7c, 0x0c, 0x96, 0x1c,
	0x2f, 0x0c, 0x22, 0x2a, 0x2f, 0x6b, 0x0b, 0xad, 0x5a, 0xfb, 0xbf, 0x8c, 0xa1, 0x15, 0x81, 0x09,
	0x5d, 0xb7, 0x66, 0x00, 0xdc, 0x05, 0x0d, 0xd7, 0x89, 0x22, 0xec, 0x0d, 0xc6, 0x14, 0x27, 0x54,
	0xae, 0x72, 0xc3, 0x66, 0xc6, 0xd0, 0xba, 0x30, 0xcc, 0x77, 0x75, 0xab, 0x2e, 0xca, 0x7e, 0x5e,
	0xc1, 0x7d, 0xd0, 0x4c, 0xb0, 0x1f, 0xd0, 0x14, 0x27, 0xb7, 0xfe, 0x1a, 0xf7, 0x3f, 0xc8, 0x18,
	0xda, 0x14, 0xfe, 0xbf, 0x09, 0xdd, 0x5a, 0xbb, 0x93, 0xf8, 0x9c, 0xdd, 0xea, 0xd7, 0x0b, 0x24,
	0xfd, 0xbe, 0x40, 0xd2, 0x93, 0x89, 0x04, 0x1a, 0xf3, 0x41, 0xa1, 0x01, 0xfe, 0xb7, 0xfb, 0x6d,
	0xbb, 0xf7, 0xba, 0xd3, 0x1d, 0x1c, 0xbf, 0xeb, 0x75, 0x07, 0xfd, 0x43, 0xbb, 0xd7, 0xed, 0x1c,
	0xec, 0x1f, 0x74, 0xf7, 0x9a, 0x25, 0x65, 0x6d, 0x72, 0xae, 0xd5, 0xfb, 0x11, 0x8d, 0xf1, 0x30,
	0x38, 0x09, 0xb0, 0x07, 0x35, 0x00, 0xef, 0xf3, 0x47, 0xbd, 0xee, 0x61, 0x53, 0x52, 0xaa, 0x93,
	0x73, 0xad, 0x72, 0x14, 0xe3, 0x08, 0xea, 0x60, 0xfd, 0x3e, 0xd1, 0x79, 0x73, 0x64, 0x77, 0x9b,
	0x65, 0xa5, 0x36, 0x39, 0xd7, 0x16, 0x3b, 0x23, 0x42, 0xb1, 0x52, 0xf9, 0xf2, 0x4d, 0x2d, 0xb5,
	0xdf, 0x5e, 0x4e, 0x55, 0xe9, 0x6a, 0xaa, 0x4a, 0xbf, 0xa6, 0xaa, 0x74, 0x76, 0xad, 0x96, 0xae,
	0xae, 0xd5, 0xd2, 0x8f, 0x6b, 0xb5, 0xf4, 0xfe, 0xa5, 0x1f, 0xa4, 0x1f, 0xc6, 0xae, 0x31, 0x24,
	0xa1, 0x29, 0x16, 0xf6, 0x7c, 0xe4, 0xb8, 0x74, 0x76, 0x36, 0x3f, 0x9b, 0x34, 0x75, 0xfc, 0x20,
	0xf2, 0xe7, 0x7e, 0xc4, 0x7c, 0x2f, 0xd4, 0x5d, 0xe2, 0x9f, 0xd0, 0x8b, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0x04, 0x00, 0x82, 0xa9, 0x03, 0x00, 0x00,
}

func (this *Subspace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subspace)
	if !ok {
		that2, ok := that.(Subspace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Admins) != len(that1.Admins) {
		return false
	}
	for i := range this.Admins {
		if this.Admins[i] != that1.Admins[i] {
			return false
		}
	}
	if len(this.BannedUsers) != len(that1.BannedUsers) {
		return false
	}
	for i := range this.BannedUsers {
		if this.BannedUsers[i] != that1.BannedUsers[i] {
			return false
		}
	}
	if len(this.RegisteredUsers) != len(that1.RegisteredUsers) {
		return false
	}
	for i := range this.RegisteredUsers {
		if this.RegisteredUsers[i] != that1.RegisteredUsers[i] {
			return false
		}
	}
	return true
}
func (m *Subspace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegisteredUsers) > 0 {
		for iNdEx := len(m.RegisteredUsers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegisteredUsers[iNdEx])
			copy(dAtA[i:], m.RegisteredUsers[iNdEx])
			i = encodeVarintSubspace(dAtA, i, uint64(len(m.RegisteredUsers[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BannedUsers) > 0 {
		for iNdEx := len(m.BannedUsers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BannedUsers[iNdEx])
			copy(dAtA[i:], m.BannedUsers[iNdEx])
			i = encodeVarintSubspace(dAtA, i, uint64(len(m.BannedUsers[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintSubspace(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Type != 0 {
		i = encodeVarintSubspace(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSubspace(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSubspace(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubspace(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubspace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Subspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSubspace(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovSubspace(uint64(l))
	if m.Type != 0 {
		n += 1 + sovSubspace(uint64(m.Type))
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovSubspace(uint64(l))
		}
	}
	if len(m.BannedUsers) > 0 {
		for _, s := range m.BannedUsers {
			l = len(s)
			n += 1 + l + sovSubspace(uint64(l))
		}
	}
	if len(m.RegisteredUsers) > 0 {
		for _, s := range m.RegisteredUsers {
			l = len(s)
			n += 1 + l + sovSubspace(uint64(l))
		}
	}
	return n
}

func sovSubspace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubspace(x uint64) (n int) {
	return sovSubspace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subspace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubspace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subspace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subspace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubspaceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BannedUsers = append(m.BannedUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubspace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubspace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredUsers = append(m.RegisteredUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubspace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubspace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubspace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubspace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubspace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubspace
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubspace
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubspace
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubspace        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubspace          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubspace = fmt.Errorf("proto: unexpected end of group")
)
