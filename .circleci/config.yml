version: 2.1

executors:
  golang:
    docker:
      - image: circleci/golang:1.13
  docs:
    docker:
      - image: tendermintdev/docker-website-deployment
    environment:
      AWS_REGION: us-east-1

commands:
  make:
    parameters:
      description:
        type: string
      target:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: << parameters.description >>
          command: |
            make << parameters.target >>



jobs:
  setup-dependencies:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Cache go modules
          command: make go-mod-cache
      - run:
          name: Build
          command: make build
      - run:
          name: "Git garbage collection"
          command: git gc
      - run:
          name: "Build tools binaries"
          command: |
            make tools
      - save_cache:
          name: "Save go modules cache"
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          name: "Save source code cache"
          key: go-src-v1-{{ .Revision }}
          paths:
            - ".git"
      - run:
          command: |
            mkdir -p /tmp/bin
            cp -r /go/bin/* /tmp/bin
      - persist_to_workspace:
          root: "/tmp/bin"
          paths:
            - "."

  test-sim-nondeterminism:
    executor: golang
    steps:
      - make:
          target: test-sim-nondeterminism
          description: "Test Desmos non-determinism simulations"

  test-sim-import-export:
    executor: golang
    steps:
      - make:
          target: test-sim-import-export
          description: "Test Desmos import/export simulation"

  test-sim-after-import:
    executor: golang
    steps:
      - make:
          target: test-sim-after-import
          description: "Test Desmos simulation after importing state"

  test-sim-multi-seed-short:
    executor: golang
    steps:
      - make:
          target: test-sim-multi-seed-short
          description: "Test Desmos multi-seed simulation (short-lived)"

  test-sim-multi-seed-long:
    executor: golang
    steps:
      - make:
          target: test-sim-multi-seed-long
          description: "Test Desmos multi-seed simulation (long-lived)"

  integration-tests:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Test CLI integration
          command: |
            export BUILDDIR=`pwd`/build
            make test-build

  test:
    executor: golang
    steps:
      - make:
          target: test
          description: "Test all"

  test-cover:
    executor: golang
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Run tests with coverage
          command: |
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            mkdir -p /tmp/logs /tmp/workspace/profiles
            for pkg in $(go list ./... | grep -v '/simulation' | circleci tests split); do
              id=$(echo "$pkg" | sed 's|[/.]|_|g')
              go test -mod=readonly -timeout 8m -race -coverprofile=/tmp/workspace/profiles/$id.out -covermode=atomic -tags='ledger test_ledger_mock' "$pkg" | tee "/tmp/logs/$id-$RANDOM.log"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "profiles/*"
      - store_artifacts:
          path: /tmp/logs

  upload-coverage:
    executor: golang
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: gather
          command: |
            set -ex

            echo "--> Concatenating profiles:"
            ls /tmp/workspace/profiles/
            echo "mode: atomic" > coverage.txt
            for prof in $(ls /tmp/workspace/profiles/); do
              tail -n +2 /tmp/workspace/profiles/"$prof" >> coverage.txt
            done
      - run:
          name: filter out DONTCOVER
          command: |
            excludelist="$(find . -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
            for filename in ${excludelist}; do
              filename=$(echo $filename | sed 's/^./github.com\/cosmos\/gaia/g')
              echo "Excluding ${filename} from coverage report..."
              sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
            done
      - run:
          name: upload
          command: bash <(curl -s https://codecov.io/bash) -f coverage.txt

  localnet:
    working_directory: /home/circleci/.go_workspace/src/github.com/desmos-labs/desmos
    machine:
      image: circleci/classic:latest
    environment:
      GOPATH: /home/circleci/.go_workspace/
      GOOS: linux
      GOARCH: amd64
      GO_VERSION: "1.13"
    parallelism: 1
    steps:
      - checkout
      - run:
          name: Run a localnet and test liveness
          command: |
            pushd /tmp
            wget https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz
            sudo tar -xvf go$GO_VERSION.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo mv go /usr/local
            popd
            set -x
            make clean localnet-start
            ./contrib/localnet-blocks-test.sh 40 5 10 localhost

  docker-image:
    executor: golang
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          DESMOSD_VERSION=''
          if [ "${CIRCLE_BRANCH}" = "master" ]; then
            DESMOSD_VERSION="stable"
          elif [ "${CIRCLE_BRANCH}" = "develop" ]; then
            DESMOSD_VERSION="develop"
          elif [[ "${CIRCLE_BRANCH}" == release/v* ]]; then
            DESMOSD_VERSION="${CIRCLE_BRANCH}"
          fi
          if [ -z "${DESMOSD_VERSION}" ]; then
            docker build .
          else
            docker build -t desmos-labs/desmos:$DESMOSD_VERSION .
            docker login --password-stdin -u $DOCKER_USER \<<<DOCKER_PASSWORD
            docker push desmos-labs/desmos:$DESMOSD_VERSION
          fi

  docker-tagged:
    executor: golang
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          docker build -t desmos-labs/desmos:$CIRCLE_TAG .
          docker login --password-stdin -u $DOCKER_USER \<<DOCKER_PASSWORD
          docker push desmos-labs/desmos:$CIRCLE_TAG

workflows:
  version: 2
  test-suite:
    jobs:
      - docker-image:
          requires:
            - setup-dependencies
      - docker-tagged:
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore:
                - /.*/
          requires:
            - setup-dependencies
      - setup-dependencies:
          # filters here are needed to enable this job also for tags
          filters:
            tags:
              only:
                - /^v.*/
      - test-sim-nondeterminism:
          requires:
            - setup-dependencies
      - test-sim-import-export:
          requires:
            - setup-dependencies
      - test-sim-after-import:
          requires:
            - setup-dependencies
      - test-sim-multi-seed-short:
          requires:
            - setup-dependencies
      - test-sim-multi-seed-long:
          requires:
            - setup-dependencies
          # These filters ensure that the long sim only runs during release
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v.*/
      - test-cover:
          requires:
            - setup-dependencies
      - localnet
      - upload-coverage:
          requires:
            - test-cover