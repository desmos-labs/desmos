swagger: '2.0'
info:
  title: Desmos - REST and gRPC Gateway docs
  description: A REST interface for state queries
  version: 3.0.0
paths:
  /desmos/profiles/v3/app-links:
    get:
      summary: >-
        ApplicationLinks queries the applications links associated to the given

        user, if provided. Otherwise, it queries all the application links
        stored.
      operationId: ApplicationLinks
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              links:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                      title: User to which the link is associated
                    data:
                      title: Data contains the details of this specific link
                      type: object
                      properties:
                        application:
                          type: string
                          title: 'The application name (eg. Twitter, GitHub, etc)'
                        username:
                          type: string
                          title: >-
                            Username on the application (eg. Twitter tag, GitHub
                            profile, etc)
                    state:
                      title: State of the link
                      type: string
                      enum:
                        - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
                        - APPLICATION_LINK_STATE_VERIFICATION_STARTED
                        - APPLICATION_LINK_STATE_VERIFICATION_ERROR
                        - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS
                        - APPLICATION_LINK_STATE_TIMED_OUT
                      default: APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
                      description: >-
                        - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED: A link
                        has just been initialized
                         - APPLICATION_LINK_STATE_VERIFICATION_STARTED: A link has just started being verified
                         - APPLICATION_LINK_STATE_VERIFICATION_ERROR: A link has errored during the verification process
                         - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS: A link has being verified successfully
                         - APPLICATION_LINK_STATE_TIMED_OUT: A link has timed out while waiting for the verification
                    oracle_request:
                      title: >-
                        OracleRequest represents the request that has been made
                        to the oracle
                      type: object
                      properties:
                        id:
                          type: string
                          format: uint64
                          title: ID is the ID of the request
                        oracle_script_id:
                          type: string
                          format: uint64
                          title: OracleScriptID is ID of an oracle script
                        call_data:
                          title: >-
                            CallData contains the data used to perform the
                            oracle request
                          type: object
                          properties:
                            application:
                              type: string
                              title: >-
                                The application for which the ownership should
                                be verified
                            call_data:
                              type: string
                              title: >-
                                The hex encoded call data that should be used to
                                verify the application

                                account ownership
                        client_id:
                          type: string
                          title: >-
                            ClientID represents the ID of the client that has
                            called the oracle script
                    result:
                      title: |-
                        Data coming from the result of the verification.
                        Only available when the state is STATE_SUCCESS
                      type: object
                      properties:
                        success:
                          title: Success represents a successful verification
                          type: object
                          properties:
                            value:
                              type: string
                              title: >-
                                Hex-encoded value that has be signed by the
                                profile
                            signature:
                              type: string
                              title: >-
                                Hex-encoded signature that has been produced by
                                signing the value
                        failed:
                          title: Failed represents a failed verification
                          type: object
                          properties:
                            error:
                              type: string
                              title: Error that is associated with the failure
                    creation_time:
                      type: string
                      format: date-time
                      title: >-
                        CreationTime represents the time in which the link was
                        created
                    expiration_time:
                      type: string
                      format: date-time
                      title: >-
                        ExpirationTime represents the time in which the link
                        will expire
                  title: >-
                    ApplicationLink contains the data of a link to a centralized
                    application
              pagination:
                title: Pagination defines the pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QueryApplicationLinksResponse represents the response to the query
              used

              to get the application links for a specific user
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: user
          description: >-
            (Optional) User contains the Desmos profile address associated for
            which

            the link should be searched for.
          in: query
          required: false
          type: string
        - name: application
          description: >-
            (Optional) Application represents the application name associated
            with the

            link. Used only if user is also set.
          in: query
          required: false
          type: string
        - name: username
          description: >-
            Username represents the username inside the application associated
            with the

            link. Used only if application is also set.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/profiles/v3/app-links/clients/{client_id}':
    get:
      summary: |-
        ApplicationLinkByClientID queries a single application link for a given
        client id.
      operationId: ApplicationLinkByClientID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              link:
                type: object
                properties:
                  user:
                    type: string
                    title: User to which the link is associated
                  data:
                    title: Data contains the details of this specific link
                    type: object
                    properties:
                      application:
                        type: string
                        title: 'The application name (eg. Twitter, GitHub, etc)'
                      username:
                        type: string
                        title: >-
                          Username on the application (eg. Twitter tag, GitHub
                          profile, etc)
                  state:
                    title: State of the link
                    type: string
                    enum:
                      - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
                      - APPLICATION_LINK_STATE_VERIFICATION_STARTED
                      - APPLICATION_LINK_STATE_VERIFICATION_ERROR
                      - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS
                      - APPLICATION_LINK_STATE_TIMED_OUT
                    default: APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
                    description: >-
                      - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED: A link
                      has just been initialized
                       - APPLICATION_LINK_STATE_VERIFICATION_STARTED: A link has just started being verified
                       - APPLICATION_LINK_STATE_VERIFICATION_ERROR: A link has errored during the verification process
                       - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS: A link has being verified successfully
                       - APPLICATION_LINK_STATE_TIMED_OUT: A link has timed out while waiting for the verification
                  oracle_request:
                    title: >-
                      OracleRequest represents the request that has been made to
                      the oracle
                    type: object
                    properties:
                      id:
                        type: string
                        format: uint64
                        title: ID is the ID of the request
                      oracle_script_id:
                        type: string
                        format: uint64
                        title: OracleScriptID is ID of an oracle script
                      call_data:
                        title: >-
                          CallData contains the data used to perform the oracle
                          request
                        type: object
                        properties:
                          application:
                            type: string
                            title: >-
                              The application for which the ownership should be
                              verified
                          call_data:
                            type: string
                            title: >-
                              The hex encoded call data that should be used to
                              verify the application

                              account ownership
                      client_id:
                        type: string
                        title: >-
                          ClientID represents the ID of the client that has
                          called the oracle script
                  result:
                    title: |-
                      Data coming from the result of the verification.
                      Only available when the state is STATE_SUCCESS
                    type: object
                    properties:
                      success:
                        title: Success represents a successful verification
                        type: object
                        properties:
                          value:
                            type: string
                            title: >-
                              Hex-encoded value that has be signed by the
                              profile
                          signature:
                            type: string
                            title: >-
                              Hex-encoded signature that has been produced by
                              signing the value
                      failed:
                        title: Failed represents a failed verification
                        type: object
                        properties:
                          error:
                            type: string
                            title: Error that is associated with the failure
                  creation_time:
                    type: string
                    format: date-time
                    title: >-
                      CreationTime represents the time in which the link was
                      created
                  expiration_time:
                    type: string
                    format: date-time
                    title: >-
                      ExpirationTime represents the time in which the link will
                      expire
                title: >-
                  ApplicationLink contains the data of a link to a centralized
                  application
            title: >-
              QueryApplicationLinkByClientIDResponse contains the data returned
              by the

              request allowing to get an application link using a client id
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: >-
            ClientID represents the ID of the client to which search the link
            for
          in: path
          required: true
          type: string
      tags:
        - Query
  /desmos/profiles/v3/app-links/owners:
    get:
      summary: |-
        ApplicationLinkOwners queries for the owners of applications links,
        optionally searching for a specific application and username.
      operationId: ApplicationLinkOwners
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              owners:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                    application:
                      type: string
                    username:
                      type: string
                  title: >-
                    ApplicationLinkOwnerDetails contains the details of a single
                    application

                    link owner
                title: Addresses of the application links owners
              pagination:
                title: Pagination defines the pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryApplicationLinkOwnersResponse contains the data returned by
              the request

              allowing to get application link owners.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: application
          description: >-
            (Optional) Application name to search link owners of. If not
            specified, all

            links stored will be searched instead.
          in: query
          required: false
          type: string
        - name: username
          description: |-
            (Optional) Username to search for. This will only be used if the
            application is specified as well.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/profiles/v3/chain-links:
    get:
      summary: |-
        ChainLinks queries the chain links associated to the given user, if
        provided. Otherwise it queries all the chain links stored.
      operationId: ChainLinks
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              links:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                      title: User defines the destination profile address to link
                    address:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      title: >-
                        Address contains the data of the external chain address
                        to be connected

                        with the Desmos profile
                    proof:
                      title: >-
                        Proof contains the ownership proof of the external chain
                        address
                      type: object
                      properties:
                        pub_key:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          title: >-
                            PubKey represents the public key associated with the
                            address for which to

                            prove the ownership
                        signature:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          title: >-
                            Signature represents the hex-encoded signature of
                            the PlainText value
                        plain_text:
                          type: string
                          title: >-
                            PlainText represents the hex-encoded value signed in
                            order to produce the

                            Signature
                    chain_config:
                      title: >-
                        ChainConfig contains the configuration of the external
                        chain
                      type: object
                      properties:
                        name:
                          type: string
                      description: >-
                        ChainConfig contains the data of the chain with which
                        the link is made.
                    creation_time:
                      type: string
                      format: date-time
                      title: >-
                        CreationTime represents the time in which the link has
                        been created
                  title: >-
                    ChainLink contains the data representing either an inter- or
                    cross- chain

                    link
              pagination:
                title: Pagination defines the pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: |-
              QueryChainLinksResponse is the response type for the
              Query/ChainLinks RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: user
          description: >-
            (optional) User represents the Desmos address of the user to which
            search

            the link for.
          in: query
          required: false
          type: string
        - name: chain_name
          description: >-
            (optional) ChainName contains the name of the chain to which search
            the

            link for. Used only if user is also set.
          in: query
          required: false
          type: string
        - name: target
          description: >-
            (optional) Target must contain the external address to which query
            the link

            for. Used only if chain name is also set.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/profiles/v3/chain-links/owners:
    get:
      summary: >-
        ChainLinkOwners queries for the owners of chain links, optionally
        searching

        for a specific chain name and external address
      operationId: ChainLinkOwners
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              owners:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                    chain_name:
                      type: string
                    target:
                      type: string
                  title: >-
                    ChainLinkOwnerDetails contains the details of a single chain
                    link owner
                title: Addresses of the chain links owners
              pagination:
                title: Pagination defines the pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryChainLinkOwnersResponse contains the data returned by the
              request

              allowing to get chain link owners.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: chain_name
          description: >-
            (Optional) Chain name to search link owners of. If not specified,
            all

            links stored will be searched instead.
          in: query
          required: false
          type: string
        - name: target
          description: >-
            (Optional) External address to search for. This will only be used if
            the

            chain name is specified as well.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/profiles/v3/default-external-addresses:
    get:
      summary: |-
        DefaultExternalAddresses queries the default addresses associated to the
        given user and (optionally) chain name
      operationId: DefaultExternalAddresses
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              links:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                      title: User defines the destination profile address to link
                    address:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      title: >-
                        Address contains the data of the external chain address
                        to be connected

                        with the Desmos profile
                    proof:
                      title: >-
                        Proof contains the ownership proof of the external chain
                        address
                      type: object
                      properties:
                        pub_key:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          title: >-
                            PubKey represents the public key associated with the
                            address for which to

                            prove the ownership
                        signature:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          title: >-
                            Signature represents the hex-encoded signature of
                            the PlainText value
                        plain_text:
                          type: string
                          title: >-
                            PlainText represents the hex-encoded value signed in
                            order to produce the

                            Signature
                    chain_config:
                      title: >-
                        ChainConfig contains the configuration of the external
                        chain
                      type: object
                      properties:
                        name:
                          type: string
                      description: >-
                        ChainConfig contains the data of the chain with which
                        the link is made.
                    creation_time:
                      type: string
                      format: date-time
                      title: >-
                        CreationTime represents the time in which the link has
                        been created
                  title: >-
                    ChainLink contains the data representing either an inter- or
                    cross- chain

                    link
                title: >-
                  List of default addresses, each one represented by the
                  associated chain

                  link
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryDefaultExternalAddressesResponse is the response type for
              Query/DefaultExternalAddresses RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: owner
          description: (Optional) Owner for which to query the default addresses.
          in: query
          required: false
          type: string
        - name: chain_name
          description: (Optional) Chain name to query the default address for.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/profiles/v3/dtag-transfer-requests:
    get:
      summary: >-
        IncomingDTagTransferRequests queries all the DTag transfers requests
        that

        have been made towards the user with the given address
      operationId: IncomingDTagTransferRequests
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              requests:
                type: array
                items:
                  type: object
                  properties:
                    dtag_to_trade:
                      type: string
                      title: >-
                        DTagToTrade contains the value of the DTag that should
                        be transferred from

                        the receiver of the request to the sender
                    sender:
                      type: string
                      title: >-
                        Sender represents the address of the account that sent
                        the request
                    receiver:
                      type: string
                      title: >-
                        Receiver represents the receiver of the request that, if
                        accepted, will

                        give to the sender their DTag
                  title: >-
                    DTagTransferRequest represent a DTag transfer request
                    between two users
                title: >-
                  Requests represent the list of all the DTag transfer requests
                  made towards

                  the user
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                title: Pagination defines the pagination response
            description: >-
              QueryIncomingDTagTransferRequestsResponse is the response type for
              the

              Query/IncomingDTagTransferRequests RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: receiver
          description: >-
            (optional) Receiver represents the address of the user to which
            query the

            incoming requests for.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/profiles/v3/params:
    get:
      summary: Params queries the profiles module params
      operationId: ProfilesParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  nickname:
                    type: object
                    properties:
                      min_length:
                        type: string
                        format: byte
                      max_length:
                        type: string
                        format: byte
                    title: >-
                      NicknameParams defines the parameters related to the
                      profiles nicknames
                  dtag:
                    type: object
                    properties:
                      reg_ex:
                        type: string
                      min_length:
                        type: string
                        format: byte
                      max_length:
                        type: string
                        format: byte
                    title: DTagParams defines the parameters related to profile DTags
                  bio:
                    type: object
                    properties:
                      max_length:
                        type: string
                        format: byte
                    title: >-
                      BioParams defines the parameters related to profile
                      biography
                  oracle:
                    type: object
                    properties:
                      script_id:
                        type: string
                        format: uint64
                        title: >-
                          ScriptID represents the ID of the oracle script to be
                          called to verify the

                          data
                      ask_count:
                        type: string
                        format: uint64
                        title: >-
                          AskCount represents the number of oracles to which ask
                          to verify the data
                      min_count:
                        type: string
                        format: uint64
                        title: >-
                          MinCount represents the minimum count of oracles that
                          should complete the

                          verification successfully
                      prepare_gas:
                        type: string
                        format: uint64
                        title: >-
                          PrepareGas represents the amount of gas to be used
                          during the preparation

                          stage of the oracle script
                      execute_gas:
                        type: string
                        format: uint64
                        title: >-
                          ExecuteGas represents the amount of gas to be used
                          during the execution of

                          the oracle script
                      fee_amount:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: >-
                          FeeAmount represents the amount of fees to be payed in
                          order to execute the

                          oracle script
                    title: |-
                      OracleParams defines the parameters related to the oracle
                      that will be used to verify the ownership of a centralized
                      application account by a Desmos profile
                  app_links:
                    type: object
                    properties:
                      validity_duration:
                        type: string
                        title: >-
                          Default validity duration before an application link
                          expires
                    title: >-
                      AppLinksParams define the parameters related to the app
                      links
                title: Params contains the parameters for the profiles module
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/desmos/profiles/v3/profiles/{user}':
    get:
      summary: >-
        Profile queries the profile of a specific user given their DTag or
        address.

        If the queried user does not have a profile, the returned response will

        contain a null profile.
      operationId: Profile
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              profile:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryProfileResponse is the response type for the Query/Profile
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: user
          description: Address or DTag of the user to query the profile for
          in: path
          required: true
          type: string
      tags:
        - Query
  /desmos/relationships/v1/blocks:
    get:
      summary: |-
        Blocks queries the blocks for the given user, if provided.
        Otherwise, it queries all the stored blocks.
      operationId: Blocks
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              blocks:
                type: array
                items:
                  type: object
                  properties:
                    blocker:
                      type: string
                      title: >-
                        Blocker represents the address of the user blocking
                        another one
                    blocked:
                      type: string
                      title: Blocked represents the address of the blocked user
                    reason:
                      type: string
                      description: >-
                        Reason represents the optional reason the user has been
                        blocked for.
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        SubspaceID represents the ID of the subspace inside
                        which the user should

                        be blocked
                  description: >-
                    UserBlock represents the fact that the Blocker has blocked
                    the given Blocked

                    user.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: |-
              QueryBlocksResponse is the response type for the Query/Blocks RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: subspace to query the blocks for.
          in: query
          required: false
          type: string
          format: uint64
        - name: blocker
          description: optional address of the blocker to query the blocks for.
          in: query
          required: false
          type: string
        - name: blocked
          description: >-
            optional address of the blocked user to query the block for (used
            only if

            the blocker is provided).
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/relationships/v1/relationships:
    get:
      summary: >-
        Relationships queries all relationships present inside a specific
        subspace
      operationId: Relationships
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              relationships:
                type: array
                items:
                  type: object
                  properties:
                    creator:
                      type: string
                      title: Creator represents the creator of the relationship
                    counterparty:
                      type: string
                      title: >-
                        Counterparty represents the other user involved in the
                        relationship
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        SubspaceID represents the id of the subspace for which
                        the relationship is

                        valid
                  description: >-
                    Relationship is the struct of a relationship.

                    It represent the concept of "follow" of traditional social
                    networks.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: |-
              QueryRelationshipsResponse is the response type for the
              Query/Relationships RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: subspace to query the relationships for.
          in: query
          required: false
          type: string
          format: uint64
        - name: user
          description: optional address of the user for which to query the relationships.
          in: query
          required: false
          type: string
        - name: counterparty
          description: >-
            optional address of the counterparty of the relationships (used only
            if the

            user is provided).
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  /desmos/subspaces/v3/subspaces:
    get:
      summary: Subspaces queries all the subspaces inside Desmos
      operationId: Subspaces
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              subspaces:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: Unique id that identifies the subspace
                    name:
                      type: string
                      title: Human-readable name of the subspace
                    description:
                      type: string
                      title: Optional description of this subspace
                    treasury:
                      type: string
                      title: >-
                        Represents the account that is associated with the
                        subspace and

                        should be used to connect external applications to
                        verify this subspace
                    owner:
                      type: string
                      title: Address of the user that owns the subspace
                    creator:
                      type: string
                      title: Address of the subspace creator
                    creation_time:
                      type: string
                      format: date-time
                      title: the creation time of the subspace
                  title: Subspace contains all the data of a Desmos subspace
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySubspacesResponse is the response type for the
              Query/Subspaces RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/subspaces/v3/subspaces/{subspace_id}':
    get:
      summary: >-
        Subspace queries all the information about the subspace with the given
        id
      operationId: Subspace
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              subspace:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    title: Unique id that identifies the subspace
                  name:
                    type: string
                    title: Human-readable name of the subspace
                  description:
                    type: string
                    title: Optional description of this subspace
                  treasury:
                    type: string
                    title: >-
                      Represents the account that is associated with the
                      subspace and

                      should be used to connect external applications to verify
                      this subspace
                  owner:
                    type: string
                    title: Address of the user that owns the subspace
                  creator:
                    type: string
                    title: Address of the subspace creator
                  creation_time:
                    type: string
                    format: date-time
                    title: the creation time of the subspace
                title: Subspace contains all the data of a Desmos subspace
            title: >-
              QuerySubspaceResponse is the response type for the Query/Subspace
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace to query
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/desmos/subspaces/v3/subspaces/{subspace_id}/groups':
    get:
      summary: >-
        UserGroups queries all the groups that are present inside the subspace
        with

        the given id
      operationId: UserGroups
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: ID of the subspace inside which this group exists
                    section_id:
                      type: integer
                      format: int64
                      title: >-
                        (optional) Id of the section inside which this group is
                        valid
                    id:
                      type: integer
                      format: int64
                      title: Unique id that identifies the group
                    name:
                      type: string
                      title: Human-readable name of the user group
                    description:
                      type: string
                      title: Optional description of this group
                    permissions:
                      type: array
                      items:
                        type: string
                      title: >-
                        Permissions that will be granted to all the users part
                        of this group
                  title: UserGroup represents a group of users
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QueryUserGroupsResponse is the response type for the
              Query/UserGroups RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the groups for
          in: path
          required: true
          type: string
          format: uint64
        - name: section_id
          description: (optional) Section id to query the groups for.
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/subspaces/v3/subspaces/{subspace_id}/groups/{group_id}':
    get:
      summary: |-
        UserGroup queries the user group having the given id inside the specific
        subspace
      operationId: UserGroup
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              group:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: ID of the subspace inside which this group exists
                  section_id:
                    type: integer
                    format: int64
                    title: >-
                      (optional) Id of the section inside which this group is
                      valid
                  id:
                    type: integer
                    format: int64
                    title: Unique id that identifies the group
                  name:
                    type: string
                    title: Human-readable name of the user group
                  description:
                    type: string
                    title: Optional description of this group
                  permissions:
                    type: array
                    items:
                      type: string
                    title: >-
                      Permissions that will be granted to all the users part of
                      this group
                title: UserGroup represents a group of users
            title: >-
              QueryUserGroupResponse is the response type for the
              Query/UserGroup RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace that contains the group
          in: path
          required: true
          type: string
          format: uint64
        - name: group_id
          description: Id of the group to query
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - Query
  '/desmos/subspaces/v3/subspaces/{subspace_id}/groups/{group_id}/members':
    get:
      summary: UserGroupMembers queries all the members of a given user group
      operationId: UserGroupMembers
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              members:
                type: array
                items:
                  type: string
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryUserGroupMembersResponse is the response type for the
              Query/UserGroupMembers RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace that contains the group
          in: path
          required: true
          type: string
          format: uint64
        - name: group_id
          description: Id of the user group to query the members for
          in: path
          required: true
          type: integer
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/subspaces/v3/subspaces/{subspace_id}/permissions/{user}':
    get:
      summary: UserPermissions queries the permissions for the given user
      operationId: UserPermissions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: Id of the subspace for which this permission is valid
                    section_id:
                      type: integer
                      format: int64
                      title: Id of the section for which this permission is valid
                    user:
                      title: User represents a user permission
                      type: object
                      properties:
                        user:
                          type: string
                          title: User for which the permission was set
                        permission:
                          type: array
                          items:
                            type: string
                          title: Permissions set to the user
                    group:
                      title: Group represents a group permission
                      type: object
                      properties:
                        group_id:
                          type: integer
                          format: int64
                          title: Unique id of the group
                        permission:
                          type: array
                          items:
                            type: string
                          title: Permissions set to the group
                  title: PermissionDetail contains the details data of a permission
            title: |-
              QueryUserPermissionsRequest is the response type for the
              Query/UserPermissions method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the permissions for
          in: path
          required: true
          type: string
          format: uint64
        - name: user
          description: Address of the user to query the permissions for
          in: path
          required: true
          type: string
        - name: section_id
          description: Id of the section to query the permissions for.
          in: query
          required: false
          type: integer
          format: int64
      tags:
        - Query
  '/desmos/subspaces/v3/{subspace_id}/sections':
    get:
      summary: Sections allows to query for the sections of a specific subspace
      operationId: Sections
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sections:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: Id of the subspace inside which the section exists
                    id:
                      type: integer
                      format: int64
                      title: Unique id of the section within the subspace
                    parent_id:
                      type: integer
                      format: int64
                      title: (optional) Id of the parent section
                    name:
                      type: string
                      title: Name of the section within the subspace
                    description:
                      type: string
                      title: (optional) Description of the section
                  title: Section contains the data of a single subspace section
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySectionsResponse is the response type for Query/Sections RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the sections for
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/subspaces/v3/{subspace_id}/sections/{section_id}':
    get:
      summary: Section queries all the information about the section with the given id
      operationId: Section
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              section:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: Id of the subspace inside which the section exists
                  id:
                    type: integer
                    format: int64
                    title: Unique id of the section within the subspace
                  parent_id:
                    type: integer
                    format: int64
                    title: (optional) Id of the parent section
                  name:
                    type: string
                    title: Name of the section within the subspace
                  description:
                    type: string
                    title: (optional) Description of the section
                title: Section contains the data of a single subspace section
            title: >-
              QuerySectionResponse is the response type for Query/Section RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: subspace_id
          description: Id of the subspace inside which to search for
          in: path
          required: true
          type: string
          format: uint64
        - name: section_id
          description: Id of the searched section
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - Query
  /desmos/posts/v1/params:
    get:
      summary: Params queries the module parameters
      operationId: PostsParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  max_text_length:
                    type: integer
                    format: int64
                    title: Maximum length of the post text
                title: Params contains the parameters for the posts module
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/desmos/posts/v1/subspaces/{subspace_id}/posts':
    get:
      summary: SubspacePosts queries all the posts inside a given subspace
      operationId: SubspacePosts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              posts:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        Id of the subspace inside which the post has been
                        created
                    section_id:
                      type: integer
                      format: int64
                      title: Id of the section inside which the post has been created
                    id:
                      type: string
                      format: uint64
                      title: Unique id of the post
                    external_id:
                      type: string
                      title: (optional) External id for this post
                    text:
                      type: string
                      title: (optional) Text of the post
                    entities:
                      title: (optional) Entities connected to this post
                      type: object
                      properties:
                        hashtags:
                          type: array
                          items:
                            type: object
                            properties:
                              start:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag starts
                              end:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag ends
                              tag:
                                type: string
                                title: >-
                                  Tag reference (user address, hashtag value,
                                  etc)
                            title: TextTag represents a tag within the post text
                          title: Hashtags represent inside the post text
                        mentions:
                          type: array
                          items:
                            type: object
                            properties:
                              start:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag starts
                              end:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag ends
                              tag:
                                type: string
                                title: >-
                                  Tag reference (user address, hashtag value,
                                  etc)
                            title: TextTag represents a tag within the post text
                          title: Mentions present inside the post text
                        urls:
                          type: array
                          items:
                            type: object
                            properties:
                              start:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the URL starts
                              end:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the URL ends
                              url:
                                type: string
                                title: >-
                                  Value of the URL where the user should be
                                  redirected to
                              display_url:
                                type: string
                                title: (optional) Display value of the URL
                            title: Url contains the details of a generic URL
                          title: Links present inside the post text
                    tags:
                      type: array
                      items:
                        type: string
                      title: 'Tags related to this post, useful for categorization'
                    author:
                      type: string
                      title: Author of the post
                    conversation_id:
                      type: string
                      format: uint64
                      title: (optional) Id of the original post of the conversation
                    referenced_posts:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            title: Type of reference
                            type: string
                            enum:
                              - POST_REFERENCE_TYPE_UNSPECIFIED
                              - POST_REFERENCE_TYPE_REPLY
                              - POST_REFERENCE_TYPE_QUOTE
                              - POST_REFERENCE_TYPE_REPOST
                            default: POST_REFERENCE_TYPE_UNSPECIFIED
                            description: >-
                              - POST_REFERENCE_TYPE_UNSPECIFIED: No reference
                              specified
                               - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                               - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                               - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
                          post_id:
                            type: string
                            format: uint64
                            title: Id of the referenced post
                          position:
                            type: string
                            format: uint64
                            title: >-
                              Position of the reference inside the post's text.
                              This should be used only

                              with the type set to TYPE_QUOTE
                        title: PostReference contains the details of a post reference
                      title: >-
                        A list this posts references (either as a reply, repost
                        or quote)
                    reply_settings:
                      title: Reply settings of this post
                      type: string
                      enum:
                        - REPLY_SETTING_UNSPECIFIED
                        - REPLY_SETTING_EVERYONE
                        - REPLY_SETTING_FOLLOWERS
                        - REPLY_SETTING_MUTUAL
                        - REPLY_SETTING_MENTIONS
                      default: REPLY_SETTING_UNSPECIFIED
                      description: |-
                        - REPLY_SETTING_UNSPECIFIED: No reply setting specified
                         - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
                         - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
                         - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
                         - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
                    creation_date:
                      type: string
                      format: date-time
                      title: Creation date of the post
                    last_edited_date:
                      type: string
                      format: date-time
                      title: (optional) Last edited time of the post
                  title: Post contains all the information about a single post
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySubspacePostsResponse is the response type for the
              Query/SubspacePosts

              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the posts for
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/posts/v1/subspaces/{subspace_id}/posts/{post_id}':
    get:
      summary: Post queries for a single post inside a given subspace
      operationId: Post
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              post:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: Id of the subspace inside which the post has been created
                  section_id:
                    type: integer
                    format: int64
                    title: Id of the section inside which the post has been created
                  id:
                    type: string
                    format: uint64
                    title: Unique id of the post
                  external_id:
                    type: string
                    title: (optional) External id for this post
                  text:
                    type: string
                    title: (optional) Text of the post
                  entities:
                    title: (optional) Entities connected to this post
                    type: object
                    properties:
                      hashtags:
                        type: array
                        items:
                          type: object
                          properties:
                            start:
                              type: string
                              format: uint64
                              title: >-
                                Index of the character inside the text at which
                                the tag starts
                            end:
                              type: string
                              format: uint64
                              title: >-
                                Index of the character inside the text at which
                                the tag ends
                            tag:
                              type: string
                              title: 'Tag reference (user address, hashtag value, etc)'
                          title: TextTag represents a tag within the post text
                        title: Hashtags represent inside the post text
                      mentions:
                        type: array
                        items:
                          type: object
                          properties:
                            start:
                              type: string
                              format: uint64
                              title: >-
                                Index of the character inside the text at which
                                the tag starts
                            end:
                              type: string
                              format: uint64
                              title: >-
                                Index of the character inside the text at which
                                the tag ends
                            tag:
                              type: string
                              title: 'Tag reference (user address, hashtag value, etc)'
                          title: TextTag represents a tag within the post text
                        title: Mentions present inside the post text
                      urls:
                        type: array
                        items:
                          type: object
                          properties:
                            start:
                              type: string
                              format: uint64
                              title: >-
                                Index of the character inside the text at which
                                the URL starts
                            end:
                              type: string
                              format: uint64
                              title: >-
                                Index of the character inside the text at which
                                the URL ends
                            url:
                              type: string
                              title: >-
                                Value of the URL where the user should be
                                redirected to
                            display_url:
                              type: string
                              title: (optional) Display value of the URL
                          title: Url contains the details of a generic URL
                        title: Links present inside the post text
                  tags:
                    type: array
                    items:
                      type: string
                    title: 'Tags related to this post, useful for categorization'
                  author:
                    type: string
                    title: Author of the post
                  conversation_id:
                    type: string
                    format: uint64
                    title: (optional) Id of the original post of the conversation
                  referenced_posts:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          title: Type of reference
                          type: string
                          enum:
                            - POST_REFERENCE_TYPE_UNSPECIFIED
                            - POST_REFERENCE_TYPE_REPLY
                            - POST_REFERENCE_TYPE_QUOTE
                            - POST_REFERENCE_TYPE_REPOST
                          default: POST_REFERENCE_TYPE_UNSPECIFIED
                          description: >-
                            - POST_REFERENCE_TYPE_UNSPECIFIED: No reference
                            specified
                             - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                             - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                             - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
                        post_id:
                          type: string
                          format: uint64
                          title: Id of the referenced post
                        position:
                          type: string
                          format: uint64
                          title: >-
                            Position of the reference inside the post's text.
                            This should be used only

                            with the type set to TYPE_QUOTE
                      title: PostReference contains the details of a post reference
                    title: >-
                      A list this posts references (either as a reply, repost or
                      quote)
                  reply_settings:
                    title: Reply settings of this post
                    type: string
                    enum:
                      - REPLY_SETTING_UNSPECIFIED
                      - REPLY_SETTING_EVERYONE
                      - REPLY_SETTING_FOLLOWERS
                      - REPLY_SETTING_MUTUAL
                      - REPLY_SETTING_MENTIONS
                    default: REPLY_SETTING_UNSPECIFIED
                    description: |-
                      - REPLY_SETTING_UNSPECIFIED: No reply setting specified
                       - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
                       - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
                       - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
                       - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
                  creation_date:
                    type: string
                    format: date-time
                    title: Creation date of the post
                  last_edited_date:
                    type: string
                    format: date-time
                    title: (optional) Last edited time of the post
                title: Post contains all the information about a single post
            title: >-
              QueryPostResponse is the response type for the Query/Post RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace inside which the post lies
          in: path
          required: true
          type: string
          format: uint64
        - name: post_id
          description: Id of the post to query for
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/desmos/posts/v1/subspaces/{subspace_id}/posts/{post_id}/attachments':
    get:
      summary: PostAttachments queries the attachments of the post having the given id
      operationId: PostAttachments
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              attachments:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        Id of the subspace inside which the post to which this
                        attachment should be

                        connected is
                    post_id:
                      type: string
                      format: uint64
                      title: >-
                        Id of the post to which this attachment should be
                        connected
                    id:
                      type: integer
                      format: int64
                      title: If of this attachment
                    content:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      title: Content of the attachment
                  title: Attachment contains the data of a single post attachment
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryPostAttachmentsResponse is the response type for the
              Query/PostAttachments RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace where the post is stored
          in: path
          required: true
          type: string
          format: uint64
        - name: post_id
          description: Id of the post to query the attachments for
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/posts/v1/subspaces/{subspace_id}/posts/{post_id}/polls/{poll_id}/answers':
    get:
      summary: PollAnswers queries the answers for the poll having the given id
      operationId: PollAnswers
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              answers:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        Subspace id inside which the post related to this
                        attachment is located
                    post_id:
                      type: string
                      format: uint64
                      title: Id of the post associated to this attachment
                    poll_id:
                      type: integer
                      format: int64
                      title: Id of the poll to which this answer is associated
                    answers_indexes:
                      type: array
                      items:
                        type: integer
                        format: int64
                      title: Indexes of the answers inside the ProvidedAnswers array
                    user:
                      type: string
                      title: Address of the user answering the poll
                  title: UserAnswer represents a user answer to a poll
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QueryPollAnswersResponse is the response type for the
              Query/PollAnswers RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace where the post is stored
          in: path
          required: true
          type: string
          format: uint64
        - name: post_id
          description: Id of the post that holds the poll
          in: path
          required: true
          type: string
          format: uint64
        - name: poll_id
          description: Id of the poll to query the answers for
          in: path
          required: true
          type: integer
          format: int64
        - name: user
          description: (Optional) Address of the user to query the responses for.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/posts/v1/subspaces/{subspace_id}/sections/{section_id}/posts':
    get:
      summary: SectionPosts queries all the posts inside a given section
      operationId: SectionPosts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              posts:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        Id of the subspace inside which the post has been
                        created
                    section_id:
                      type: integer
                      format: int64
                      title: Id of the section inside which the post has been created
                    id:
                      type: string
                      format: uint64
                      title: Unique id of the post
                    external_id:
                      type: string
                      title: (optional) External id for this post
                    text:
                      type: string
                      title: (optional) Text of the post
                    entities:
                      title: (optional) Entities connected to this post
                      type: object
                      properties:
                        hashtags:
                          type: array
                          items:
                            type: object
                            properties:
                              start:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag starts
                              end:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag ends
                              tag:
                                type: string
                                title: >-
                                  Tag reference (user address, hashtag value,
                                  etc)
                            title: TextTag represents a tag within the post text
                          title: Hashtags represent inside the post text
                        mentions:
                          type: array
                          items:
                            type: object
                            properties:
                              start:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag starts
                              end:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the tag ends
                              tag:
                                type: string
                                title: >-
                                  Tag reference (user address, hashtag value,
                                  etc)
                            title: TextTag represents a tag within the post text
                          title: Mentions present inside the post text
                        urls:
                          type: array
                          items:
                            type: object
                            properties:
                              start:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the URL starts
                              end:
                                type: string
                                format: uint64
                                title: >-
                                  Index of the character inside the text at
                                  which the URL ends
                              url:
                                type: string
                                title: >-
                                  Value of the URL where the user should be
                                  redirected to
                              display_url:
                                type: string
                                title: (optional) Display value of the URL
                            title: Url contains the details of a generic URL
                          title: Links present inside the post text
                    tags:
                      type: array
                      items:
                        type: string
                      title: 'Tags related to this post, useful for categorization'
                    author:
                      type: string
                      title: Author of the post
                    conversation_id:
                      type: string
                      format: uint64
                      title: (optional) Id of the original post of the conversation
                    referenced_posts:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            title: Type of reference
                            type: string
                            enum:
                              - POST_REFERENCE_TYPE_UNSPECIFIED
                              - POST_REFERENCE_TYPE_REPLY
                              - POST_REFERENCE_TYPE_QUOTE
                              - POST_REFERENCE_TYPE_REPOST
                            default: POST_REFERENCE_TYPE_UNSPECIFIED
                            description: >-
                              - POST_REFERENCE_TYPE_UNSPECIFIED: No reference
                              specified
                               - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                               - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                               - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
                          post_id:
                            type: string
                            format: uint64
                            title: Id of the referenced post
                          position:
                            type: string
                            format: uint64
                            title: >-
                              Position of the reference inside the post's text.
                              This should be used only

                              with the type set to TYPE_QUOTE
                        title: PostReference contains the details of a post reference
                      title: >-
                        A list this posts references (either as a reply, repost
                        or quote)
                    reply_settings:
                      title: Reply settings of this post
                      type: string
                      enum:
                        - REPLY_SETTING_UNSPECIFIED
                        - REPLY_SETTING_EVERYONE
                        - REPLY_SETTING_FOLLOWERS
                        - REPLY_SETTING_MUTUAL
                        - REPLY_SETTING_MENTIONS
                      default: REPLY_SETTING_UNSPECIFIED
                      description: |-
                        - REPLY_SETTING_UNSPECIFIED: No reply setting specified
                         - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
                         - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
                         - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
                         - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
                    creation_date:
                      type: string
                      format: date-time
                      title: Creation date of the post
                    last_edited_date:
                      type: string
                      format: date-time
                      title: (optional) Last edited time of the post
                  title: Post contains all the information about a single post
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySectionPostsResponse is the response type for the
              Query/SectionPosts RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the posts for
          in: path
          required: true
          type: string
          format: uint64
        - name: section_id
          description: Id of the section to query the posts for
          in: path
          required: true
          type: integer
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/reactions/v1/subspaces/{subspace_id}/params':
    get:
      summary: ReactionsParams allows to query the reaction params of a subspace
      operationId: ReactionsParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: Id of the subspace for which these params are valid
                  registered_reaction:
                    title: Params related to RegisteredReactionValue reactions
                    type: object
                    properties:
                      enabled:
                        type: boolean
                        format: boolean
                        title: >-
                          Whether RegisteredReactionValue reactions should be
                          enabled
                  free_text:
                    title: Params related to FreeTextValue reactions
                    type: object
                    properties:
                      enabled:
                        type: boolean
                        format: boolean
                        title: Whether FreeTextValue reactions should be enabled
                      max_length:
                        type: integer
                        format: int64
                        title: >-
                          The max length that FreeTextValue reactions should
                          have
                      reg_ex:
                        type: string
                        description: >-
                          RegEx that each FreeTextValue should respect.

                          This is useful to limit what characters can be used as
                          a reaction.
                title: >-
                  SubspaceReactionsParams contains the params related to a
                  single subspace

                  reactions
            title: |-
              QueryReactionsParamsResponse is the response type for the
              Query/ReactionsParam RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace for which to query the params
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/desmos/reactions/v1/subspaces/{subspace_id}/posts/{post_id}/reactions':
    get:
      summary: Reactions allows to query the reactions for a given post
      operationId: Reactions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reactions:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        Id of the subspace inside which the reaction has been
                        put
                    post_id:
                      type: string
                      format: uint64
                      title: Id of the post to which the reaction is associated
                    id:
                      type: integer
                      format: int64
                      title: Id of the reaction within the post
                    value:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    author:
                      type: string
                      title: Author of the reaction
                  title: Reaction contains the data of a single post reaction
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QueryReactionsResponse is the response type for the
              Query/Reactions RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace that contains the post to query the reactions for
          in: path
          required: true
          type: string
          format: uint64
        - name: post_id
          description: Post id to query the reactions for
          in: path
          required: true
          type: string
          format: uint64
        - name: user
          description: |-
            (optional) User to query the reactions for.
            This is going to be used only if a post id is specified as well.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/reactions/v1/subspaces/{subspace_id}/posts/{post_id}/reactions/{reaction_id}':
    get:
      summary: Reaction allows to query the reaction with the given id
      operationId: Reaction
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reaction:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: Id of the subspace inside which the reaction has been put
                  post_id:
                    type: string
                    format: uint64
                    title: Id of the post to which the reaction is associated
                  id:
                    type: integer
                    format: int64
                    title: Id of the reaction within the post
                  value:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  author:
                    type: string
                    title: Author of the reaction
                title: Reaction contains the data of a single post reaction
            title: >-
              QueryReactionResponse is the response type for the Query/Reaction
              RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace that contains the post to query the reactions for
          in: path
          required: true
          type: string
          format: uint64
        - name: post_id
          description: Post id to query the reactions for
          in: path
          required: true
          type: string
          format: uint64
        - name: reaction_id
          description: Id of the reaction to query
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - Query
  '/desmos/reactions/v1/subspaces/{subspace_id}/registered-reactions':
    get:
      summary: >-
        RegisteredReactions allows to query the registered reaction of a
        subspace
      operationId: RegisteredReactions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              registered_reactions:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: >-
                        Id of the subspace for which this reaction has been
                        registered
                    id:
                      type: integer
                      format: int64
                      title: Id of the registered reaction
                    shorthand_code:
                      type: string
                      title: Unique shorthand code associated to this reaction
                    display_value:
                      type: string
                      title: Value that should be displayed when using this reaction
                  title: >-
                    RegisteredReaction contains the details of a registered
                    reaction within a

                    subspace
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryRegisteredReactionsResponse is the response type for the
              Query/RegisteredReactions RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the registered reactions for
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/reactions/v1/subspaces/{subspace_id}/registered-reactions/{reaction_id}':
    get:
      summary: RegisteredReaction allows to query the registered reaction of a subspace
      operationId: RegisteredReaction
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              registered_reaction:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: >-
                      Id of the subspace for which this reaction has been
                      registered
                  id:
                    type: integer
                    format: int64
                    title: Id of the registered reaction
                  shorthand_code:
                    type: string
                    title: Unique shorthand code associated to this reaction
                  display_value:
                    type: string
                    title: Value that should be displayed when using this reaction
                title: >-
                  RegisteredReaction contains the details of a registered
                  reaction within a

                  subspace
            title: |-
              QueryRegisteredReactionResponse is the response type for the
              Query/RegisteredReaction RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the registered reactions for
          in: path
          required: true
          type: string
          format: uint64
        - name: reaction_id
          description: Id of the registered reaction to query for
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - Query
  /desmos/reports/v1/params:
    get:
      summary: Params allows to query the module parameters
      operationId: ReportsParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  standard_reasons:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                          title: Id of the reason inside the subspace
                        title:
                          type: string
                          title: Title of the reason
                        description:
                          type: string
                          title: >-
                            (optional) Extended description of the reason and
                            the cases it applies to
                      title: >-
                        StandardReason contains the data of a standard reason
                        that can be picked and

                        used from different subspaces
                    title: >-
                      List of available reasons from which new subspaces can
                      pick their default

                      ones
                title: Params contains the module parameters
            title: >-
              QueryParamsResponse is the response type for Query/Params RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/desmos/reports/v1/subspaces/{subspace_id}/reasons':
    get:
      summary: Reasons allows to query the supported reporting reasons for a subspace
      operationId: Reasons
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reasons:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: Id of the subspace for which this reason is valid
                    id:
                      type: integer
                      format: int64
                      title: Id of the reason inside the subspace
                    title:
                      type: string
                      title: Title of the reason
                    description:
                      type: string
                      title: >-
                        (optional) Extended description of the reason and the
                        cases it applies to
                  title: Reason contains the data about a reporting reason
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QueryReasonsResponse is the response type for Query/Reasons RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the supported reporting reasons for
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/reports/v1/subspaces/{subspace_id}/reasons/{reason_id}':
    get:
      summary: Reason allows to query the reason having the given id
      operationId: Reason
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reason:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: Id of the subspace for which this reason is valid
                  id:
                    type: integer
                    format: int64
                    title: Id of the reason inside the subspace
                  title:
                    type: string
                    title: Title of the reason
                  description:
                    type: string
                    title: >-
                      (optional) Extended description of the reason and the
                      cases it applies to
                title: Reason contains the data about a reporting reason
            title: >-
              QueryReasonResponse is the response type for Query/Reason RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace that holds the reason to query for
          in: path
          required: true
          type: string
          format: uint64
        - name: reason_id
          description: Id of the reason to query for
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - Query
  '/desmos/reports/v1/subspaces/{subspace_id}/reports':
    get:
      summary: Reports allows to query the reports for a specific target
      operationId: Reports
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reports:
                type: array
                items:
                  type: object
                  properties:
                    subspace_id:
                      type: string
                      format: uint64
                      title: Id of the subspace for which the report has been created
                    id:
                      type: string
                      format: uint64
                      title: Id of the report
                    reasons_ids:
                      type: array
                      items:
                        type: integer
                        format: int64
                      title: Id of the reason this report has been created for
                    message:
                      type: string
                      title: (optional) Message attached to this report
                    reporter:
                      type: string
                      title: Address of the reporter
                    target:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      title: Target of the report
                    creation_date:
                      type: string
                      format: date-time
                      title: Time in which the report was created
                  title: Report contains the data of a generic report
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QueryReportsResponse is the response type for Query/Reports RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace to query the reports for
          in: path
          required: true
          type: string
          format: uint64
        - name: target.type_url
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
          in: query
          required: false
          type: string
        - name: target.value
          description: >-
            Must be a valid serialized protocol buffer of the above specified
            type.
          in: query
          required: false
          type: string
          format: byte
        - name: reporter
          description: |-
            (optional) User that reported the target.
            This is going to be used only if the target is also specified.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
          format: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
          format: boolean
      tags:
        - Query
  '/desmos/reports/v1/subspaces/{subspace_id}/reports/{report_id}':
    get:
      summary: Report allows to query the report having the given id
      operationId: Report
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              report:
                type: object
                properties:
                  subspace_id:
                    type: string
                    format: uint64
                    title: Id of the subspace for which the report has been created
                  id:
                    type: string
                    format: uint64
                    title: Id of the report
                  reasons_ids:
                    type: array
                    items:
                      type: integer
                      format: int64
                    title: Id of the reason this report has been created for
                  message:
                    type: string
                    title: (optional) Message attached to this report
                  reporter:
                    type: string
                    title: Address of the reporter
                  target:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    title: Target of the report
                  creation_date:
                    type: string
                    format: date-time
                    title: Time in which the report was created
                title: Report contains the data of a generic report
            title: >-
              QueryReportResponse is the response type for Query/Report RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: subspace_id
          description: Id of the subspace that holds the report to query for
          in: path
          required: true
          type: string
          format: uint64
        - name: report_id
          description: Id of the report to query for
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /desmos/fees/v1/params:
    get:
      summary: Params queries the fees module params
      operationId: FeesParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  min_fees:
                    type: array
                    items:
                      type: object
                      properties:
                        message_type:
                          type: string
                        amount:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                      title: >-
                        MinFee contains the minimum amount of coins that should
                        be paid as a fee for

                        each message of the specific type sent
                title: Params contains the parameters for the fees module
            title: QueryParamsResponse is the response type for the Query/Params RPC
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/desmos/supply/v1/circulating/{denom}':
    get:
      summary: >-
        Circulating queries the amount of tokens circulating in the market of
        the

        given denom
      operationId: Circulating
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              circulating_supply:
                type: string
            title: >-
              QueryCirculatingResponse is the response type for the
              Query/Circulating RPC

              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          description: coin denom to query the circulating supply for
          in: path
          required: true
          type: string
        - name: divider_exponent
          description: >-
            divider_exponent is a factor used to power the divider used to
            convert the

            supply to the desired representation.
          in: query
          required: false
          type: string
          format: uint64
      tags:
        - Query
  '/desmos/supply/v1/total/{denom}':
    get:
      summary: Total queries the total supply of the given denom
      operationId: Total
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              total_supply:
                type: string
            title: >-
              QueryTotalResponse is the response type for the Query/Total RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          description: coin denom to query the circulating supply for
          in: path
          required: true
          type: string
        - name: divider_exponent
          description: >-
            divider_exponent is a factor used to power the divider used to
            convert the

            supply to the desired representation.
          in: query
          required: false
          type: string
          format: uint64
      tags:
        - Query
definitions:
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        format: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
      reverse:
        type: boolean
        format: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  desmos.profiles.v3.AppLinksParams:
    type: object
    properties:
      validity_duration:
        type: string
        title: Default validity duration before an application link expires
    title: AppLinksParams define the parameters related to the app links
  desmos.profiles.v3.ApplicationLink:
    type: object
    properties:
      user:
        type: string
        title: User to which the link is associated
      data:
        title: Data contains the details of this specific link
        type: object
        properties:
          application:
            type: string
            title: 'The application name (eg. Twitter, GitHub, etc)'
          username:
            type: string
            title: 'Username on the application (eg. Twitter tag, GitHub profile, etc)'
      state:
        title: State of the link
        type: string
        enum:
          - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
          - APPLICATION_LINK_STATE_VERIFICATION_STARTED
          - APPLICATION_LINK_STATE_VERIFICATION_ERROR
          - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS
          - APPLICATION_LINK_STATE_TIMED_OUT
        default: APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
        description: >-
          - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED: A link has just been
          initialized
           - APPLICATION_LINK_STATE_VERIFICATION_STARTED: A link has just started being verified
           - APPLICATION_LINK_STATE_VERIFICATION_ERROR: A link has errored during the verification process
           - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS: A link has being verified successfully
           - APPLICATION_LINK_STATE_TIMED_OUT: A link has timed out while waiting for the verification
      oracle_request:
        title: OracleRequest represents the request that has been made to the oracle
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: ID is the ID of the request
          oracle_script_id:
            type: string
            format: uint64
            title: OracleScriptID is ID of an oracle script
          call_data:
            title: CallData contains the data used to perform the oracle request
            type: object
            properties:
              application:
                type: string
                title: The application for which the ownership should be verified
              call_data:
                type: string
                title: >-
                  The hex encoded call data that should be used to verify the
                  application

                  account ownership
          client_id:
            type: string
            title: >-
              ClientID represents the ID of the client that has called the
              oracle script
      result:
        title: |-
          Data coming from the result of the verification.
          Only available when the state is STATE_SUCCESS
        type: object
        properties:
          success:
            title: Success represents a successful verification
            type: object
            properties:
              value:
                type: string
                title: Hex-encoded value that has be signed by the profile
              signature:
                type: string
                title: >-
                  Hex-encoded signature that has been produced by signing the
                  value
          failed:
            title: Failed represents a failed verification
            type: object
            properties:
              error:
                type: string
                title: Error that is associated with the failure
      creation_time:
        type: string
        format: date-time
        title: CreationTime represents the time in which the link was created
      expiration_time:
        type: string
        format: date-time
        title: ExpirationTime represents the time in which the link will expire
    title: ApplicationLink contains the data of a link to a centralized application
  desmos.profiles.v3.ApplicationLinkState:
    type: string
    enum:
      - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
      - APPLICATION_LINK_STATE_VERIFICATION_STARTED
      - APPLICATION_LINK_STATE_VERIFICATION_ERROR
      - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS
      - APPLICATION_LINK_STATE_TIMED_OUT
    default: APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
    description: >-
      - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED: A link has just been
      initialized
       - APPLICATION_LINK_STATE_VERIFICATION_STARTED: A link has just started being verified
       - APPLICATION_LINK_STATE_VERIFICATION_ERROR: A link has errored during the verification process
       - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS: A link has being verified successfully
       - APPLICATION_LINK_STATE_TIMED_OUT: A link has timed out while waiting for the verification
    title: |-
      ApplicationLinkState defines if an application link is in the following
      states: STARTED, ERRORED, SUCCESSFUL, TIMED_OUT
  desmos.profiles.v3.BioParams:
    type: object
    properties:
      max_length:
        type: string
        format: byte
    title: BioParams defines the parameters related to profile biography
  desmos.profiles.v3.ChainConfig:
    type: object
    properties:
      name:
        type: string
    description: ChainConfig contains the data of the chain with which the link is made.
  desmos.profiles.v3.ChainLink:
    type: object
    properties:
      user:
        type: string
        title: User defines the destination profile address to link
      address:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: >-
          Address contains the data of the external chain address to be
          connected

          with the Desmos profile
      proof:
        title: Proof contains the ownership proof of the external chain address
        type: object
        properties:
          pub_key:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: >-
              PubKey represents the public key associated with the address for
              which to

              prove the ownership
          signature:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: >-
              Signature represents the hex-encoded signature of the PlainText
              value
          plain_text:
            type: string
            title: >-
              PlainText represents the hex-encoded value signed in order to
              produce the

              Signature
      chain_config:
        title: ChainConfig contains the configuration of the external chain
        type: object
        properties:
          name:
            type: string
        description: >-
          ChainConfig contains the data of the chain with which the link is
          made.
      creation_time:
        type: string
        format: date-time
        title: CreationTime represents the time in which the link has been created
    title: |-
      ChainLink contains the data representing either an inter- or cross- chain
      link
  desmos.profiles.v3.DTagParams:
    type: object
    properties:
      reg_ex:
        type: string
      min_length:
        type: string
        format: byte
      max_length:
        type: string
        format: byte
    title: DTagParams defines the parameters related to profile DTags
  desmos.profiles.v3.DTagTransferRequest:
    type: object
    properties:
      dtag_to_trade:
        type: string
        title: >-
          DTagToTrade contains the value of the DTag that should be transferred
          from

          the receiver of the request to the sender
      sender:
        type: string
        title: Sender represents the address of the account that sent the request
      receiver:
        type: string
        title: >-
          Receiver represents the receiver of the request that, if accepted,
          will

          give to the sender their DTag
    title: DTagTransferRequest represent a DTag transfer request between two users
  desmos.profiles.v3.Data:
    type: object
    properties:
      application:
        type: string
        title: 'The application name (eg. Twitter, GitHub, etc)'
      username:
        type: string
        title: 'Username on the application (eg. Twitter tag, GitHub profile, etc)'
    title: |-
      Data contains the data associated to a specific user of a
      generic centralized application
  desmos.profiles.v3.NicknameParams:
    type: object
    properties:
      min_length:
        type: string
        format: byte
      max_length:
        type: string
        format: byte
    title: NicknameParams defines the parameters related to the profiles nicknames
  desmos.profiles.v3.OracleParams:
    type: object
    properties:
      script_id:
        type: string
        format: uint64
        title: >-
          ScriptID represents the ID of the oracle script to be called to verify
          the

          data
      ask_count:
        type: string
        format: uint64
        title: >-
          AskCount represents the number of oracles to which ask to verify the
          data
      min_count:
        type: string
        format: uint64
        title: >-
          MinCount represents the minimum count of oracles that should complete
          the

          verification successfully
      prepare_gas:
        type: string
        format: uint64
        title: >-
          PrepareGas represents the amount of gas to be used during the
          preparation

          stage of the oracle script
      execute_gas:
        type: string
        format: uint64
        title: >-
          ExecuteGas represents the amount of gas to be used during the
          execution of

          the oracle script
      fee_amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: >-
          FeeAmount represents the amount of fees to be payed in order to
          execute the

          oracle script
    title: |-
      OracleParams defines the parameters related to the oracle
      that will be used to verify the ownership of a centralized
      application account by a Desmos profile
  desmos.profiles.v3.OracleRequest:
    type: object
    properties:
      id:
        type: string
        format: uint64
        title: ID is the ID of the request
      oracle_script_id:
        type: string
        format: uint64
        title: OracleScriptID is ID of an oracle script
      call_data:
        title: CallData contains the data used to perform the oracle request
        type: object
        properties:
          application:
            type: string
            title: The application for which the ownership should be verified
          call_data:
            type: string
            title: >-
              The hex encoded call data that should be used to verify the
              application

              account ownership
      client_id:
        type: string
        title: >-
          ClientID represents the ID of the client that has called the oracle
          script
    title: |-
      OracleRequest represents a generic oracle request used to
      verify the ownership of a centralized application account
  desmos.profiles.v3.OracleRequest.CallData:
    type: object
    properties:
      application:
        type: string
        title: The application for which the ownership should be verified
      call_data:
        type: string
        title: >-
          The hex encoded call data that should be used to verify the
          application

          account ownership
    title: |-
      CallData contains the data sent to a single oracle request in order to
      verify the ownership of a centralized application by a Desmos profile
  desmos.profiles.v3.Params:
    type: object
    properties:
      nickname:
        type: object
        properties:
          min_length:
            type: string
            format: byte
          max_length:
            type: string
            format: byte
        title: >-
          NicknameParams defines the parameters related to the profiles
          nicknames
      dtag:
        type: object
        properties:
          reg_ex:
            type: string
          min_length:
            type: string
            format: byte
          max_length:
            type: string
            format: byte
        title: DTagParams defines the parameters related to profile DTags
      bio:
        type: object
        properties:
          max_length:
            type: string
            format: byte
        title: BioParams defines the parameters related to profile biography
      oracle:
        type: object
        properties:
          script_id:
            type: string
            format: uint64
            title: >-
              ScriptID represents the ID of the oracle script to be called to
              verify the

              data
          ask_count:
            type: string
            format: uint64
            title: >-
              AskCount represents the number of oracles to which ask to verify
              the data
          min_count:
            type: string
            format: uint64
            title: >-
              MinCount represents the minimum count of oracles that should
              complete the

              verification successfully
          prepare_gas:
            type: string
            format: uint64
            title: >-
              PrepareGas represents the amount of gas to be used during the
              preparation

              stage of the oracle script
          execute_gas:
            type: string
            format: uint64
            title: >-
              ExecuteGas represents the amount of gas to be used during the
              execution of

              the oracle script
          fee_amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: >-
              FeeAmount represents the amount of fees to be payed in order to
              execute the

              oracle script
        title: |-
          OracleParams defines the parameters related to the oracle
          that will be used to verify the ownership of a centralized
          application account by a Desmos profile
      app_links:
        type: object
        properties:
          validity_duration:
            type: string
            title: Default validity duration before an application link expires
        title: AppLinksParams define the parameters related to the app links
    title: Params contains the parameters for the profiles module
  desmos.profiles.v3.Proof:
    type: object
    properties:
      pub_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: >-
          PubKey represents the public key associated with the address for which
          to

          prove the ownership
      signature:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: Signature represents the hex-encoded signature of the PlainText value
      plain_text:
        type: string
        title: >-
          PlainText represents the hex-encoded value signed in order to produce
          the

          Signature
    title: |-
      Proof contains all the data used to verify a signature when linking an
      account to a profile
  desmos.profiles.v3.QueryApplicationLinkByClientIDResponse:
    type: object
    properties:
      link:
        type: object
        properties:
          user:
            type: string
            title: User to which the link is associated
          data:
            title: Data contains the details of this specific link
            type: object
            properties:
              application:
                type: string
                title: 'The application name (eg. Twitter, GitHub, etc)'
              username:
                type: string
                title: >-
                  Username on the application (eg. Twitter tag, GitHub profile,
                  etc)
          state:
            title: State of the link
            type: string
            enum:
              - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
              - APPLICATION_LINK_STATE_VERIFICATION_STARTED
              - APPLICATION_LINK_STATE_VERIFICATION_ERROR
              - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS
              - APPLICATION_LINK_STATE_TIMED_OUT
            default: APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
            description: >-
              - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED: A link has just
              been initialized
               - APPLICATION_LINK_STATE_VERIFICATION_STARTED: A link has just started being verified
               - APPLICATION_LINK_STATE_VERIFICATION_ERROR: A link has errored during the verification process
               - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS: A link has being verified successfully
               - APPLICATION_LINK_STATE_TIMED_OUT: A link has timed out while waiting for the verification
          oracle_request:
            title: >-
              OracleRequest represents the request that has been made to the
              oracle
            type: object
            properties:
              id:
                type: string
                format: uint64
                title: ID is the ID of the request
              oracle_script_id:
                type: string
                format: uint64
                title: OracleScriptID is ID of an oracle script
              call_data:
                title: CallData contains the data used to perform the oracle request
                type: object
                properties:
                  application:
                    type: string
                    title: The application for which the ownership should be verified
                  call_data:
                    type: string
                    title: >-
                      The hex encoded call data that should be used to verify
                      the application

                      account ownership
              client_id:
                type: string
                title: >-
                  ClientID represents the ID of the client that has called the
                  oracle script
          result:
            title: |-
              Data coming from the result of the verification.
              Only available when the state is STATE_SUCCESS
            type: object
            properties:
              success:
                title: Success represents a successful verification
                type: object
                properties:
                  value:
                    type: string
                    title: Hex-encoded value that has be signed by the profile
                  signature:
                    type: string
                    title: >-
                      Hex-encoded signature that has been produced by signing
                      the value
              failed:
                title: Failed represents a failed verification
                type: object
                properties:
                  error:
                    type: string
                    title: Error that is associated with the failure
          creation_time:
            type: string
            format: date-time
            title: CreationTime represents the time in which the link was created
          expiration_time:
            type: string
            format: date-time
            title: ExpirationTime represents the time in which the link will expire
        title: >-
          ApplicationLink contains the data of a link to a centralized
          application
    title: |-
      QueryApplicationLinkByClientIDResponse contains the data returned by the
      request allowing to get an application link using a client id
  desmos.profiles.v3.QueryApplicationLinkOwnersResponse:
    type: object
    properties:
      owners:
        type: array
        items:
          type: object
          properties:
            user:
              type: string
            application:
              type: string
            username:
              type: string
          title: >-
            ApplicationLinkOwnerDetails contains the details of a single
            application

            link owner
        title: Addresses of the application links owners
      pagination:
        title: Pagination defines the pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: >-
      QueryApplicationLinkOwnersResponse contains the data returned by the
      request

      allowing to get application link owners.
  desmos.profiles.v3.QueryApplicationLinkOwnersResponse.ApplicationLinkOwnerDetails:
    type: object
    properties:
      user:
        type: string
      application:
        type: string
      username:
        type: string
    title: |-
      ApplicationLinkOwnerDetails contains the details of a single application
      link owner
  desmos.profiles.v3.QueryApplicationLinksResponse:
    type: object
    properties:
      links:
        type: array
        items:
          type: object
          properties:
            user:
              type: string
              title: User to which the link is associated
            data:
              title: Data contains the details of this specific link
              type: object
              properties:
                application:
                  type: string
                  title: 'The application name (eg. Twitter, GitHub, etc)'
                username:
                  type: string
                  title: >-
                    Username on the application (eg. Twitter tag, GitHub
                    profile, etc)
            state:
              title: State of the link
              type: string
              enum:
                - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
                - APPLICATION_LINK_STATE_VERIFICATION_STARTED
                - APPLICATION_LINK_STATE_VERIFICATION_ERROR
                - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS
                - APPLICATION_LINK_STATE_TIMED_OUT
              default: APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED
              description: >-
                - APPLICATION_LINK_STATE_INITIALIZED_UNSPECIFIED: A link has
                just been initialized
                 - APPLICATION_LINK_STATE_VERIFICATION_STARTED: A link has just started being verified
                 - APPLICATION_LINK_STATE_VERIFICATION_ERROR: A link has errored during the verification process
                 - APPLICATION_LINK_STATE_VERIFICATION_SUCCESS: A link has being verified successfully
                 - APPLICATION_LINK_STATE_TIMED_OUT: A link has timed out while waiting for the verification
            oracle_request:
              title: >-
                OracleRequest represents the request that has been made to the
                oracle
              type: object
              properties:
                id:
                  type: string
                  format: uint64
                  title: ID is the ID of the request
                oracle_script_id:
                  type: string
                  format: uint64
                  title: OracleScriptID is ID of an oracle script
                call_data:
                  title: >-
                    CallData contains the data used to perform the oracle
                    request
                  type: object
                  properties:
                    application:
                      type: string
                      title: >-
                        The application for which the ownership should be
                        verified
                    call_data:
                      type: string
                      title: >-
                        The hex encoded call data that should be used to verify
                        the application

                        account ownership
                client_id:
                  type: string
                  title: >-
                    ClientID represents the ID of the client that has called the
                    oracle script
            result:
              title: |-
                Data coming from the result of the verification.
                Only available when the state is STATE_SUCCESS
              type: object
              properties:
                success:
                  title: Success represents a successful verification
                  type: object
                  properties:
                    value:
                      type: string
                      title: Hex-encoded value that has be signed by the profile
                    signature:
                      type: string
                      title: >-
                        Hex-encoded signature that has been produced by signing
                        the value
                failed:
                  title: Failed represents a failed verification
                  type: object
                  properties:
                    error:
                      type: string
                      title: Error that is associated with the failure
            creation_time:
              type: string
              format: date-time
              title: CreationTime represents the time in which the link was created
            expiration_time:
              type: string
              format: date-time
              title: ExpirationTime represents the time in which the link will expire
          title: >-
            ApplicationLink contains the data of a link to a centralized
            application
      pagination:
        title: Pagination defines the pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryApplicationLinksResponse represents the response to the query used
      to get the application links for a specific user
  desmos.profiles.v3.QueryChainLinkOwnersResponse:
    type: object
    properties:
      owners:
        type: array
        items:
          type: object
          properties:
            user:
              type: string
            chain_name:
              type: string
            target:
              type: string
          title: >-
            ChainLinkOwnerDetails contains the details of a single chain link
            owner
        title: Addresses of the chain links owners
      pagination:
        title: Pagination defines the pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: |-
      QueryChainLinkOwnersResponse contains the data returned by the request
      allowing to get chain link owners.
  desmos.profiles.v3.QueryChainLinkOwnersResponse.ChainLinkOwnerDetails:
    type: object
    properties:
      user:
        type: string
      chain_name:
        type: string
      target:
        type: string
    title: ChainLinkOwnerDetails contains the details of a single chain link owner
  desmos.profiles.v3.QueryChainLinksResponse:
    type: object
    properties:
      links:
        type: array
        items:
          type: object
          properties:
            user:
              type: string
              title: User defines the destination profile address to link
            address:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: >-
                Address contains the data of the external chain address to be
                connected

                with the Desmos profile
            proof:
              title: Proof contains the ownership proof of the external chain address
              type: object
              properties:
                pub_key:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  title: >-
                    PubKey represents the public key associated with the address
                    for which to

                    prove the ownership
                signature:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  title: >-
                    Signature represents the hex-encoded signature of the
                    PlainText value
                plain_text:
                  type: string
                  title: >-
                    PlainText represents the hex-encoded value signed in order
                    to produce the

                    Signature
            chain_config:
              title: ChainConfig contains the configuration of the external chain
              type: object
              properties:
                name:
                  type: string
              description: >-
                ChainConfig contains the data of the chain with which the link
                is made.
            creation_time:
              type: string
              format: date-time
              title: >-
                CreationTime represents the time in which the link has been
                created
          title: >-
            ChainLink contains the data representing either an inter- or cross-
            chain

            link
      pagination:
        title: Pagination defines the pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: |-
      QueryChainLinksResponse is the response type for the
      Query/ChainLinks RPC method.
  desmos.profiles.v3.QueryDefaultExternalAddressesResponse:
    type: object
    properties:
      links:
        type: array
        items:
          type: object
          properties:
            user:
              type: string
              title: User defines the destination profile address to link
            address:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: >-
                Address contains the data of the external chain address to be
                connected

                with the Desmos profile
            proof:
              title: Proof contains the ownership proof of the external chain address
              type: object
              properties:
                pub_key:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  title: >-
                    PubKey represents the public key associated with the address
                    for which to

                    prove the ownership
                signature:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                  title: >-
                    Signature represents the hex-encoded signature of the
                    PlainText value
                plain_text:
                  type: string
                  title: >-
                    PlainText represents the hex-encoded value signed in order
                    to produce the

                    Signature
            chain_config:
              title: ChainConfig contains the configuration of the external chain
              type: object
              properties:
                name:
                  type: string
              description: >-
                ChainConfig contains the data of the chain with which the link
                is made.
            creation_time:
              type: string
              format: date-time
              title: >-
                CreationTime represents the time in which the link has been
                created
          title: >-
            ChainLink contains the data representing either an inter- or cross-
            chain

            link
        title: >-
          List of default addresses, each one represented by the associated
          chain

          link
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryDefaultExternalAddressesResponse is the response type for
      Query/DefaultExternalAddresses RPC method
  desmos.profiles.v3.QueryIncomingDTagTransferRequestsResponse:
    type: object
    properties:
      requests:
        type: array
        items:
          type: object
          properties:
            dtag_to_trade:
              type: string
              title: >-
                DTagToTrade contains the value of the DTag that should be
                transferred from

                the receiver of the request to the sender
            sender:
              type: string
              title: >-
                Sender represents the address of the account that sent the
                request
            receiver:
              type: string
              title: >-
                Receiver represents the receiver of the request that, if
                accepted, will

                give to the sender their DTag
          title: >-
            DTagTransferRequest represent a DTag transfer request between two
            users
        title: >-
          Requests represent the list of all the DTag transfer requests made
          towards

          the user
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        title: Pagination defines the pagination response
    description: |-
      QueryIncomingDTagTransferRequestsResponse is the response type for the
      Query/IncomingDTagTransferRequests RPC method.
  desmos.profiles.v3.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          nickname:
            type: object
            properties:
              min_length:
                type: string
                format: byte
              max_length:
                type: string
                format: byte
            title: >-
              NicknameParams defines the parameters related to the profiles
              nicknames
          dtag:
            type: object
            properties:
              reg_ex:
                type: string
              min_length:
                type: string
                format: byte
              max_length:
                type: string
                format: byte
            title: DTagParams defines the parameters related to profile DTags
          bio:
            type: object
            properties:
              max_length:
                type: string
                format: byte
            title: BioParams defines the parameters related to profile biography
          oracle:
            type: object
            properties:
              script_id:
                type: string
                format: uint64
                title: >-
                  ScriptID represents the ID of the oracle script to be called
                  to verify the

                  data
              ask_count:
                type: string
                format: uint64
                title: >-
                  AskCount represents the number of oracles to which ask to
                  verify the data
              min_count:
                type: string
                format: uint64
                title: >-
                  MinCount represents the minimum count of oracles that should
                  complete the

                  verification successfully
              prepare_gas:
                type: string
                format: uint64
                title: >-
                  PrepareGas represents the amount of gas to be used during the
                  preparation

                  stage of the oracle script
              execute_gas:
                type: string
                format: uint64
                title: >-
                  ExecuteGas represents the amount of gas to be used during the
                  execution of

                  the oracle script
              fee_amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: >-
                  FeeAmount represents the amount of fees to be payed in order
                  to execute the

                  oracle script
            title: |-
              OracleParams defines the parameters related to the oracle
              that will be used to verify the ownership of a centralized
              application account by a Desmos profile
          app_links:
            type: object
            properties:
              validity_duration:
                type: string
                title: Default validity duration before an application link expires
            title: AppLinksParams define the parameters related to the app links
        title: Params contains the parameters for the profiles module
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  desmos.profiles.v3.QueryProfileResponse:
    type: object
    properties:
      profile:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryProfileResponse is the response type for the Query/Profile RPC
      method.
  desmos.profiles.v3.Result:
    type: object
    properties:
      success:
        title: Success represents a successful verification
        type: object
        properties:
          value:
            type: string
            title: Hex-encoded value that has be signed by the profile
          signature:
            type: string
            title: Hex-encoded signature that has been produced by signing the value
      failed:
        title: Failed represents a failed verification
        type: object
        properties:
          error:
            type: string
            title: Error that is associated with the failure
    title: Result represents a verification result
  desmos.profiles.v3.Result.Failed:
    type: object
    properties:
      error:
        type: string
        title: Error that is associated with the failure
    title: |-
      Failed is the result of an application link that has not been verified
      successfully
  desmos.profiles.v3.Result.Success:
    type: object
    properties:
      value:
        type: string
        title: Hex-encoded value that has be signed by the profile
      signature:
        type: string
        title: Hex-encoded signature that has been produced by signing the value
    title: |-
      Success is the result of an application link that has been successfully
      verified
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  desmos.relationships.v1.QueryBlocksResponse:
    type: object
    properties:
      blocks:
        type: array
        items:
          type: object
          properties:
            blocker:
              type: string
              title: Blocker represents the address of the user blocking another one
            blocked:
              type: string
              title: Blocked represents the address of the blocked user
            reason:
              type: string
              description: >-
                Reason represents the optional reason the user has been blocked
                for.
            subspace_id:
              type: string
              format: uint64
              title: >-
                SubspaceID represents the ID of the subspace inside which the
                user should

                be blocked
          description: >-
            UserBlock represents the fact that the Blocker has blocked the given
            Blocked

            user.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: |-
      QueryBlocksResponse is the response type for the Query/Blocks RPC
      method.
  desmos.relationships.v1.QueryRelationshipsResponse:
    type: object
    properties:
      relationships:
        type: array
        items:
          type: object
          properties:
            creator:
              type: string
              title: Creator represents the creator of the relationship
            counterparty:
              type: string
              title: >-
                Counterparty represents the other user involved in the
                relationship
            subspace_id:
              type: string
              format: uint64
              title: >-
                SubspaceID represents the id of the subspace for which the
                relationship is

                valid
          description: |-
            Relationship is the struct of a relationship.
            It represent the concept of "follow" of traditional social networks.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: |-
      QueryRelationshipsResponse is the response type for the
      Query/Relationships RPC method.
  desmos.relationships.v1.Relationship:
    type: object
    properties:
      creator:
        type: string
        title: Creator represents the creator of the relationship
      counterparty:
        type: string
        title: Counterparty represents the other user involved in the relationship
      subspace_id:
        type: string
        format: uint64
        title: >-
          SubspaceID represents the id of the subspace for which the
          relationship is

          valid
    description: |-
      Relationship is the struct of a relationship.
      It represent the concept of "follow" of traditional social networks.
  desmos.relationships.v1.UserBlock:
    type: object
    properties:
      blocker:
        type: string
        title: Blocker represents the address of the user blocking another one
      blocked:
        type: string
        title: Blocked represents the address of the blocked user
      reason:
        type: string
        description: Reason represents the optional reason the user has been blocked for.
      subspace_id:
        type: string
        format: uint64
        title: >-
          SubspaceID represents the ID of the subspace inside which the user
          should

          be blocked
    description: >-
      UserBlock represents the fact that the Blocker has blocked the given
      Blocked

      user.
  desmos.subspaces.v3.PermissionDetail:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace for which this permission is valid
      section_id:
        type: integer
        format: int64
        title: Id of the section for which this permission is valid
      user:
        title: User represents a user permission
        type: object
        properties:
          user:
            type: string
            title: User for which the permission was set
          permission:
            type: array
            items:
              type: string
            title: Permissions set to the user
      group:
        title: Group represents a group permission
        type: object
        properties:
          group_id:
            type: integer
            format: int64
            title: Unique id of the group
          permission:
            type: array
            items:
              type: string
            title: Permissions set to the group
    title: PermissionDetail contains the details data of a permission
  desmos.subspaces.v3.PermissionDetail.Group:
    type: object
    properties:
      group_id:
        type: integer
        format: int64
        title: Unique id of the group
      permission:
        type: array
        items:
          type: string
        title: Permissions set to the group
    title: Group is a permission that has been set to a user group
  desmos.subspaces.v3.PermissionDetail.User:
    type: object
    properties:
      user:
        type: string
        title: User for which the permission was set
      permission:
        type: array
        items:
          type: string
        title: Permissions set to the user
    title: User is a permission that has been set to a specific user
  desmos.subspaces.v3.QuerySectionResponse:
    type: object
    properties:
      section:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace inside which the section exists
          id:
            type: integer
            format: int64
            title: Unique id of the section within the subspace
          parent_id:
            type: integer
            format: int64
            title: (optional) Id of the parent section
          name:
            type: string
            title: Name of the section within the subspace
          description:
            type: string
            title: (optional) Description of the section
        title: Section contains the data of a single subspace section
    title: QuerySectionResponse is the response type for Query/Section RPC method
  desmos.subspaces.v3.QuerySectionsResponse:
    type: object
    properties:
      sections:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace inside which the section exists
            id:
              type: integer
              format: int64
              title: Unique id of the section within the subspace
            parent_id:
              type: integer
              format: int64
              title: (optional) Id of the parent section
            name:
              type: string
              title: Name of the section within the subspace
            description:
              type: string
              title: (optional) Description of the section
          title: Section contains the data of a single subspace section
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: QuerySectionsResponse is the response type for Query/Sections RPC method
  desmos.subspaces.v3.QuerySubspaceResponse:
    type: object
    properties:
      subspace:
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: Unique id that identifies the subspace
          name:
            type: string
            title: Human-readable name of the subspace
          description:
            type: string
            title: Optional description of this subspace
          treasury:
            type: string
            title: >-
              Represents the account that is associated with the subspace and

              should be used to connect external applications to verify this
              subspace
          owner:
            type: string
            title: Address of the user that owns the subspace
          creator:
            type: string
            title: Address of the subspace creator
          creation_time:
            type: string
            format: date-time
            title: the creation time of the subspace
        title: Subspace contains all the data of a Desmos subspace
    title: QuerySubspaceResponse is the response type for the Query/Subspace method
  desmos.subspaces.v3.QuerySubspacesResponse:
    type: object
    properties:
      subspaces:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: Unique id that identifies the subspace
            name:
              type: string
              title: Human-readable name of the subspace
            description:
              type: string
              title: Optional description of this subspace
            treasury:
              type: string
              title: >-
                Represents the account that is associated with the subspace and

                should be used to connect external applications to verify this
                subspace
            owner:
              type: string
              title: Address of the user that owns the subspace
            creator:
              type: string
              title: Address of the subspace creator
            creation_time:
              type: string
              format: date-time
              title: the creation time of the subspace
          title: Subspace contains all the data of a Desmos subspace
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QuerySubspacesResponse is the response type for the Query/Subspaces RPC
      method
  desmos.subspaces.v3.QueryUserGroupMembersResponse:
    type: object
    properties:
      members:
        type: array
        items:
          type: string
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryUserGroupMembersResponse is the response type for the
      Query/UserGroupMembers RPC method
  desmos.subspaces.v3.QueryUserGroupResponse:
    type: object
    properties:
      group:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: ID of the subspace inside which this group exists
          section_id:
            type: integer
            format: int64
            title: (optional) Id of the section inside which this group is valid
          id:
            type: integer
            format: int64
            title: Unique id that identifies the group
          name:
            type: string
            title: Human-readable name of the user group
          description:
            type: string
            title: Optional description of this group
          permissions:
            type: array
            items:
              type: string
            title: >-
              Permissions that will be granted to all the users part of this
              group
        title: UserGroup represents a group of users
    title: |-
      QueryUserGroupResponse is the response type for the Query/UserGroup RPC
      method
  desmos.subspaces.v3.QueryUserGroupsResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: ID of the subspace inside which this group exists
            section_id:
              type: integer
              format: int64
              title: (optional) Id of the section inside which this group is valid
            id:
              type: integer
              format: int64
              title: Unique id that identifies the group
            name:
              type: string
              title: Human-readable name of the user group
            description:
              type: string
              title: Optional description of this group
            permissions:
              type: array
              items:
                type: string
              title: >-
                Permissions that will be granted to all the users part of this
                group
          title: UserGroup represents a group of users
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryUserGroupsResponse is the response type for the Query/UserGroups RPC
      method
  desmos.subspaces.v3.QueryUserPermissionsResponse:
    type: object
    properties:
      permissions:
        type: array
        items:
          type: string
      details:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace for which this permission is valid
            section_id:
              type: integer
              format: int64
              title: Id of the section for which this permission is valid
            user:
              title: User represents a user permission
              type: object
              properties:
                user:
                  type: string
                  title: User for which the permission was set
                permission:
                  type: array
                  items:
                    type: string
                  title: Permissions set to the user
            group:
              title: Group represents a group permission
              type: object
              properties:
                group_id:
                  type: integer
                  format: int64
                  title: Unique id of the group
                permission:
                  type: array
                  items:
                    type: string
                  title: Permissions set to the group
          title: PermissionDetail contains the details data of a permission
    title: |-
      QueryUserPermissionsRequest is the response type for the
      Query/UserPermissions method
  desmos.subspaces.v3.Section:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace inside which the section exists
      id:
        type: integer
        format: int64
        title: Unique id of the section within the subspace
      parent_id:
        type: integer
        format: int64
        title: (optional) Id of the parent section
      name:
        type: string
        title: Name of the section within the subspace
      description:
        type: string
        title: (optional) Description of the section
    title: Section contains the data of a single subspace section
  desmos.subspaces.v3.Subspace:
    type: object
    properties:
      id:
        type: string
        format: uint64
        title: Unique id that identifies the subspace
      name:
        type: string
        title: Human-readable name of the subspace
      description:
        type: string
        title: Optional description of this subspace
      treasury:
        type: string
        title: >-
          Represents the account that is associated with the subspace and

          should be used to connect external applications to verify this
          subspace
      owner:
        type: string
        title: Address of the user that owns the subspace
      creator:
        type: string
        title: Address of the subspace creator
      creation_time:
        type: string
        format: date-time
        title: the creation time of the subspace
    title: Subspace contains all the data of a Desmos subspace
  desmos.subspaces.v3.UserGroup:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: ID of the subspace inside which this group exists
      section_id:
        type: integer
        format: int64
        title: (optional) Id of the section inside which this group is valid
      id:
        type: integer
        format: int64
        title: Unique id that identifies the group
      name:
        type: string
        title: Human-readable name of the user group
      description:
        type: string
        title: Optional description of this group
      permissions:
        type: array
        items:
          type: string
        title: Permissions that will be granted to all the users part of this group
    title: UserGroup represents a group of users
  desmos.posts.v2.Attachment:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: >-
          Id of the subspace inside which the post to which this attachment
          should be

          connected is
      post_id:
        type: string
        format: uint64
        title: Id of the post to which this attachment should be connected
      id:
        type: integer
        format: int64
        title: If of this attachment
      content:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: Content of the attachment
    title: Attachment contains the data of a single post attachment
  desmos.posts.v2.Entities:
    type: object
    properties:
      hashtags:
        type: array
        items:
          type: object
          properties:
            start:
              type: string
              format: uint64
              title: Index of the character inside the text at which the tag starts
            end:
              type: string
              format: uint64
              title: Index of the character inside the text at which the tag ends
            tag:
              type: string
              title: 'Tag reference (user address, hashtag value, etc)'
          title: TextTag represents a tag within the post text
        title: Hashtags represent inside the post text
      mentions:
        type: array
        items:
          type: object
          properties:
            start:
              type: string
              format: uint64
              title: Index of the character inside the text at which the tag starts
            end:
              type: string
              format: uint64
              title: Index of the character inside the text at which the tag ends
            tag:
              type: string
              title: 'Tag reference (user address, hashtag value, etc)'
          title: TextTag represents a tag within the post text
        title: Mentions present inside the post text
      urls:
        type: array
        items:
          type: object
          properties:
            start:
              type: string
              format: uint64
              title: Index of the character inside the text at which the URL starts
            end:
              type: string
              format: uint64
              title: Index of the character inside the text at which the URL ends
            url:
              type: string
              title: Value of the URL where the user should be redirected to
            display_url:
              type: string
              title: (optional) Display value of the URL
          title: Url contains the details of a generic URL
        title: Links present inside the post text
    title: Contains the details of entities parsed out of the post text
  desmos.posts.v2.Params:
    type: object
    properties:
      max_text_length:
        type: integer
        format: int64
        title: Maximum length of the post text
    title: Params contains the parameters for the posts module
  desmos.posts.v2.Post:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace inside which the post has been created
      section_id:
        type: integer
        format: int64
        title: Id of the section inside which the post has been created
      id:
        type: string
        format: uint64
        title: Unique id of the post
      external_id:
        type: string
        title: (optional) External id for this post
      text:
        type: string
        title: (optional) Text of the post
      entities:
        title: (optional) Entities connected to this post
        type: object
        properties:
          hashtags:
            type: array
            items:
              type: object
              properties:
                start:
                  type: string
                  format: uint64
                  title: >-
                    Index of the character inside the text at which the tag
                    starts
                end:
                  type: string
                  format: uint64
                  title: Index of the character inside the text at which the tag ends
                tag:
                  type: string
                  title: 'Tag reference (user address, hashtag value, etc)'
              title: TextTag represents a tag within the post text
            title: Hashtags represent inside the post text
          mentions:
            type: array
            items:
              type: object
              properties:
                start:
                  type: string
                  format: uint64
                  title: >-
                    Index of the character inside the text at which the tag
                    starts
                end:
                  type: string
                  format: uint64
                  title: Index of the character inside the text at which the tag ends
                tag:
                  type: string
                  title: 'Tag reference (user address, hashtag value, etc)'
              title: TextTag represents a tag within the post text
            title: Mentions present inside the post text
          urls:
            type: array
            items:
              type: object
              properties:
                start:
                  type: string
                  format: uint64
                  title: >-
                    Index of the character inside the text at which the URL
                    starts
                end:
                  type: string
                  format: uint64
                  title: Index of the character inside the text at which the URL ends
                url:
                  type: string
                  title: Value of the URL where the user should be redirected to
                display_url:
                  type: string
                  title: (optional) Display value of the URL
              title: Url contains the details of a generic URL
            title: Links present inside the post text
      tags:
        type: array
        items:
          type: string
        title: 'Tags related to this post, useful for categorization'
      author:
        type: string
        title: Author of the post
      conversation_id:
        type: string
        format: uint64
        title: (optional) Id of the original post of the conversation
      referenced_posts:
        type: array
        items:
          type: object
          properties:
            type:
              title: Type of reference
              type: string
              enum:
                - POST_REFERENCE_TYPE_UNSPECIFIED
                - POST_REFERENCE_TYPE_REPLY
                - POST_REFERENCE_TYPE_QUOTE
                - POST_REFERENCE_TYPE_REPOST
              default: POST_REFERENCE_TYPE_UNSPECIFIED
              description: |-
                - POST_REFERENCE_TYPE_UNSPECIFIED: No reference specified
                 - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                 - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                 - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
            post_id:
              type: string
              format: uint64
              title: Id of the referenced post
            position:
              type: string
              format: uint64
              title: >-
                Position of the reference inside the post's text. This should be
                used only

                with the type set to TYPE_QUOTE
          title: PostReference contains the details of a post reference
        title: 'A list this posts references (either as a reply, repost or quote)'
      reply_settings:
        title: Reply settings of this post
        type: string
        enum:
          - REPLY_SETTING_UNSPECIFIED
          - REPLY_SETTING_EVERYONE
          - REPLY_SETTING_FOLLOWERS
          - REPLY_SETTING_MUTUAL
          - REPLY_SETTING_MENTIONS
        default: REPLY_SETTING_UNSPECIFIED
        description: |-
          - REPLY_SETTING_UNSPECIFIED: No reply setting specified
           - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
           - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
           - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
           - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
      creation_date:
        type: string
        format: date-time
        title: Creation date of the post
      last_edited_date:
        type: string
        format: date-time
        title: (optional) Last edited time of the post
    title: Post contains all the information about a single post
  desmos.posts.v2.PostReference:
    type: object
    properties:
      type:
        title: Type of reference
        type: string
        enum:
          - POST_REFERENCE_TYPE_UNSPECIFIED
          - POST_REFERENCE_TYPE_REPLY
          - POST_REFERENCE_TYPE_QUOTE
          - POST_REFERENCE_TYPE_REPOST
        default: POST_REFERENCE_TYPE_UNSPECIFIED
        description: |-
          - POST_REFERENCE_TYPE_UNSPECIFIED: No reference specified
           - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
           - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
           - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
      post_id:
        type: string
        format: uint64
        title: Id of the referenced post
      position:
        type: string
        format: uint64
        title: >-
          Position of the reference inside the post's text. This should be used
          only

          with the type set to TYPE_QUOTE
    title: PostReference contains the details of a post reference
  desmos.posts.v2.PostReferenceType:
    type: string
    enum:
      - POST_REFERENCE_TYPE_UNSPECIFIED
      - POST_REFERENCE_TYPE_REPLY
      - POST_REFERENCE_TYPE_QUOTE
      - POST_REFERENCE_TYPE_REPOST
    default: POST_REFERENCE_TYPE_UNSPECIFIED
    description: |-
      - POST_REFERENCE_TYPE_UNSPECIFIED: No reference specified
       - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
       - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
       - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
    title: PostReferenceType represents the different types of references
  desmos.posts.v2.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          max_text_length:
            type: integer
            format: int64
            title: Maximum length of the post text
        title: Params contains the parameters for the posts module
    title: QueryParamsResponse is the response type for the Query/Params RPC method
  desmos.posts.v2.QueryPollAnswersResponse:
    type: object
    properties:
      answers:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: >-
                Subspace id inside which the post related to this attachment is
                located
            post_id:
              type: string
              format: uint64
              title: Id of the post associated to this attachment
            poll_id:
              type: integer
              format: int64
              title: Id of the poll to which this answer is associated
            answers_indexes:
              type: array
              items:
                type: integer
                format: int64
              title: Indexes of the answers inside the ProvidedAnswers array
            user:
              type: string
              title: Address of the user answering the poll
          title: UserAnswer represents a user answer to a poll
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QueryPollAnswersResponse is the response type for the Query/PollAnswers
      RPC

      method
  desmos.posts.v2.QueryPostAttachmentsResponse:
    type: object
    properties:
      attachments:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: >-
                Id of the subspace inside which the post to which this
                attachment should be

                connected is
            post_id:
              type: string
              format: uint64
              title: Id of the post to which this attachment should be connected
            id:
              type: integer
              format: int64
              title: If of this attachment
            content:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: Content of the attachment
          title: Attachment contains the data of a single post attachment
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryPostAttachmentsResponse is the response type for the
      Query/PostAttachments RPC method
  desmos.posts.v2.QueryPostResponse:
    type: object
    properties:
      post:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace inside which the post has been created
          section_id:
            type: integer
            format: int64
            title: Id of the section inside which the post has been created
          id:
            type: string
            format: uint64
            title: Unique id of the post
          external_id:
            type: string
            title: (optional) External id for this post
          text:
            type: string
            title: (optional) Text of the post
          entities:
            title: (optional) Entities connected to this post
            type: object
            properties:
              hashtags:
                type: array
                items:
                  type: object
                  properties:
                    start:
                      type: string
                      format: uint64
                      title: >-
                        Index of the character inside the text at which the tag
                        starts
                    end:
                      type: string
                      format: uint64
                      title: >-
                        Index of the character inside the text at which the tag
                        ends
                    tag:
                      type: string
                      title: 'Tag reference (user address, hashtag value, etc)'
                  title: TextTag represents a tag within the post text
                title: Hashtags represent inside the post text
              mentions:
                type: array
                items:
                  type: object
                  properties:
                    start:
                      type: string
                      format: uint64
                      title: >-
                        Index of the character inside the text at which the tag
                        starts
                    end:
                      type: string
                      format: uint64
                      title: >-
                        Index of the character inside the text at which the tag
                        ends
                    tag:
                      type: string
                      title: 'Tag reference (user address, hashtag value, etc)'
                  title: TextTag represents a tag within the post text
                title: Mentions present inside the post text
              urls:
                type: array
                items:
                  type: object
                  properties:
                    start:
                      type: string
                      format: uint64
                      title: >-
                        Index of the character inside the text at which the URL
                        starts
                    end:
                      type: string
                      format: uint64
                      title: >-
                        Index of the character inside the text at which the URL
                        ends
                    url:
                      type: string
                      title: Value of the URL where the user should be redirected to
                    display_url:
                      type: string
                      title: (optional) Display value of the URL
                  title: Url contains the details of a generic URL
                title: Links present inside the post text
          tags:
            type: array
            items:
              type: string
            title: 'Tags related to this post, useful for categorization'
          author:
            type: string
            title: Author of the post
          conversation_id:
            type: string
            format: uint64
            title: (optional) Id of the original post of the conversation
          referenced_posts:
            type: array
            items:
              type: object
              properties:
                type:
                  title: Type of reference
                  type: string
                  enum:
                    - POST_REFERENCE_TYPE_UNSPECIFIED
                    - POST_REFERENCE_TYPE_REPLY
                    - POST_REFERENCE_TYPE_QUOTE
                    - POST_REFERENCE_TYPE_REPOST
                  default: POST_REFERENCE_TYPE_UNSPECIFIED
                  description: |-
                    - POST_REFERENCE_TYPE_UNSPECIFIED: No reference specified
                     - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                     - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                     - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
                post_id:
                  type: string
                  format: uint64
                  title: Id of the referenced post
                position:
                  type: string
                  format: uint64
                  title: >-
                    Position of the reference inside the post's text. This
                    should be used only

                    with the type set to TYPE_QUOTE
              title: PostReference contains the details of a post reference
            title: 'A list this posts references (either as a reply, repost or quote)'
          reply_settings:
            title: Reply settings of this post
            type: string
            enum:
              - REPLY_SETTING_UNSPECIFIED
              - REPLY_SETTING_EVERYONE
              - REPLY_SETTING_FOLLOWERS
              - REPLY_SETTING_MUTUAL
              - REPLY_SETTING_MENTIONS
            default: REPLY_SETTING_UNSPECIFIED
            description: |-
              - REPLY_SETTING_UNSPECIFIED: No reply setting specified
               - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
               - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
               - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
               - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
          creation_date:
            type: string
            format: date-time
            title: Creation date of the post
          last_edited_date:
            type: string
            format: date-time
            title: (optional) Last edited time of the post
        title: Post contains all the information about a single post
    title: QueryPostResponse is the response type for the Query/Post RPC method
  desmos.posts.v2.QuerySectionPostsResponse:
    type: object
    properties:
      posts:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace inside which the post has been created
            section_id:
              type: integer
              format: int64
              title: Id of the section inside which the post has been created
            id:
              type: string
              format: uint64
              title: Unique id of the post
            external_id:
              type: string
              title: (optional) External id for this post
            text:
              type: string
              title: (optional) Text of the post
            entities:
              title: (optional) Entities connected to this post
              type: object
              properties:
                hashtags:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag starts
                      end:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag ends
                      tag:
                        type: string
                        title: 'Tag reference (user address, hashtag value, etc)'
                    title: TextTag represents a tag within the post text
                  title: Hashtags represent inside the post text
                mentions:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag starts
                      end:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag ends
                      tag:
                        type: string
                        title: 'Tag reference (user address, hashtag value, etc)'
                    title: TextTag represents a tag within the post text
                  title: Mentions present inside the post text
                urls:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          URL starts
                      end:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          URL ends
                      url:
                        type: string
                        title: >-
                          Value of the URL where the user should be redirected
                          to
                      display_url:
                        type: string
                        title: (optional) Display value of the URL
                    title: Url contains the details of a generic URL
                  title: Links present inside the post text
            tags:
              type: array
              items:
                type: string
              title: 'Tags related to this post, useful for categorization'
            author:
              type: string
              title: Author of the post
            conversation_id:
              type: string
              format: uint64
              title: (optional) Id of the original post of the conversation
            referenced_posts:
              type: array
              items:
                type: object
                properties:
                  type:
                    title: Type of reference
                    type: string
                    enum:
                      - POST_REFERENCE_TYPE_UNSPECIFIED
                      - POST_REFERENCE_TYPE_REPLY
                      - POST_REFERENCE_TYPE_QUOTE
                      - POST_REFERENCE_TYPE_REPOST
                    default: POST_REFERENCE_TYPE_UNSPECIFIED
                    description: |-
                      - POST_REFERENCE_TYPE_UNSPECIFIED: No reference specified
                       - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                       - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                       - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
                  post_id:
                    type: string
                    format: uint64
                    title: Id of the referenced post
                  position:
                    type: string
                    format: uint64
                    title: >-
                      Position of the reference inside the post's text. This
                      should be used only

                      with the type set to TYPE_QUOTE
                title: PostReference contains the details of a post reference
              title: >-
                A list this posts references (either as a reply, repost or
                quote)
            reply_settings:
              title: Reply settings of this post
              type: string
              enum:
                - REPLY_SETTING_UNSPECIFIED
                - REPLY_SETTING_EVERYONE
                - REPLY_SETTING_FOLLOWERS
                - REPLY_SETTING_MUTUAL
                - REPLY_SETTING_MENTIONS
              default: REPLY_SETTING_UNSPECIFIED
              description: |-
                - REPLY_SETTING_UNSPECIFIED: No reply setting specified
                 - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
                 - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
                 - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
                 - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
            creation_date:
              type: string
              format: date-time
              title: Creation date of the post
            last_edited_date:
              type: string
              format: date-time
              title: (optional) Last edited time of the post
          title: Post contains all the information about a single post
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QuerySectionPostsResponse is the response type for the Query/SectionPosts
      RPC

      method
  desmos.posts.v2.QuerySubspacePostsResponse:
    type: object
    properties:
      posts:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace inside which the post has been created
            section_id:
              type: integer
              format: int64
              title: Id of the section inside which the post has been created
            id:
              type: string
              format: uint64
              title: Unique id of the post
            external_id:
              type: string
              title: (optional) External id for this post
            text:
              type: string
              title: (optional) Text of the post
            entities:
              title: (optional) Entities connected to this post
              type: object
              properties:
                hashtags:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag starts
                      end:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag ends
                      tag:
                        type: string
                        title: 'Tag reference (user address, hashtag value, etc)'
                    title: TextTag represents a tag within the post text
                  title: Hashtags represent inside the post text
                mentions:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag starts
                      end:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          tag ends
                      tag:
                        type: string
                        title: 'Tag reference (user address, hashtag value, etc)'
                    title: TextTag represents a tag within the post text
                  title: Mentions present inside the post text
                urls:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          URL starts
                      end:
                        type: string
                        format: uint64
                        title: >-
                          Index of the character inside the text at which the
                          URL ends
                      url:
                        type: string
                        title: >-
                          Value of the URL where the user should be redirected
                          to
                      display_url:
                        type: string
                        title: (optional) Display value of the URL
                    title: Url contains the details of a generic URL
                  title: Links present inside the post text
            tags:
              type: array
              items:
                type: string
              title: 'Tags related to this post, useful for categorization'
            author:
              type: string
              title: Author of the post
            conversation_id:
              type: string
              format: uint64
              title: (optional) Id of the original post of the conversation
            referenced_posts:
              type: array
              items:
                type: object
                properties:
                  type:
                    title: Type of reference
                    type: string
                    enum:
                      - POST_REFERENCE_TYPE_UNSPECIFIED
                      - POST_REFERENCE_TYPE_REPLY
                      - POST_REFERENCE_TYPE_QUOTE
                      - POST_REFERENCE_TYPE_REPOST
                    default: POST_REFERENCE_TYPE_UNSPECIFIED
                    description: |-
                      - POST_REFERENCE_TYPE_UNSPECIFIED: No reference specified
                       - POST_REFERENCE_TYPE_REPLY: This reference represents a reply to the specified post
                       - POST_REFERENCE_TYPE_QUOTE: This reference represents a quote of the specified post
                       - POST_REFERENCE_TYPE_REPOST: This reference represents a repost of the specified post
                  post_id:
                    type: string
                    format: uint64
                    title: Id of the referenced post
                  position:
                    type: string
                    format: uint64
                    title: >-
                      Position of the reference inside the post's text. This
                      should be used only

                      with the type set to TYPE_QUOTE
                title: PostReference contains the details of a post reference
              title: >-
                A list this posts references (either as a reply, repost or
                quote)
            reply_settings:
              title: Reply settings of this post
              type: string
              enum:
                - REPLY_SETTING_UNSPECIFIED
                - REPLY_SETTING_EVERYONE
                - REPLY_SETTING_FOLLOWERS
                - REPLY_SETTING_MUTUAL
                - REPLY_SETTING_MENTIONS
              default: REPLY_SETTING_UNSPECIFIED
              description: |-
                - REPLY_SETTING_UNSPECIFIED: No reply setting specified
                 - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
                 - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
                 - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
                 - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
            creation_date:
              type: string
              format: date-time
              title: Creation date of the post
            last_edited_date:
              type: string
              format: date-time
              title: (optional) Last edited time of the post
          title: Post contains all the information about a single post
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QuerySubspacePostsResponse is the response type for the
      Query/SubspacePosts

      RPC method
  desmos.posts.v2.ReplySetting:
    type: string
    enum:
      - REPLY_SETTING_UNSPECIFIED
      - REPLY_SETTING_EVERYONE
      - REPLY_SETTING_FOLLOWERS
      - REPLY_SETTING_MUTUAL
      - REPLY_SETTING_MENTIONS
    default: REPLY_SETTING_UNSPECIFIED
    description: |-
      - REPLY_SETTING_UNSPECIFIED: No reply setting specified
       - REPLY_SETTING_EVERYONE: Everyone will be able to reply to this post
       - REPLY_SETTING_FOLLOWERS: Only followers of the author will be able to reply to this post
       - REPLY_SETTING_MUTUAL: Only the author mutual followers will be able to reply to this post
       - REPLY_SETTING_MENTIONS: Only people mentioned inside this post will be able to reply
    title: ReplySetting contains the possible reply settings that a post can have
  desmos.posts.v2.TextTag:
    type: object
    properties:
      start:
        type: string
        format: uint64
        title: Index of the character inside the text at which the tag starts
      end:
        type: string
        format: uint64
        title: Index of the character inside the text at which the tag ends
      tag:
        type: string
        title: 'Tag reference (user address, hashtag value, etc)'
    title: TextTag represents a tag within the post text
  desmos.posts.v2.Url:
    type: object
    properties:
      start:
        type: string
        format: uint64
        title: Index of the character inside the text at which the URL starts
      end:
        type: string
        format: uint64
        title: Index of the character inside the text at which the URL ends
      url:
        type: string
        title: Value of the URL where the user should be redirected to
      display_url:
        type: string
        title: (optional) Display value of the URL
    title: Url contains the details of a generic URL
  desmos.posts.v2.UserAnswer:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: >-
          Subspace id inside which the post related to this attachment is
          located
      post_id:
        type: string
        format: uint64
        title: Id of the post associated to this attachment
      poll_id:
        type: integer
        format: int64
        title: Id of the poll to which this answer is associated
      answers_indexes:
        type: array
        items:
          type: integer
          format: int64
        title: Indexes of the answers inside the ProvidedAnswers array
      user:
        type: string
        title: Address of the user answering the poll
    title: UserAnswer represents a user answer to a poll
  desmos.reactions.v1.FreeTextValueParams:
    type: object
    properties:
      enabled:
        type: boolean
        format: boolean
        title: Whether FreeTextValue reactions should be enabled
      max_length:
        type: integer
        format: int64
        title: The max length that FreeTextValue reactions should have
      reg_ex:
        type: string
        description: |-
          RegEx that each FreeTextValue should respect.
          This is useful to limit what characters can be used as a reaction.
    title: FreeTextValueParams contains the params for FreeTextValue based reactions
  desmos.reactions.v1.QueryReactionResponse:
    type: object
    properties:
      reaction:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace inside which the reaction has been put
          post_id:
            type: string
            format: uint64
            title: Id of the post to which the reaction is associated
          id:
            type: integer
            format: int64
            title: Id of the reaction within the post
          value:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          author:
            type: string
            title: Author of the reaction
        title: Reaction contains the data of a single post reaction
    title: |-
      QueryReactionResponse is the response type for the Query/Reaction RPC
      method
  desmos.reactions.v1.QueryReactionsParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace for which these params are valid
          registered_reaction:
            title: Params related to RegisteredReactionValue reactions
            type: object
            properties:
              enabled:
                type: boolean
                format: boolean
                title: Whether RegisteredReactionValue reactions should be enabled
          free_text:
            title: Params related to FreeTextValue reactions
            type: object
            properties:
              enabled:
                type: boolean
                format: boolean
                title: Whether FreeTextValue reactions should be enabled
              max_length:
                type: integer
                format: int64
                title: The max length that FreeTextValue reactions should have
              reg_ex:
                type: string
                description: >-
                  RegEx that each FreeTextValue should respect.

                  This is useful to limit what characters can be used as a
                  reaction.
        title: >-
          SubspaceReactionsParams contains the params related to a single
          subspace

          reactions
    title: |-
      QueryReactionsParamsResponse is the response type for the
      Query/ReactionsParam RPC method
  desmos.reactions.v1.QueryReactionsResponse:
    type: object
    properties:
      reactions:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace inside which the reaction has been put
            post_id:
              type: string
              format: uint64
              title: Id of the post to which the reaction is associated
            id:
              type: integer
              format: int64
              title: Id of the reaction within the post
            value:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            author:
              type: string
              title: Author of the reaction
          title: Reaction contains the data of a single post reaction
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryReactionsResponse is the response type for the Query/Reactions RPC
      method
  desmos.reactions.v1.QueryRegisteredReactionResponse:
    type: object
    properties:
      registered_reaction:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace for which this reaction has been registered
          id:
            type: integer
            format: int64
            title: Id of the registered reaction
          shorthand_code:
            type: string
            title: Unique shorthand code associated to this reaction
          display_value:
            type: string
            title: Value that should be displayed when using this reaction
        title: >-
          RegisteredReaction contains the details of a registered reaction
          within a

          subspace
    title: |-
      QueryRegisteredReactionResponse is the response type for the
      Query/RegisteredReaction RPC method
  desmos.reactions.v1.QueryRegisteredReactionsResponse:
    type: object
    properties:
      registered_reactions:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace for which this reaction has been registered
            id:
              type: integer
              format: int64
              title: Id of the registered reaction
            shorthand_code:
              type: string
              title: Unique shorthand code associated to this reaction
            display_value:
              type: string
              title: Value that should be displayed when using this reaction
          title: >-
            RegisteredReaction contains the details of a registered reaction
            within a

            subspace
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryRegisteredReactionsResponse is the response type for the
      Query/RegisteredReactions RPC method
  desmos.reactions.v1.Reaction:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace inside which the reaction has been put
      post_id:
        type: string
        format: uint64
        title: Id of the post to which the reaction is associated
      id:
        type: integer
        format: int64
        title: Id of the reaction within the post
      value:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      author:
        type: string
        title: Author of the reaction
    title: Reaction contains the data of a single post reaction
  desmos.reactions.v1.RegisteredReaction:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace for which this reaction has been registered
      id:
        type: integer
        format: int64
        title: Id of the registered reaction
      shorthand_code:
        type: string
        title: Unique shorthand code associated to this reaction
      display_value:
        type: string
        title: Value that should be displayed when using this reaction
    title: |-
      RegisteredReaction contains the details of a registered reaction within a
      subspace
  desmos.reactions.v1.RegisteredReactionValueParams:
    type: object
    properties:
      enabled:
        type: boolean
        format: boolean
        title: Whether RegisteredReactionValue reactions should be enabled
    title: >-
      RegisteredReactionValueParams contains the params for
      RegisteredReactionValue

      based reactions
  desmos.reactions.v1.SubspaceReactionsParams:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace for which these params are valid
      registered_reaction:
        title: Params related to RegisteredReactionValue reactions
        type: object
        properties:
          enabled:
            type: boolean
            format: boolean
            title: Whether RegisteredReactionValue reactions should be enabled
      free_text:
        title: Params related to FreeTextValue reactions
        type: object
        properties:
          enabled:
            type: boolean
            format: boolean
            title: Whether FreeTextValue reactions should be enabled
          max_length:
            type: integer
            format: int64
            title: The max length that FreeTextValue reactions should have
          reg_ex:
            type: string
            description: |-
              RegEx that each FreeTextValue should respect.
              This is useful to limit what characters can be used as a reaction.
    title: |-
      SubspaceReactionsParams contains the params related to a single subspace
      reactions
  desmos.reports.v1.Params:
    type: object
    properties:
      standard_reasons:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              format: int64
              title: Id of the reason inside the subspace
            title:
              type: string
              title: Title of the reason
            description:
              type: string
              title: >-
                (optional) Extended description of the reason and the cases it
                applies to
          title: >-
            StandardReason contains the data of a standard reason that can be
            picked and

            used from different subspaces
        title: >-
          List of available reasons from which new subspaces can pick their
          default

          ones
    title: Params contains the module parameters
  desmos.reports.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          standard_reasons:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  title: Id of the reason inside the subspace
                title:
                  type: string
                  title: Title of the reason
                description:
                  type: string
                  title: >-
                    (optional) Extended description of the reason and the cases
                    it applies to
              title: >-
                StandardReason contains the data of a standard reason that can
                be picked and

                used from different subspaces
            title: >-
              List of available reasons from which new subspaces can pick their
              default

              ones
        title: Params contains the module parameters
    title: QueryParamsResponse is the response type for Query/Params RPC method
  desmos.reports.v1.QueryReasonResponse:
    type: object
    properties:
      reason:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace for which this reason is valid
          id:
            type: integer
            format: int64
            title: Id of the reason inside the subspace
          title:
            type: string
            title: Title of the reason
          description:
            type: string
            title: >-
              (optional) Extended description of the reason and the cases it
              applies to
        title: Reason contains the data about a reporting reason
    title: QueryReasonResponse is the response type for Query/Reason RPC method
  desmos.reports.v1.QueryReasonsResponse:
    type: object
    properties:
      reasons:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace for which this reason is valid
            id:
              type: integer
              format: int64
              title: Id of the reason inside the subspace
            title:
              type: string
              title: Title of the reason
            description:
              type: string
              title: >-
                (optional) Extended description of the reason and the cases it
                applies to
          title: Reason contains the data about a reporting reason
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: QueryReasonsResponse is the response type for Query/Reasons RPC method
  desmos.reports.v1.QueryReportResponse:
    type: object
    properties:
      report:
        type: object
        properties:
          subspace_id:
            type: string
            format: uint64
            title: Id of the subspace for which the report has been created
          id:
            type: string
            format: uint64
            title: Id of the report
          reasons_ids:
            type: array
            items:
              type: integer
              format: int64
            title: Id of the reason this report has been created for
          message:
            type: string
            title: (optional) Message attached to this report
          reporter:
            type: string
            title: Address of the reporter
          target:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            title: Target of the report
          creation_date:
            type: string
            format: date-time
            title: Time in which the report was created
        title: Report contains the data of a generic report
    title: QueryReportResponse is the response type for Query/Report RPC method
  desmos.reports.v1.QueryReportsResponse:
    type: object
    properties:
      reports:
        type: array
        items:
          type: object
          properties:
            subspace_id:
              type: string
              format: uint64
              title: Id of the subspace for which the report has been created
            id:
              type: string
              format: uint64
              title: Id of the report
            reasons_ids:
              type: array
              items:
                type: integer
                format: int64
              title: Id of the reason this report has been created for
            message:
              type: string
              title: (optional) Message attached to this report
            reporter:
              type: string
              title: Address of the reporter
            target:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              title: Target of the report
            creation_date:
              type: string
              format: date-time
              title: Time in which the report was created
          title: Report contains the data of a generic report
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: QueryReportsResponse is the response type for Query/Reports RPC method
  desmos.reports.v1.Reason:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace for which this reason is valid
      id:
        type: integer
        format: int64
        title: Id of the reason inside the subspace
      title:
        type: string
        title: Title of the reason
      description:
        type: string
        title: >-
          (optional) Extended description of the reason and the cases it applies
          to
    title: Reason contains the data about a reporting reason
  desmos.reports.v1.Report:
    type: object
    properties:
      subspace_id:
        type: string
        format: uint64
        title: Id of the subspace for which the report has been created
      id:
        type: string
        format: uint64
        title: Id of the report
      reasons_ids:
        type: array
        items:
          type: integer
          format: int64
        title: Id of the reason this report has been created for
      message:
        type: string
        title: (optional) Message attached to this report
      reporter:
        type: string
        title: Address of the reporter
      target:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: Target of the report
      creation_date:
        type: string
        format: date-time
        title: Time in which the report was created
    title: Report contains the data of a generic report
  desmos.reports.v1.StandardReason:
    type: object
    properties:
      id:
        type: integer
        format: int64
        title: Id of the reason inside the subspace
      title:
        type: string
        title: Title of the reason
      description:
        type: string
        title: >-
          (optional) Extended description of the reason and the cases it applies
          to
    title: >-
      StandardReason contains the data of a standard reason that can be picked
      and

      used from different subspaces
  desmos.fees.v1.MinFee:
    type: object
    properties:
      message_type:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    title: >-
      MinFee contains the minimum amount of coins that should be paid as a fee
      for

      each message of the specific type sent
  desmos.fees.v1.Params:
    type: object
    properties:
      min_fees:
        type: array
        items:
          type: object
          properties:
            message_type:
              type: string
            amount:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          title: >-
            MinFee contains the minimum amount of coins that should be paid as a
            fee for

            each message of the specific type sent
    title: Params contains the parameters for the fees module
  desmos.fees.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          min_fees:
            type: array
            items:
              type: object
              properties:
                message_type:
                  type: string
                amount:
                  type: array
                  items:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
              title: >-
                MinFee contains the minimum amount of coins that should be paid
                as a fee for

                each message of the specific type sent
        title: Params contains the parameters for the fees module
    title: QueryParamsResponse is the response type for the Query/Params RPC
  desmos.supply.v1.QueryCirculatingResponse:
    type: object
    properties:
      circulating_supply:
        type: string
    title: >-
      QueryCirculatingResponse is the response type for the Query/Circulating
      RPC

      method
  desmos.supply.v1.QueryTotalResponse:
    type: object
    properties:
      total_supply:
        type: string
    title: QueryTotalResponse is the response type for the Query/Total RPC method
